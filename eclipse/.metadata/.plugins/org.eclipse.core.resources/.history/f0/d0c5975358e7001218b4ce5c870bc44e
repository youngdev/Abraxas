package com.fifthdimensionsoftware.lua;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;

import javax.imageio.ImageIO;
import com.fifthdimensionsoftware.game.Sound;
import com.fifthdimensionsoftware.game.WindowManager;
import com.fifthdimensionsoftware.game.ZeroDayExploit;

public class LuaJava {
	
	private static HashMap<String, BufferedImage> res = new HashMap<String,BufferedImage>();
	
	public static void playSound(String name)
	{
		Sound sound = new Sound(name);
		sound.play();
	}
	
	public static String dencryptString(String string, String key)
	{
		String toReturn = "";
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		try {
			stream.write(encryptBytes(string.getBytes("UTF-8"), key.getBytes("UTF-8")));
			toReturn = stream.toString("UTF-8");
			stream.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return toReturn;
	}
	
	public static byte[] encryptBytes(final byte[] input, final byte[] secret) {
	    final byte[] output = new byte[input.length];
	    if (secret.length == 0) {
	        throw new IllegalArgumentException("empty security key");
	    }
	    int spos = 0;
	    for (int pos = 0; pos < input.length; ++pos) {
	        output[pos] = (byte) (input[pos] ^ secret[spos]);
	        ++spos;
	        if (spos >= secret.length) {
	            spos = 0;
	        }
	    }
	    return output;
	}
	
	public static Graphics2D getScreen()
	{
		return ZeroDayExploit.getScreen();
	}
	
	public static Color createColor(int r, int g, int b)
	{
		return new Color(r,g,b);
	}
	
	public static void allocateResource(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(new File(filterPath("res", name, "png"))));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void allocateResourceFromDisk(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(new File(filterPath("disk", name, "png"))));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static BufferedImage getResource(String name)
	{
		return LuaJava.res.get(name);
	}
	
	public static ImageObserver getObserver()
	{
		return ZeroDayExploit.getInstance().rootWindow;
	}
	
	public static void repaintScreen()
	{
		ZeroDayExploit.getInstance().rootWindow.repaint();
	}
	
	public static int screenWidth()
	{
		return ZeroDayExploit.getInstance().rootWindow.getWidth();
	}
	
	public static int screenHeight()
	{
		return ZeroDayExploit.getInstance().rootWindow.getHeight();
	}
	
	public static void execute(String terminal, String name)
	{
		ExecutionCore.executeScript(terminal, filterPath("disk", name, "lua"));
	}
	
	public static void executeAsync(String terminal, String name)
	{
		ExecutionCore.executeScriptAsync(terminal, filterPath("disk", name, "lua"), name);
	}
	
	public static void sleep(long time) throws InterruptedException
	{
		Thread.sleep(time);
	}
	
	public static WindowManager getManager()
	{
		return ZeroDayExploit.getWindow();
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
}