package com.fifthdimensionsoftware.zero.graphics;

import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import com.fifthdimensionsoftware.zero.tools.ZipUtil;

public class GraphicsUtil
{
	public static final int scaleConstant = 4;
	
	public static final Color amber = new Color(255, 191, 0);
	
	public static Color screenColor = amber;
	
	public static void setPixel(int x, int y, boolean active, Graphics g)
	{
		if(active)
		{
			g.setColor(screenColor);
			g.fillRect(x*scaleConstant, y*scaleConstant, scaleConstant, scaleConstant);
			Display.update();
			g.fillRect(x*scaleConstant, y*scaleConstant, scaleConstant, scaleConstant);
		}
		else
		{
			g.setColor(Color.black);
			g.fillRect(x*scaleConstant, y*scaleConstant, scaleConstant, scaleConstant);
			Display.update();
			g.fillRect(x*scaleConstant, y*scaleConstant, scaleConstant, scaleConstant);
		}
	}
	
	public static void displayLoadingImage(String imageFile, Graphics g, long delay)
	{
		try {
			g.clear();
			new Image(ZipUtil.getStreamForFile("res.bin", imageFile), imageFile, false).drawCentered(getScreenWidth() / 2, getScreenHeight() / 2);
			Display.update();
			Thread.sleep(delay);
			Display.update();
			g.clear();
			
		} catch (SlickException | InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public static int getScreenWidth()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
	}
	
	public static int getScreenHeight()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getHeight();
	}
	
	public static void takeScreenShot(int xParam, int yParam, int width, int height)
	{
		GL11.glReadBuffer(GL11.GL_FRONT);
		ByteBuffer buffer = BufferUtils.createByteBuffer(width * height * 4);
		GL11.glReadPixels(xParam, yParam, width, height, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
		
		BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		  
		for(int x = 0; x < width; x++){
			for(int y = 0; y < height; y++)
			{
				int i = (x + (width * y)) * 4;
				int r = buffer.get(i) & 0xFF;
				int g = buffer.get(i + 1) & 0xFF;
				int b = buffer.get(i + 2) & 0xFF;
				image.setRGB(x, height - (y + 1), (0xFF << 24) | (r << 16) | (g << 8) | b);
			}
		}
		  
		try {
			ImageIO.write(image, "PNG", new File("image.png"));
		} catch (IOException e) { e.printStackTrace(); }
	}
}