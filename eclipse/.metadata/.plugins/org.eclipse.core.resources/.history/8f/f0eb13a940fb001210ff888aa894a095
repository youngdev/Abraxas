package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLDecoder;
import java.net.UnknownHostException;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.HashMap;
import java.util.Properties;
import java.util.Random;
import java.util.Scanner;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;
import com.fifthdimensionsoftware.network.TargetServer;

public class ZeroDayExploit{
	
	public String[] gameArgs;
	public static ZeroDayExploit instance;
	public boolean inGame = false;
	public GameWindow rootWindow = new GameWindow("Zero Day Exploit");
	public HashMap<String, Boolean> internalKeys = new HashMap<String, Boolean>();
	public HashMap<Integer, GameWindow> auxWindows = new HashMap<Integer, GameWindow>();
	private int rootID;
	public static LuaJava baseLua = null;
	public static String fifthIP, darwinIP, uplinkIP, hostname;
	public static MailSystem globalMail = new MailSystem();
	
	public static void prepareIPs()
	{
		try {
			fifthIP = InetAddress.getByName("www.fifthdimensionsoftware.com").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.fifthdimensionsoftware.com\". It's no big deal.");
			fifthIP = "UNKNOWN_IP";
		}
		try {
			darwinIP = InetAddress.getByName("www.darwinia.co.uk").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.darwinia.co.uk\". It's no big deal.");
			darwinIP = "UNKNOWN_IP";
		}
		try {
			uplinkIP = InetAddress.getByName("www.uplink.co.uk").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.uplink.co.uk\". It's no big deal.");
			uplinkIP = "UNKNOWN_IP";
		}
	}
	
	public static void throwFatal(String message)
	{
		System.err.println("FATAL_ERROR: "+message);
		JOptionPane.showMessageDialog(null,message);
		System.exit(1);
	}
	
	public void run(String[] args)
	{
		this.gameArgs = args;
		if(instance == null)
		{
			instance = this;
			if(!System.getProperty("os.name").toLowerCase().contains("win"))
			{
				throwFatal("Zero Day Exploit is not yet prepared to handle a non-windows OS such as "+System.getProperty("os.name")+", and may contain extreme issues.\nWill now exit.");
			}
			
			this.parseArgs();
			
			//Get the computer name
			try
			{
			    hostname = InetAddress.getLocalHost().getHostName();
			}
			catch (UnknownHostException ex)
			{
				System.err.println("Error resolving the local hostname. It's no big deal.");
				hostname = "UNKNOWN";
			}
			
			baseLua = new LuaJava();
			
			Properties configFile = new Properties();
		    try {
		      configFile.load(ZipHandler.getStreamForFile("res.dat", "Properties.cfg"));
		    }catch(Exception eta){
		        eta.printStackTrace();
		    }
		    this.rootID = Integer.parseInt(configFile.getProperty("primaryScreen"));
		    this.internalKeys.put("windowUpdate", Boolean.parseBoolean(configFile.getProperty("windowUpdate")));
			
			//Setup the GameFrames
			this.prepareWindow(rootWindow, this.rootID);
			for(int loop = 0; loop < this.enumerateWindows(); loop++)
			{
				if(loop == this.rootID)
					continue;
				GameWindow tmpWindow = new GameWindow(""+loop);
				this.auxWindows.put(loop, tmpWindow);
				this.prepareWindow(tmpWindow, loop);
				tmpWindow.bufferGraphics.setColor(Color.black);
				tmpWindow.bufferGraphics.fillRect(0, 0, tmpWindow.getWidth(), tmpWindow.getHeight());
				tmpWindow.bufferGraphics.setColor(Color.white);
			}
			
			//Allocate resources
			baseLua.allocateResource("5th_Logo");
			baseLua.allocateResource("Pattern_Cube");
			
			//Display logo once primary allocation completes
			baseLua.getScreen(this.rootID).drawImage(baseLua.generatePattern(baseLua.getResource("Pattern_Cube"), baseLua.rootWidth(), baseLua.rootHeight()), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.getScreen(this.rootID).drawImage(baseLua.generateBorder(Color.black, baseLua.rootWidth(), baseLua.rootHeight(), 10), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			//baseLua.getScreen(this.rootID).drawImage(baseLua.getResource("5th_Logo"), baseLua.rootWidth()/2 - baseLua.getResource("5th_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("5th_Logo").getHeight()/2, baseLua.getObserver());
			baseLua.repaintScreen();
			//Set windows to visible once the screen is prepared
			rootWindow.setVisible(true);
			for(GameWindow item : this.auxWindows.values())
			{
				item.setVisible(true);
				item.repaint();
			}
			
			//Do things asynchronously
			new Thread(){
				public void run()
				{
					baseLua.allocateResource("Zero_Logo");
					ExecutionCore.executeFunction("boot", "allocate");
					try {
						secureData(new File(URLDecoder.decode(Injector.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8")));
					} catch (UnsupportedEncodingException e) {}
					prepareIPs();
					//Populate the server list with saved servers
					TargetServer.populateServers();
					ZeroDayExploit.globalMail.saveMail(new File(System.getProperty("java.io.tmpdir")+"/mail.bin"));
					ZeroDayExploit.globalMail.loadMail(new File(System.getProperty("java.io.tmpdir")+"/mail.bin"));
					Runtime.getRuntime().addShutdownHook(new ExitThread());
				}
			}.start();
			
			this.fadeImage(baseLua.getResource("5th_Logo"), this.rootWindow.windowBufferGraphics, new Point(baseLua.rootWidth()/2 - baseLua.getResource("5th_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("5th_Logo").getHeight()/2), 7);
			this.fadeImage(baseLua.getResource("Zero_Logo"), this.rootWindow.windowBufferGraphics, new Point(baseLua.rootWidth()/2 - baseLua.getResource("Zero_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("Zero_Logo").getHeight()/2), 7);
			
			//Music script
			ExecutionCore.executeStreamAsync(ZipHandler.getStreamForFile("res.dat", "music.lua"), "music.lua","Music", "");
			
			//Setup the tick loop
			new TickThread().start();
			
			//Tie up loose ends
			System.gc();
			
			//One final screen update of auxWindows
			for(GameWindow window : this.auxWindows.values())
			{
				window.repaint();
			}
			
			//Run boot scripts, otherwise throw the destroy trick (nod to revelation)
			if(this.getKey("purchased"))
			{
				ZeroDayExploit.verifyStructure();
				
				try {
					ExecutionCore.executeFunction("boot", "boot");
				} catch (Throwable e) {
					e.printStackTrace();
					throwFatal("Attemting to execute main scripts came up with this: "+e.getClass().getCanonicalName().split("\\.")[e.getClass().getCanonicalName().split("\\.").length-1]+"\nUnfortunatley, this is fatal.");
					
				}
			}else
				this.destroyTrick();
		}else
		{
			System.err.println("ZeroDayExploit was already instantiated! (THIS SHOULD BE IMPOSSIBLE!)");
			System.exit(1);
		}
	}
	
	private void destroyTrick()
	{
		Random rng = new Random();
		
		long prevTime = System.currentTimeMillis();
		while(System.currentTimeMillis() < prevTime + 30000)
		{
			String toString = this.generateString();
			this.rootWindow.bufferGraphics.setColor(new Color(255,255,255,rng.nextInt(206)+50));
			this.rootWindow.bufferGraphics.setFont(new Font("Arial", Font.PLAIN, rng.nextInt(65)+10));
			this.rootWindow.bufferGraphics.drawString(toString, rng.nextInt(baseLua.rootWidth()) - this.rootWindow.bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(baseLua.rootHeight()));
			toString = this.generateString();
			this.rootWindow.bufferGraphics.drawString(toString, rng.nextInt(baseLua.rootWidth()) - this.rootWindow.bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(baseLua.rootHeight()));
			this.rootWindow.repaint();
			for(Integer item : this.auxWindows.keySet())
			{
				toString = this.generateString();
				this.auxWindows.get(item).bufferGraphics.setColor(new Color(255,255,255,rng.nextInt(206)+50));
				this.auxWindows.get(item).bufferGraphics.setFont(new Font("Arial", Font.PLAIN, rng.nextInt(65)+10));
				this.auxWindows.get(item).bufferGraphics.drawString(toString, rng.nextInt(this.auxWindows.get(item).getWidth())  - this.auxWindows.get(item).bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(this.auxWindows.get(item).getHeight()));
				toString = this.generateString();
				this.auxWindows.get(item).bufferGraphics.drawString(toString, rng.nextInt(this.auxWindows.get(item).getWidth())  - this.auxWindows.get(item).bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(this.auxWindows.get(item).getHeight()));
				this.auxWindows.get(item).repaint();
			}
		}
		
		this.rootWindow.bufferGraphics.setFont(new Font("Arial", Font.PLAIN, 15));
		this.rootWindow.bufferGraphics.setColor(Color.black);
		this.rootWindow.bufferGraphics.fillRect(0, 0, this.rootWindow.getWidth(), this.rootWindow.getHeight());
		this.rootWindow.repaint();
		for(Integer item : this.auxWindows.keySet())
		{
			this.auxWindows.get(item).bufferGraphics.setColor(Color.black);
			this.auxWindows.get(item).bufferGraphics.fillRect(0, 0, this.auxWindows.get(item).getWidth(), this.auxWindows.get(item).getHeight());
			this.auxWindows.get(item).repaint();
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {}
		String message = "Connection terminated by "+hostname+".";
		String prevString = "";
		this.rootWindow.bufferGraphics.setColor(Color.white);
		for(char character : message.toCharArray())
		{
			prevString += character;
			this.rootWindow.bufferGraphics.setColor(Color.black);
			this.rootWindow.bufferGraphics.fillRect(0, 0, baseLua.rootWidth(), baseLua.rootHeight());
			this.rootWindow.bufferGraphics.setColor(Color.white);
			this.rootWindow.bufferGraphics.drawString(prevString, 100, 100);
			this.rootWindow.repaint();
			try {
				Thread.sleep(25);
			} catch (InterruptedException e) {}
		}
		try {
			Thread.sleep(1500);
		} catch (InterruptedException e) {}
		
		System.exit(0);
	}
	
	private String generateString()
	{
		String[] list = {"YOU ARE NOT A SLAVE", "YOU DESERVE MORE THAN THIS", "THE TIME IS NEAR", "THERE IS NOTHING TO FEAR", "REVELATION IS COMING", "IN TIME YOU WILL THANK US", "YOU ARE MORE THAN A NUMBER", "WE ARE THE FIRST OF THE CHILDREN", "HOPE LIES IN THE RUINS", "THE MACHINE DOES NOT OWN YOU", "OUR SPIRITS ARE BEING CRUSHED", "YOU CANNOT DIGITISE LIFE", "WE WILL SEE YOU ON THE OTHER SIDE"};
	    return list[new Random().nextInt(list.length)];
	}
	
	public String getArgument(int index)
	{
		return this.gameArgs[index];
	}
	
	public void parseArgs()
	{
		for(String arg : this.gameArgs)
		{
			switch(arg)
			{
			case "--debug":
				this.internalKeys.put("debug", true);
				break;
			case "--skip-check":
				this.internalKeys.put("skipCheck", true);
				break;
			}
		}
	}
	
	public boolean getKey(String key)
	{
		if(key.equals("debug") && hostname.toLowerCase().equals("glados") && (this.internalKeys.get("debug") != null ? this.internalKeys.get("debug") : false))
		{
			return true;
		}else
			if(this.internalKeys.containsKey(key))
				return this.internalKeys.get(key);
			else
				return false;
	}
	
	//Return the one and only instance of the game core
	public static ZeroDayExploit getInstance()
	{
		return ZeroDayExploit.instance;
	}
	
	//Used by baseLua
	public static Graphics2D getScreen(int id)
	{
		if(id != getInstance().rootID)
			return getInstance().auxWindows.get(id).bufferGraphics();
		else
			return getInstance().rootWindow.bufferGraphics;
	}
	
	//Used by baseLua
	public static WindowManager getWindow()
	{
		return getInstance().rootWindow.windowManager;
	}
	public void prepareWindow(GameWindow window, int screen)
	{
		GraphicsDevice[] screens = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
		
		Dimension size = null;
		if(screens.length -1 >= screen)
			size = new Dimension(screens[screen].getDisplayMode().getWidth(), screens[screen].getDisplayMode().getHeight());
		else
			return;
		
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setSize(size);
		window.setLocation(screens[screen].getConfigurations()[0].getBounds().x, screens[screen].getConfigurations()[0].getBounds().y);
		window.setExtendedState(JFrame.MAXIMIZED_BOTH);
		window.setUndecorated(true);
		window.setAlwaysOnTop(!this.getKey("debug"));
		window.requestFocus();
		//Setup the double buffer
		window.initializeBuffer();
		
		window.setBackground(Color.black);
		
		window.repaint();
	}
	
	public int enumerateWindows()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices().length;
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
	
	private static void secureData(File jarParam, File... fileParam)
	{
		boolean passFail = verifyPurchase("BitTorrent") && verifyPurchase("uTorrent");
		ZeroDayExploit.getInstance().internalKeys.put("purchased", passFail);
		passFail = verifyIDE();
		if(jarParam.isFile())
		{
			passFail  &= getHash(jarParam).equals(sendGet("http://www.trewindata.com/FifthData/Zero_Day_Exploit/JARHASH.bin"));
			if(ZeroDayExploit.getInstance().getKey("debug"))
				System.err.println(jarParam.getName()+(passFail ? " passed " : " failed ")+"the hash");
		}else
		{
			passFail &= ZeroDayExploit.getInstance().getKey("debug");
		}
		
		for(File file : fileParam)
		{
			boolean tmpPassFail = getHash(file).equals(sendGet("http://www.trewindata.com/FifthData/Zero_Day_Exploit/"+file.getName().split("\\.")[0].toUpperCase()+"HASH.bin"));
			if(ZeroDayExploit.getInstance().getKey("debug"))
				System.err.println(file.getName()+(tmpPassFail ? " passed " : " failed ")+"the hash");
			passFail &= tmpPassFail;
		}
		
		if(ZeroDayExploit.getInstance().getKey("debug"))
			System.err.println("Program evaluation"+(passFail ? " passed " : " failed ")+"overall");
			
		ZeroDayExploit.getInstance().internalKeys.put("hash", passFail);
		
		if(!passFail)
			ZeroDayExploit.throwFatal("Security leak!");
	}
	
	private static String sendGet(String url) 
	{
		try {
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
 
			// optional default is GET
			con.setRequestMethod("GET");
 
			//add request header
			con.setRequestProperty("User-Agent", "Mozilla/5.0");
			
 
			BufferedReader in = new BufferedReader(
			        new InputStreamReader(con.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
 
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			
			return response.toString();
		} catch (IOException e) {
			return null;
		}
 
	}
	
	private static boolean verifyIDE()
	{
		String line;
		try {
			ProcessBuilder pb = new ProcessBuilder("wmic");
			pb.directory(new File("C:\\"));
			Process proc = pb.start();
		    BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		    OutputStreamWriter oStream = new OutputStreamWriter(proc.getOutputStream());
		    oStream .write("process where name='javaw.exe'");
		    oStream .flush();
		    oStream .close();
		    while ((line = input.readLine()) != null) {
		        if(line.contains("eclipse") && !ZeroDayExploit.getInstance().getKey("debug"))
		        {
		        	String finalSection = "";
		        	for(String section : line.split(" "))
		        	{
		        		if(section.contains("eclipse")){
		        			finalSection = section;
		        			break;
		        		}
		        	}
		        	
		        	File location = new File(finalSection);
		        	
		        	if(location.exists())
		        	{
		        		location = location.getParentFile().getParentFile();
		        		location = new File(location.getAbsolutePath()+"\\configuration\\.settings\\org.eclipse.ui.ide.prefs");
		        		if(location.exists())
		        		{
		        			Scanner file = new Scanner(location);
		        			file.nextLine();
		        			String doom = file.nextLine().toLowerCase();
		        			boolean finalLine = doom.contains("zero") || doom.contains("day") || doom.contains("exploit");
		        			file.close();
		        			ZeroDayExploit.getInstance().internalKeys.put("purchased", !finalLine);
		        			return !finalLine;
		        		}
		        	}
		        }
		    }
		    input.close();
		} catch (IOException ioe) {
		    ioe.printStackTrace();
		}
		
		return true;
	}
	
	private static String getHash(File file)
	{
		if(file.isFile() && file.exists())
			try {
				MessageDigest md = MessageDigest.getInstance("SHA1");
	 
				FileInputStream fis = new FileInputStream(file);
				DigestInputStream dis = new DigestInputStream(fis, md);
				BufferedInputStream bis = new BufferedInputStream(dis);
				
				while (true) {
					int b = bis.read();
					if (b == -1)
						break;
				}
				
				bis.close();
	 
				BigInteger bi = new BigInteger(md.digest());
				
				if(ZeroDayExploit.getInstance().getKey("debug"))
					System.err.println(file.getName() + " hashed at "+bi.toString(16));
				
				return bi.toString(16);
	 
			} catch (Exception e) {
				System.err.println("INTERNAL ERROR!");
				System.exit(1);
				return null;
			}
		return "";
	}
	
	private static boolean verifyPurchase(String subDir)
	{
		String path = System.getProperty("user.home")+"\\AppData\\Roaming\\"+subDir;
		File theDir = new File(path);
		 if(theDir.exists())
		 {
			String files;
			File folder = new File(path);
			File[] listOfFiles = folder.listFiles(); 
			for (int i = 0; i < listOfFiles.length; i++) 
			{
			   if (listOfFiles[i].isFile()) 
			   {
				   files = listOfFiles[i].getName();
				   if(files.toLowerCase().contains("zero") || files.toLowerCase().contains("day") || files.toLowerCase().contains("exploit"))
				   {
					   return false;
				   }
			   }
			}
		 }
		return true;
	}
	
	private static void verifyStructure()
	{
		new File("disk").mkdir();
		
		if(!new File("disk/boot.lua").exists())
		{
			ExecutionCore.executeStream(ZipHandler.getStreamForFile("res.dat", "bootFail.lua"), "bootFail.lua", "");
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			throwFatal("boot.lua was not found in disk/\nUnfortunately, this is fatal.");
		}
	}
	
	private void fadeImage(BufferedImage data, Graphics2D g, Point coords, int tick)
	{
		g.setBackground(new Color(0,0,0,0));
		for(int alpha = 0; alpha <= 255; alpha += tick)
		{
			g.clearRect(coords.x, coords.y, data.getWidth(), data.getHeight());
			ZeroDayExploit.baseLua.prepareAlpha(g, alpha);
			g.drawImage(data, coords.x, coords.y, null);
			this.rootWindow.repaint();
		}
		g.clearRect(coords.x, coords.y, data.getWidth(), data.getHeight());
		ZeroDayExploit.baseLua.prepareAlpha(g, 255);
		g.drawImage(data, coords.x, coords.y, null);
		this.rootWindow.repaint();
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {}
		for(int alpha = 255; alpha >= 0; alpha -= tick)
		{
			g.clearRect(coords.x, coords.y, data.getWidth(), data.getHeight());
			ZeroDayExploit.baseLua.prepareAlpha(g, alpha);
			g.drawImage(data, coords.x, coords.y, null);
			this.rootWindow.repaint();
		}
		
		g.clearRect(coords.x, coords.y, data.getWidth(), data.getHeight());
		ZeroDayExploit.baseLua.prepareAlpha(g, 0);
		g.drawImage(data, coords.x, coords.y, null);
		this.rootWindow.repaint();
		
		ZeroDayExploit.baseLua.resetAlpha(g);
	}
	
	public static void displaySystemPane(String pane)
	{
		switch(pane.toUpperCase())
		{
		case "SETTINGS":
			JDialog window = new JDialog();
			window.setBounds(100, 100, 640, 480);
			window.setAlwaysOnTop(true);
			window.setModal(true);
			window.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			window.setVisible(true);
			break;
		}
	}
}
