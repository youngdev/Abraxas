package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.channels.FileChannel;
import java.util.HashMap;

import javax.swing.JDialog;
import javax.swing.JOptionPane;

import org.lwjgl.opengl.Display;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.util.Log;
import org.newdawn.slick.util.LogSystem;

import com.fifthdimensionsoftware.display.ResourceUtil;
import com.fifthdimensionsoftware.display.lwjgl.LWJGLWindow;
import com.fifthdimensionsoftware.display.swing.SwingWindow;
import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.tools.AdvancedProperties;
import com.fifthdimensionsoftware.tools.ScreenUtil;

public class ZeroDayExploit
{
	private static ZeroDayExploit instance;
	public AdvancedProperties configKeys;
	public int rootID;
	private HashMap<Integer, SwingWindow> auxWindows = new HashMap<Integer, SwingWindow>();
	private LWJGLWindow rootWindow;
	private AppGameContainer rootContainer;
	public JDialog tmpDialog = new JDialog(){
		private static final long serialVersionUID = 1L;
		
		private double rads = 0;
		private boolean clear = true;
		@Override
		public void paint(Graphics g)
		{
			Graphics2D g2d = (Graphics2D)g;
			g2d.translate(0, 0);
			g2d.setColor(Color.black);
			if(this.clear)
				g2d.fillRect(0, 0, this.getWidth(), this.getHeight());
			this.clear = false;
			g2d.translate(this.getWidth() / 2, this.getHeight() / 2);
			g2d.rotate(rads);
			try {
				g2d.drawImage(ResourceUtil.getResource("5th_Logo.png").asBuffer, -(ResourceUtil.getResource("5th_Logo.png").asBuffer.getWidth() / 2), -(ResourceUtil.getResource("5th_Logo.png").asBuffer.getHeight() / 2), null);
			} catch (Exception e) {
			}
			rads += .25;
		}
	};
	
	public void run(String... args)
	{
		if(instance != null)
			//Something went wrong, destroy this instance!
			return;
		else
			instance = this;
		
		ResourceUtil.loadResourceFromRes("5th_Logo.png", true);
		
		//Make windows fill the screen
		System.setProperty("org.lwjgl.opengl.Window.undecorated", "true");
		
		//Destroy log output
		Log.setLogSystem(new LogSystem(){public void debug(String message) {}public void error(Throwable e) {}public void error(String message) {}public void error(String message, Throwable e) {}public void info(String message) {}public void warn(String message) {}public void warn(String message, Throwable e) {}});
		
		//Copy natives, inject libraries to classpath
		this.prepareLibs();
		
		//Load properties file
		this.configKeys = new AdvancedProperties("res.bin", "Properties.cfg");
		
		//Set root screen ID
		this.rootID = configKeys.getInt("primaryScreen");
		
		//Initiate a window for all auxiliary displays
		/*for(int id = 0; id < ScreenUtil.enumerateScreens(); id++)
		{
			if(id != this.rootID)
			{
				SwingWindow newWindow = new SwingWindow(id+"");
				newWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				ScreenUtil.setJFrameToScreen(newWindow, id, true, true);
				this.auxWindows.put(id, newWindow);
			}
		}*/
		
		//Create the temporary loading screen
		tmpDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
		ScreenUtil.setJDialogToScreen(tmpDialog, this.rootID, false, true);
		
		new Thread()
		{
			public void run()
			{
				while(ZeroDayExploit.getInstance().tmpDialog.isVisible())
				{
					ZeroDayExploit.getInstance().tmpDialog.repaint();
				}
			}
		}.start();
		
		this.rootWindow = new LWJGLWindow();
		try {
			Display.setLocation(0, 0);
			this.rootContainer = new AppGameContainer(rootWindow, 0, 0, false);
			
			this.rootContainer.start();
		} catch (SlickException e) {
			e.printStackTrace();
		}
	}
	
	private void prepareLibs()
	{
		new File("C:\\Windows\\Sun\\Java\\bin\\").mkdir();
		if (new File("natives").exists()) 
		{
			for (File file : new File("natives").listFiles()) {
				if (file.isFile()
						&& !new File("C:\\Windows\\Sun\\Java\\bin\\"
								+ file.getName()).exists())
					try {
						copyFile(file, new File("C:\\Windows\\Sun\\Java\\bin\\"
								+ file.getName()));
						file.delete();
					} catch (IOException e) {
						e.printStackTrace();
					}
			}
			new File("natives").delete();
		}
		try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{new URL("http://www.trewindata.com/FifthData/Zero_Day_Exploit/lib.bin")});
		} catch (NoSuchMethodException | SecurityException
				| IllegalAccessException | IllegalArgumentException
				| InvocationTargetException | MalformedURLException e) {
			e.printStackTrace();
		}
	}
	
	public static void copyFile(File sourceFile, File destFile) throws IOException 
	{
	    if(!destFile.exists()) {
	        destFile.createNewFile();
	    }

	    FileChannel source = null;
	    FileChannel destination = null;

	    try {
	        source = new FileInputStream(sourceFile).getChannel();
	        destination = new FileOutputStream(destFile).getChannel();
	        destination.transferFrom(source, 0, source.size());
	    }
	    finally {
	        if(source != null) {
	            source.close();
	        }
	        if(destination != null) {
	            destination.close();
	        }
	    }
	}
	
	public static ZeroDayExploit getInstance()
	{
		return instance;
	}
	
	public static SwingWindow getAuxWindow(int id)
	{
		return getInstance().auxWindows.get(id);
	}
	
	public static LWJGLWindow getRootWindow()
	{
		return getInstance().rootWindow;
	}

	public static void verifyAndBoot()
	{
		new File("disk").mkdir();
		
		if(new File("disk/boot.lua").exists())
		{
			ExecutionCore.executeFunctionAsync("boot", "boot");
		}else
		{
			getInstance().rootContainer.destroy();
			JOptionPane.showMessageDialog(null, "Boot script not found!\nUnfortunatley, this is fatal.");
			System.exit(0);
		}
	}
	
	public static AppGameContainer getContainer()
	{
		return getInstance().rootContainer;
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
}
