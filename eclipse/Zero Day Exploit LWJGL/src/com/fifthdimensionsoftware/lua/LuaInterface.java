package com.fifthdimensionsoftware.lua;

import java.io.File;
import java.lang.reflect.Field;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Rectangle;

import com.fifthdimensionsoftware.display.ResourceUtil;
import com.fifthdimensionsoftware.display.lwjgl.LWJGLWindow;
import com.fifthdimensionsoftware.display.lwjgl.windows.WindowManager;
import com.fifthdimensionsoftware.game.ZeroDayExploit;
import com.fifthdimensionsoftware.tools.LWJGLUtil;

public class LuaInterface
{
	public WindowManager getWindowManager()
	{
		return ZeroDayExploit.getRootWindow().windowMan;
	}
	
	public Graphics getGraphics()
	{
		return ZeroDayExploit.getContainer().getGraphics();
	}
	
	public Rectangle createBounds(int x, int y, int width, int height)
	{
		return new Rectangle(x, y, width, height);
	}
	
	public Color createColor(int r, int g, int b)
	{
		return this.createColor(r, g, b, 255);
	}
	
	public Color createColor(int r, int g, int b, int a)
	{
		return new Color(r, g, b, a);
	}
	
	public Color getDefaultColor(String name) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, SecurityException
	{
		Field field = Color.class.getDeclaredField(name);
		field.setAccessible(true);
		return (Color) field.get(null);
	}
	
	public LWJGLWindow getRoot()
	{
		return ZeroDayExploit.getRootWindow();
	}
	
	public Image getResource(boolean res, String name)
	{
		if(ResourceUtil.getResource(name+".png") != null)
			return ResourceUtil.getResource(name+".png").asImage;
		if(res)
		{
			ResourceUtil.loadResourceFromRes(name+".png", false);
			return ResourceUtil.getResource(name+".png").asImage;
		}else
		{
			ResourceUtil.loadResource(new File(ZeroDayExploit.filterPath("disk", name, "png")), false);
			return ResourceUtil.getResource(name+".png").asImage;
		}
	}
	
	public Image preRenderPattern(Rectangle geom, Image pattern)
	{
		try {
			return LWJGLUtil.preRenderPattern(geom, pattern);
		} catch (SlickException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public void clearQueue()
	{
		ZeroDayExploit.getRootWindow().clearQueue();
	}
}
