package com.fifthdimensionsoftware.tools;

import java.awt.image.BufferedImage;
import java.io.IOException;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.fills.GradientFill;
import org.newdawn.slick.geom.Rectangle;
import org.newdawn.slick.util.BufferedImageUtil;

import com.fifthdimensionsoftware.game.ZeroDayExploit;

public class LWJGLUtil
{
	public static Image convertImage(BufferedImage param, String name)
	{
		try {
			return new Image(BufferedImageUtil.getTexture("name", param));
		} catch (IOException e) {
			return null;
		}
	}
	
	public static Image getImageFromRes(String image) throws SlickException
	{
		image += ".png";
		return new Image(ZipUtil.getStreamForFile("res.bin", image), image, false);
	}
	
	public static Color convertColor(java.awt.Color colorParam)
	{
		return new Color(colorParam.getRGB());
	}
	
	public static void drawGradient(Graphics g, Rectangle shape, Color color1, Color color2, Boolean vert)
	{
		if(vert)
			g.fill(shape, new GradientFill(0, 0, color1, 0, shape.getHeight(), color2, true));
		else
			g.fill(shape, new GradientFill(0, 0, color1, shape.getWidth(), 0, color2, true));
	}
	
	public static void drawBorderFade(Graphics g, Rectangle shape, Color color, int size)
	{
		//Top
		drawGradient(g, new Rectangle(shape.getX(), shape.getY()+size, shape.getWidth(), -size), Color.transparent, color, true);
		//Bottom
		drawGradient(g, new Rectangle(shape.getX(), shape.getHeight()-size, shape.getWidth(), size), Color.transparent, color, true);
		
		//Right
		drawGradient(g, new Rectangle(shape.getWidth()-size, shape.getY(), size, shape.getHeight()), Color.transparent, color, false);
		//Left
		drawGradient(g, new Rectangle(shape.getX()+size, shape.getY(), -size, shape.getHeight()), Color.transparent, color, false);
	}
	
	public static void drawPattern(Rectangle shape, Image pattern)
	{
		pattern.startUse();
		for(int x = 0; x<shape.getWidth(); x+=pattern.getWidth())
		{
			for(int y = 0; y<shape.getHeight(); y+=pattern.getHeight())
			{
				pattern.drawEmbedded(x, y, pattern.getWidth(), pattern.getHeight());
			}
		}
		pattern.endUse();
	}
	
	public static void drawImage(Rectangle geom, Image image)
	{
		image.startUse();
		image.drawEmbedded(geom.getX(), geom.getY(), geom.getWidth(), geom.getHeight());
		image.endUse();
	}
	
	public static Image preRenderPattern(Rectangle geom, Image pattern) throws SlickException
	{
		Image toReturn = new Image((int)geom.getWidth(), (int)geom.getHeight());
		for(int x = 0; x<geom.getWidth(); x+=pattern.getWidth())
		{
			for(int y = 0; y<geom.getHeight(); y+=pattern.getHeight())
			{
				toReturn.getGraphics().drawImage(pattern, x, y);
			}
		}
		return toReturn;
	}
	
	private static float fadeTick = 0;
	private static boolean goUp = true;
	
	public static void doNextFadeTick(Rectangle geom, Image image, String actionName)
	{
		if(goUp)
		{
			if(fadeTick >= 1.0)
				goUp = false;
			else
				fadeTick+=.001;
		}else
		{
			if(fadeTick <= 0.0){
				goUp = true;
				ZeroDayExploit.getRootWindow().removeActionFromQueue(actionName);
				fadeTick = 0;
				return;
			}else
				fadeTick-=.001;
		}
		
		image.setColor(0, 1, 1, 1, fadeTick);
		image.setColor(1, 1, 1, 1, fadeTick);
		image.setColor(2, 1, 1, 1, fadeTick);
		image.setColor(3, 1, 1, 1, fadeTick);
		
		drawImage(geom, image);
	}
}
