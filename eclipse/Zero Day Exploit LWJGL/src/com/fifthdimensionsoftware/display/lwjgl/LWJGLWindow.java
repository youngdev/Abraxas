package com.fifthdimensionsoftware.display.lwjgl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashMap;

import org.lwjgl.opengl.Display;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.Color;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Rectangle;

import com.fifthdimensionsoftware.display.ResourceUtil;
import com.fifthdimensionsoftware.display.lwjgl.windows.Window;
import com.fifthdimensionsoftware.display.lwjgl.windows.WindowManager;
import com.fifthdimensionsoftware.game.ZeroDayExploit;
import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.tools.LWJGLUtil;
import com.fifthdimensionsoftware.tools.ScreenUtil;

public class LWJGLWindow extends BasicGame
{
	private LinkedHashMap<String, RenderAction> renderQueue = new LinkedHashMap<String, RenderAction>();
	private boolean finishedFadeIn = false;
	public boolean clearOnFadeFinish = false;
	public final WindowManager windowMan = new WindowManager();
	public LWJGLWindow()
	{
		super("Zero Day Exploit");
	}

	@Override
	public void render(GameContainer container, Graphics g) throws SlickException 
	{
		try {
			for(RenderAction action : this.getQueue())
			{
				action.execute();
			}
		} catch (ConcurrentModificationException e) {
			System.err.println("Invalid queue removal!");
		}
	}

	@Override
	public void init(GameContainer container) throws SlickException 
	{
		((AppGameContainer)container).setDisplayMode(ScreenUtil.getScreenBounds(ZeroDayExploit.getInstance().rootID).width, ScreenUtil.getScreenBounds(ZeroDayExploit.getInstance().rootID).height, false);
		Display.setLocation(ScreenUtil.getScreenBounds(ZeroDayExploit.getInstance().rootID).x, ScreenUtil.getScreenBounds(ZeroDayExploit.getInstance().rootID).y);
		container.setShowFPS(true);
		container.setClearEachFrame(false);
		ResourceUtil.resetResources();
		Image logo = LWJGLUtil.getResource(true, "5th_Logo");
		this.addActionToQueue("PatternBase", new RenderAction("drawImage", new Rectangle(0, 0, container.getWidth(), container.getHeight()), LWJGLUtil.preRenderPattern(new Rectangle(0, 0, container.getWidth(), container.getHeight()), LWJGLUtil.getResource(true, "Pattern_Cube"))));
		this.addActionToQueue("BorderBase", new RenderAction("drawBorderFade", container.getGraphics(), new Rectangle(0, 0, container.getWidth(), container.getHeight()), Color.black, 25));
		this.addActionToQueue("ZeroLogo", new RenderAction("doNextFadeTick", new Rectangle(container.getWidth() / 2 - logo.getWidth() / 2, container.getHeight() / 2 - logo.getHeight() / 2, logo.getWidth(), logo.getHeight()), logo, "ZeroLogo", .002F, 500));
		/*this.windowMan.addWindow("Zero Day Exploit", 0, 0, 500, 200);
		this.windowMan.getWindow("Zero Day Exploit").setHandle(0, 0, 500, 200);
		this.windowMan.getWindow("Zero Day Exploit").addActionToQueue("Gradient", "drawGradient", container.getGraphics(), "Zero Day Exploit", new Rectangle(0,0, 500, 200), Color.red, Color.green, true);*/
	}

	@Override
	public void update(GameContainer container, int time) throws SlickException 
	{
		//Disable the JDialog on the first frame
		if(ZeroDayExploit.getInstance().tmpDialog != null)
		{
			ZeroDayExploit.getInstance().tmpDialog.setVisible(false);
			ZeroDayExploit.getInstance().tmpDialog = null;
			System.gc();
		}
		
		//Fade the second icon
		if(!this.renderQueue.containsKey("ZeroLogo") && !this.finishedFadeIn)
		{
			Image logo = LWJGLUtil.getResource(true, "Zero_Logo"); 
			this.addActionToQueue("FifthLogo", new RenderAction("doNextFadeTick", new Rectangle(container.getWidth() / 2 - logo.getWidth() / 2, container.getHeight() / 2 - logo.getHeight() / 2, logo.getWidth(), logo.getHeight()), logo, "FifthLogo", .0015F, 500));
			this.finishedFadeIn = this.clearOnFadeFinish = true;
		}
	}
	
	public void addActionToQueue(String UID, String methodName, Object...args)
	{
		this.addActionToQueue(UID, new RenderAction(methodName, args));
	}
	
	public void addActionToQueue(String UID, RenderAction action)
	{
		if(!this.renderQueue.containsKey(UID))
			this.renderQueue.put(UID, action);
	}
	
	public Collection<RenderAction> getQueue()
	{
		return this.renderQueue.values();
	}
	
	public void removeActionFromQueue(String UID)
	{
		this.renderQueue.remove(UID);
	}
	
	public void clearQueue()
	{
		this.renderQueue.clear();
	}
	
	public int getWidth()
	{
		return ZeroDayExploit.getContainer().getWidth();
	}
	
	public int getHeight()
	{
		return ZeroDayExploit.getContainer().getHeight();
	}
	
	//Begin Keyboard/Mouse Events
	
	@Override
	public void keyPressed(int key, char c)
	{
		
	}
	
	@Override
	public void keyReleased(int key, char c)
	{
		
	}
	
	@Override
	public void mouseDragged(int oldX, int oldY, int newX, int newY)
	{
		ArrayList<Window> arrayList = new ArrayList<Window>(this.windowMan.getWindows());
		Collections.reverse(arrayList);
		for(Window window : arrayList)
		{
			Rectangle tmpRect = new Rectangle(0, 0, 0, 0);
			tmpRect.setBounds(window.getHandleBounds());
			tmpRect.setX(tmpRect.getX() + window.getBounds().getX());
			tmpRect.setY(tmpRect.getY() + window.getBounds().getY());
			if(tmpRect.contains(oldX, oldY))
			{
				window.moveBy(newX - oldX, newY - oldY);
				return;
			}
		}
	}
	
	public void mouseClicked(int button, int x, int y, int count)
	{
		ArrayList<Window> arrayList = new ArrayList<Window>(this.windowMan.getWindows());
		Collections.reverse(arrayList);
		for(Window window : arrayList)
		{
			for(String area : window.getHotSpots())
			{
				Rectangle tmpRect = new Rectangle(0, 0, 0, 0);
				tmpRect.setBounds(window.getHotSpot(area));
				tmpRect.setBounds(window.getBounds().getX() + tmpRect.getX(), window.getBounds().getY() + tmpRect.getY(), tmpRect.getWidth(), tmpRect.getHeight());
				if(tmpRect.contains(x, y))
				{
					ExecutionCore.executeFunctionAsync(area.split("\\|")[0], area.split("\\|")[1]);
				}
			}
		}
	}
}
