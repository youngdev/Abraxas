package com.fifthdimensionsoftware.display;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;

import org.newdawn.slick.Image;
import org.newdawn.slick.util.BufferedImageUtil;

import com.fifthdimensionsoftware.tools.ZipUtil;

public class ResourceUtil
{
	private static HashMap<String, ResourceObj> res = new HashMap<String, ResourceObj>();
	
	public static void putResource(ResourceObj resource)
	{
		if(!res.containsKey(resource.name))
			res.put(resource.name, resource);
	}
	
	public static void loadResource(InputStream is, String name, boolean isBuffered)
	{
		putResource(new ResourceObj(is, name, isBuffered));
	}
	
	public static void loadResource(File is, boolean isBuffered)
	{
		putResource(new ResourceObj(is, isBuffered));
	}
	
	public static void loadResource(BufferedImage is, String name)
	{
		putResource(new ResourceObj(is, name));
	}
	
	public static void loadResource(Image is, String name)
	{
		putResource(new ResourceObj(is, name));
	}
	
	public static void loadResourceFromRes(String name, boolean isBuffered)
	{
		putResource(new ResourceObj(ZipUtil.getStreamForFile("res.bin", name), name, isBuffered));
	}
	
	public static void addImageVersion(String name)
	{
		ResourceObj tmpRes = getResource(name);
		if (tmpRes != null)
		{
			if (tmpRes.asImage != null)
			{
				try {
					tmpRes.asImage = new Image(BufferedImageUtil.getTexture(
							name, tmpRes.asBuffer));
				} catch (IOException e) {
					e.printStackTrace();
				}
				res.remove(name);
				putResource(tmpRes);
			}
		}
	}
	
	public static ResourceObj getResource(String name)
	{
		if(res.containsKey(name))
			return res.get(name);
		else
			return null;
	}
}
