# os/bootloader.asm #

? ct = r2 ?
? code = r1 ?
? key = r0 ?
? addr = r3 ?
? lr = r14 ?
? pc = r15 ?

        CPM #0b10
		
;Prepare the IVT
        ADD r12, r15, #:end:
        
;Prepare the keyboard interrupt
        ;Obtain an absolute address
        ADD r1, r15, #:key:
        
        ;Write the address to the second interrupt slot
		;ADD r12, r12, #4
        STR r12, r1, #4
        MOV r1, #0
		;SUB r12, r12, #4
        
        ;Prepare the stack
        ADD r13, r15, #:end:
        ;Allow for 16 interrupts before the stack
        ADD r13, r13, #56
        
        ;Prepare the #512 constant
		MOV addr, #512
		MVX addr, addr, #0b100
		
        ;Infinite stall loop
        B #0
        
:key:
		LSR key, r1, #8
		AND code, r1, #0xff
		
        CMP key, #56
        
        BEQ #:HLT:
        
        ;Check for backspace
        CMP key, #14
        
        ;If not found, jump away
        BNE #:chk:
        
        ;Move backwards, erasing as you do so
        SUBEQ ct, ct, #1
        STRBEQ ct, r4, addr
        CLREQ
        TEXTEQ r7, r8, addr
        BXEQ lr, #0b10
        
:chk:
        ;Make sure the pressed key has a renderable character
        CMP code, #0
        
        BXEQ lr, #0b10
        
        ;Store the pressed key
        STRB ct, code, addr
        ADD ct, ct, #1
        STRB ct, r4, addr
        
        CLR
        TEXT r7, r8, addr
        
		BX lr, #0b10
		
:HLT:
	;Store the IP to r1
	MOV r1, #0xC0
	LSL r1, r1, #8
	ORR r1, r1, #0xA8
	LSL r1, r1, #8
	ORR r1, r1, #0x00
	LSL r1, r1, #8
	ORR r1, r1, #0x01
	
	;Store and send the packet length
	MOV r0, #508
	MOV r4, #4
	
	ADD ct, ct, #4
	
	STR r0, ct, #0
	SND r1, r0, r4
	
	IP r5
	STR r0, r5, #0
	SND r1, r0, r4
	
	SUB ct, ct, #4
	
	;Send the string data
	SND r1, addr, ct
:net:
	SIZ r0
	CMP r0, #0

	BEQ #:net:
	
	HLT
:end: