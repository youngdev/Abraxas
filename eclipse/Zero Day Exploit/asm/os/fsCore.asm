;Second stage filesystem bootloader
;For use with ZeroFS 1.0

;Constants
	? loop = r5 ?
	? location = r2 ?
	? len = r3 ?
	? size = r4 ?
;Code

	;Load the first partition descriptor
	MOV r0, #512
	MOV r1, #9
	DLDR r0, r0, r1, #0
	
	;Load the partition location into r1, skip label
	LDR r0, r1, #0
	ADD r1, r1, #4
	
:segment:
	;Update block pointers
	MUL r2, r5, #12
	ADD r1, r1, r2
	MOV r2, #12
	
	;Load the section descriptor
	DLDR r0, r1, r2, #0
	
	;Re-align base location
	MUL r2, r5, #12
	SUB r1, r1, r2
	
	;Off-Limits Registers: r0, r1, r5
	
	;Load location, length, and size values into r2, r3, and r4
	LDR r0, location, #0
	LDR r0, len, #4
	LDR r0, size, #8
	
	CMP location, #0
	BEQ #:end:
	
	;Using location (r2) as a file pointer
	:file:
		DLDR r0, location, size, #0
		
		;Confirm the character matches
		ADD r6, r15, #:init:
		LDRB r6, r7, #0
		LDRB r0, r6, #0
		CMP r6, r7
		BNE :endStr:
		
		ADD r6, r15, #:init:
		LDRB r6, r7, #1
		LDRB r0, r6, #1
		CMP r6, r7
		BNE :endStr:
		
		ADD r6, r15, #:init:
		LDRB r6, r7, #2
		LDRB r0, r6, #2
		CMP r6, r7
		BNE :endStr:
		
		ADD r6, r15, #:init:
		LDRB r6, r7, #3
		LDRB r0, r6, #3
		CMP r6, r7
		BNE :endStr:
		
		LDRB r0, r6, #4
		CMP r6, #0
		BNE :endStr:
		
		;Real code here, match found
		ADD r0, r0, #32
		MOV r15, r0
		
		:endStr:
		
		;Iterate to the next file
		ADD location, location, size
		SUB len, len, #1
		CMP len, #0
		BNE #:file:
	;END :file:
	
	;Loop through all 10 segments
	ADD r5, r5, #1
	CMP r5, #10
	BNE #:segment:
;END :segment:
:end:
	MOV r0, #10
	ADD r1, r15, #:fail:
	TEXT r0, r0, r1
	B #0

:init:
	"init"
	0x 00 00 00 00 x0
:fail:
	"2nd Stage Bootstrap Failue: init not found"
	0x 00 00 00 00 x0