package net.lotrek.zero.engine;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Properties;

import net.lotrek.zero.ZeroDayExploit;
import net.lotrek.zero.engine.Processor.ProcessorMode;
import net.lotrek.zero.graphics.GLComplex;
import net.lotrek.zero.graphics.GraphicsUtil;
import net.lotrek.zero.graphics.RenderAction;
import net.lotrek.zero.network.NetworkCore;
import net.lotrek.zero.story.Event;
import net.lotrek.zero.story.StoryCore;
import net.lotrek.zero.tools.AudioUtil;
import net.lotrek.zero.tools.FileUtil;
import net.lotrek.zero.tools.GameUtil;
import net.lotrek.zero.tools.MemoryUtil;
import net.lotrek.zero.tools.MouseUtil;
import net.lotrek.zero.tools.TimeUtil;

import org.lwjgl.input.Mouse;
import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;

public class Instructions
{
	//These are all defined in "Processor Specifications.docx"
	
	public static class Disassembly
	{
		public static String IP(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111);
		}
		
		public static String MVX(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", #" + ((opcode >> 8) & 0b1111);
		}
		
		public static String DMP(int opcode)
		{
			return "";
		}
		
		public static String SIZ(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111);
		}
		
		public static String RCV(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111);
		}
		
		public static String SND(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111);
		}
		
		public static String NOP(int opcode)
		{
			return "";
		}
		
		public static String GQTM(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String QNTM(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String SEC(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111);
		}
		
		public static String SCR(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111);
		}
		
		public static String ROT(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111);
		}
		
		public static String MOUSE(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111);
		}
		
		public static String TEXT(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111);
		}
		
		public static String GCOLOR(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String COLOR(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String LSL(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String ASR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String LSR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String OVL(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111) + ", R" + ((opcode >> 12) & 0b1111);
		}
		
		public static String RECT(int opcode)
		{
			return "R" + ((opcode >> 0) & 0b1111) + ", R" + ((opcode >> 4) & 0b1111) + ", R" + ((opcode >> 8) & 0b1111) + ", R" + ((opcode >> 12) & 0b1111);
		}
		
		public static String DRAW(int opcode)
		{
			return "";
		}
		
		public static String FILL(int opcode)
		{
			return "";
		}
		
		public static String CLR(int opcode)
		{
			return "";
		}
		
		public static String BX(int opcode)
		{
			return "R" + (opcode & 0b1111) + ", #" + ((opcode & 0b11110000) >> 4) + "\n";
		}
		
		public static String SVC(int opcode)
		{
			return "#" + (opcode & 0b111111111111111111111111);
		}
		
		public static String BIC(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String AND(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String ORR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String EOR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String ADD(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String RSB(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String SUB(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String CTD(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String DSTR(int opcode)
		{
			if(((opcode >> 23) & 0b1) == 0b0)
				return ("R" + ((opcode >> 8) & 0b1111)) + ", " + ("R" + ((opcode >> 4) & 0b1111)) + ", " + ("R" + (opcode & 0b1111)) + ", #" + ((opcode >> 12) & 0b111_1111_1111);
			else
				return ("R" + ((opcode >> 8) & 0b1111)) + ", " + ("R" + ((opcode >> 4) & 0b1111)) + ", " + ("R" + (opcode & 0b1111)) + ", R" + ((opcode >> 12) & 0b1111);
		}
		
		public static String DLDR(int opcode)
		{
			return DSTR(opcode);
		}
		
		public static String CPM(int opcode)
		{
			return "#" + (opcode & 0b1111);
		}
		
		public static String PUSH(int opcode)
		{
			return "R" + (opcode & 0b1111);
		}
		
		public static String POP(int opcode)
		{
			return PUSH(opcode);
		}
		
		public static String MOV(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String MVN(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String CMN(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String CMP(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String TST(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String TEQ(int opcode)
		{
			return basic2Ops(opcode);
		}
		
		public static String STR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String STRB(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String LDR(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String LDRB(int opcode)
		{
			return basic3Ops(opcode);
		}
		
		public static String SWP(int opcode)
		{
			String[] toReturn = new String[3];
			
			toReturn[0] = "R" + (opcode >> 16 & 0b1111);
			toReturn[1] = "R" + (opcode >> 12 & 0b1111);
				
			toReturn[2] = "R" + (opcode & 0b1111);
			
			return toReturn[0] + ", " + toReturn[1] + "," + toReturn[2];
		}
		
		public static String SWPB(int opcode)
		{
			return SWP(opcode);
		}
		
		public static String DIV(int opcode)
		{
			/*String[] toReturn = new String[3];
			
			toReturn[0] = "R" + (opcode >> 16 & 0b1111);
			toReturn[1] = "R" + (opcode >> 12 & 0b1111);
				
			toReturn[2] = "R" + (opcode & 0b1111);
			
			return toReturn[0] + ", " + toReturn[1] + ", " + toReturn[2];*/
			
			return basic3Ops(opcode);
		}
		
		public static String MUL(int opcode)
		{
			/*String[] toReturn = new String[3];
			
			toReturn[0] = "R" + (opcode >> 16 & 0b1111);
			toReturn[1] = "R" + (opcode >> 12 & 0b1111);
				
			toReturn[2] = "R" + (opcode & 0b1111);
			
			return toReturn[0] + ", " + toReturn[1] + ", " + toReturn[2];*/
			
			return basic3Ops(opcode);
		}
		
		public static String HLT(int opcode)
		{
			return "";
		}
		
		public static String BLK(int opcode)
		{
			return "";
		}
		
		public static String UBLK(int opcode)
		{
			return "";
		}
		
		public static String B(int opcode)
		{
			return "#" + AsmCore.expandInt(opcode & 0b1111_1111_1111_1111_1111_1111, 24) + "\n";
		}
		
		public static String BL(int opcode)
		{
			return B(opcode);
		}
		
		private static String basic2Ops(int opcode)
		{
			String[] ops = parseDataOp(opcode);
			
			return ops[1] + ", " + ops[2];
		}
		
		private static String basic3Ops(int opcode)
		{
			String[] ops = parseDataOp(opcode);
			
			return ops[0] + ", " + ops[1] + ", " + ops[2];
		}
		
		private static String[] parseDataOp(int opcode)
		{
			String[] toReturn = new String[3];
			
			toReturn[0] = "R" + (opcode >> 16 & 0b1111);
			toReturn[1] = "R" + (opcode >> 12 & 0b1111);
			
			if(((opcode & 0b10000_0_0000_0000_000000000000) >> 25) == 0b1)
			{
				toReturn[2] = "#" + AsmCore.expandInt(opcode & 0b1111_1111_1111, 12);
				
			}else
			{
				toReturn[2] = "R" + (opcode & 0b1111);
			}
			
			return toReturn;
		}
	}

	public static class Assembly
	{
		public static int IP(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			
			return toReturn;
		}
		
		public static int MVX(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			
			return toReturn;
		}
		
		public static int DMP(String data)
		{
			return 0;
		}
		
		public static int SIZ(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			
			return toReturn;
		}
		
		public static int RCV(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			
			return toReturn;
		}
		
		public static int SND(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			
			return toReturn;
		}
		
		public static int GQTM(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int QNTM(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int SEC(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			
			return toReturn;
		}
		
		public static int SCR(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			
			return toReturn;
		}
		
		public static int ROT(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			
			return toReturn;
		}
		
		public static int MOUSE(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			
			return toReturn;
		}
		
		public static int TEXT(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			
			return toReturn;
		}
		
		public static int GCOLOR(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int COLOR(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int LSL(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int ASR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int LSR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int OVL(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			toReturn |= (parseInt(args[3]) & 0b1111) << 12;
			
			return toReturn;
		}
		
		public static int RECT(String data)
		{
			int toReturn = 0;
			String[] args = data.replace(" ", "").split(",");
			
			toReturn |= (parseInt(args[0]) & 0b1111);
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111) << 8;
			toReturn |= (parseInt(args[3]) & 0b1111) << 12;
			
			return toReturn;
		}
		
		public static int FILL(String data)
		{
			return 0;
		}
		
		public static int DRAW(String data)
		{
			return 0;
		}
		
		public static int CLR(String data)
		{
			return 0;
		}
		
		public static int SVC(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b111111111111111111111111;
		}
		
		public static int BIC(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int AND(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int ORR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int EOR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int ADD(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int RSB(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int SUB(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		}
		
		public static int CTD(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int DSTR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			int toReturn = 0;
			
			toReturn |= (parseInt(args[0]) & 0b1111) << 8;
			toReturn |= (parseInt(args[1]) & 0b1111) << 4;
			toReturn |= (parseInt(args[2]) & 0b1111);
			if(args[3].startsWith("#"))
				toReturn |= (parseInt(args[3]) & 0b111_1111_1111) << 12;
			else
			{
				toReturn |= (parseInt(args[3]) & 0b1111) << 12;
				toReturn |= 0b1 << 23;
			}
			
			return toReturn;
		}
		
		public static int DLDR(String data)
		{
			return DSTR(data);
		}
		
		public static int CPM(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int PUSH(String data)
		{
			return parseInt(data.replace(" ", "")) & 0b1111;
		}
		
		public static int POP(String data)
		{
			return PUSH(data);
		}
		
		public static int DIV(String data)
		{
			/*String[] args = data.replace(" ", "").split(",");
			int toReturn = 0;
			
			toReturn |= (parseInt(args[0]) & 0b1111) << 16;
			toReturn |= (parseInt(args[1]) & 0b1111) << 12;
			toReturn |= (parseInt(args[2]) & 0b1111);
			
			return toReturn;*/
			
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		
		}
		
		public static int MUL(String data)
		{
			/*String[] args = data.replace(" ", "").split(",");
			int toReturn = 0;
			
			toReturn |= (parseInt(args[0]) & 0b1111) << 16;
			toReturn |= (parseInt(args[1]) & 0b1111) << 12;
			toReturn |= (parseInt(args[2]) & 0b1111);
			
			return toReturn;*/
			
			String[] args = data.replace(" ", "").split(",");
			
			return writeDataOp(args[2].startsWith("#"), parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
		
		}
		
		public static int TEQ(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			return writeDataOp(args[1].startsWith("#"), 0, parseInt(args[0]), parseInt(args[1]));
		}
		
		public static int TST(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			return writeDataOp(args[1].startsWith("#"), 0, parseInt(args[0]), parseInt(args[1]));
		}
		
		public static int CMN(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			return writeDataOp(args[1].startsWith("#"), 0, parseInt(args[0]), parseInt(args[1]));
		}
		
		public static int CMP(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			return writeDataOp(args[1].startsWith("#"), 0, parseInt(args[0]), parseInt(args[1]));
		}
		
		public static int STR(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			int toReturn = 0;
			toReturn |= (parseInt(args[0]) & 0b1111) << 16;
			toReturn |= (parseInt(args[1]) & 0b1111) << 12;
			if(!args[2].contains("R"))
			{
				toReturn |= 0b1_0_0_0_0_0_0000_0000_000000000000;
				toReturn |= parseInt(args[2]) & 0b1111_1111_1111;
			}else
			{
				toReturn |= parseInt(args[2]) & 0b1111;
				
			}
			
			return toReturn;
		}
		
		public static int STRB(String data)
		{
			return STR(data);
		}
		
		public static int LDR(String data)
		{
			return STR(data);
		}
		
		public static int LDRB(String data)
		{
			return LDR(data);
		}
		
		public static int HLT(String data)
		{
			return 0;
		}
		
		public static int BLK(String data)
		{
			return 0;
		}
		
		public static int UBLK(String data)
		{
			return 0;
		}
		
		public static int B(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return AsmCore.compressInt(parseInt(args[0].replace("#", "")), 24) & 0b1111_1111_1111_1111_1111_1111;
		}
		
		public static int BL(String data)
		{
			return B(data);
		}
		
		public static int BX(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			
			return (parseInt(args[0]) & 0b1111) | ((parseInt(args[1]) & 0b1111) << 4);
		}
		
		public static int MOV(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			int toReturn = 0;
			
			toReturn = writeDataOp(args[1].startsWith("#"), 0, parseInt(args[0]), parseInt(args[1]));
			
			return toReturn;
		}
		
		public static int SWP(String data)
		{
			String[] args = data.replace(" ", "").split(",");
			int toReturn = 0;
			
			toReturn |= (parseInt(args[0]) & 0b1111) << 16;
			toReturn |= (parseInt(args[1]) & 0b1111) << 12;
			
			toReturn |= parseInt(args[2]) & 0b1111;
			
			return toReturn;
		}
		
		public static int SWPB(String data)
		{
			return SWP(data);
		}
		
		public static int MVN(String data)
		{
			return MOV(data);
		}
		
		private static int writeDataOp(boolean imm, int...args)
		{
			int toReturn = 0;
			
			toReturn |= (args[0] & 0b1111) << 16;
			toReturn |= (args[1] & 0b1111) << 12;
			
			if(imm)
			{
				toReturn |= 0b1_0000_0_0000_0000_000000000000;
				toReturn |= AsmCore.compressInt(args[2], 12) & 0b1111_1111_1111;
			}else
				toReturn |= args[2] & 0b1111;
			
			return toReturn;
		}
		
		private static int parseInt(String data)
		{
			data = data.replace("#", "").replace("[", "").replace("]", "").replace("R", "");
			
			if(data.startsWith("0X"))
				return Integer.parseInt(data.replace("0X", ""), 16);
			if(data.startsWith("0B"))
				return Integer.parseInt(data.replace("0B", ""), 2);
			return Integer.parseInt(data);
		}
	}

	public static class Execution
	{
		private static boolean fill = false;
		
		public static void IP(int opcode)
		{
			Register reg = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			
			reg.setValue(NetworkCore.getAddress());
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : IP : " + reg.getValue() + " -> " + reg.getName());
		}
		
		public static void MVX(int opcode)
		{
			int value = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), mode = (opcode >> 8) & 0b1111;
			Processor.getInstance().getRegisterWithMode(opcode & 0b1111, mode).setValue(value);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : MVX : " + Processor.getInstance().getRegisterWithMode(opcode & 0b1111, mode).getValue() + " -> " + Processor.getInstance().getRegisterWithMode(opcode & 0b1111, mode).getName());
		}
		
		public static void DMP(int opcode)
		{
			Processor.getInstance().clearBuffer();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : DMP : Cleared network buffer");
		}
		
		public static void SIZ(int opcode)
		{
			Register reg = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			
			reg.setValue(Processor.getInstance().bufferLength());
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SIZ : " + reg.getValue() + " -> " + reg.getName());
		}
		
		public static void RCV(int opcode)
		{
			int start = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), length = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue();
			
//			System.out.println("Stored data to " + start + ", grabbed " + length + " bytes");
			
			Processor.getInstance().setMemorySegment(start, Processor.getInstance().popNetwork(length));
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : RCV : Recieved data to " + Integer.toHexString(start) + " - " + Integer.toHexString(start + length));
		}
		
		public static void SND(int opcode)
		{
			int ip = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), start = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), length = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue();
			
//			System.out.println("Attemped send to " + NetworkCore.getAddress(ip) + " : start = " + start + " : length = " + length);
			
			NetworkCore.sendData(ip, Processor.getInstance().getMemorySegment(start, length));
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SND : Sent data within " + Integer.toHexString(start) + " - " + Integer.toHexString(start + length) + " to " + NetworkCore.getAddress(ip));
		}
		
		public static void NOP(int opcode)
		{
			System.err.println("Encountered a NOP : " + Integer.toBinaryString(opcode));
			System.err.println(Processor.getInstance().getRegisterPerMode(15).toString());
			GameUtil.throwNonFatal(GameUtil.ErrorCode.nop);
		}
		
		public static void GQTM(int opcode)
		{
			Register qntm = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			
			qntm.setValue(Processor.getInstance().getRegisterPerMode(18).getValue() & 0b1111_1111_1111_1111_1111_1111_1111);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : GQTM : " + qntm.getValue() + " -> " + qntm.getName());
		}
		
		public static void QNTM(int opcode)
		{
			int qntm = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			
			Processor.getInstance().getRegisterPerMode(18).setValue(Processor.getInstance().getRegisterPerMode(18).getValue() | (qntm & 0b1111_1111_1111_1111_1111_1111_1111));
		
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : QNTM : Set quantum to " + qntm);
		}
		
		public static void SEC(int opcode)
		{
			int start = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), length = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue();
			boolean	sec = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue() != 0;
			
			Processor.getInstance().secureRegion(start, length, sec);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SEC : Secured region " + Integer.toHexString(start) + " - " + Integer.toHexString(start + length));
		}
		
		public static void SCR(int opcode)
		{
			Register x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			Register y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111);
			
			x.setValue(GraphicsUtil.getScreenWidth());
			y.setValue(GraphicsUtil.getScreenHeight());
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SCR : " + GraphicsUtil.getScreenWidth() + " -> " + x.getName() + " : " + GraphicsUtil.getScreenHeight() + " -> " + y.getName());
			
		}
		
		public static void ROT(int opcode)
		{
			int x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), o = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue();
			
			GameUtil.setRotate(x, y, o);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : ROT : Rotated " + o + " degrees about " + x + ", " + y);
			
		}
		
		public static void MOUSE(int opcode)
		{
			Register x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			Register y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111);
			
			x.setValue(Mouse.getX());
			y.setValue(MouseUtil.getY());
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : MOUSE : " + Mouse.getX() + " -> " + x.getName() + " : " + MouseUtil.getY() + " -> " + y.getName());
			
		}
		
		public static void TEXT(int opcode)
		{
			float x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), off = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue();
			
			byte[] textBytes = {};
			
			byte[] oldBytes = textBytes;
			textBytes = new byte[textBytes.length + 1];
			System.arraycopy(oldBytes, 0, textBytes, 0, oldBytes.length);
			textBytes[oldBytes.length] = Processor.getInstance().getMemory((int) (off + oldBytes.length));
			
			while(textBytes[textBytes.length - 1] != 0)
			{
				oldBytes = textBytes;
				textBytes = new byte[textBytes.length + 1];
				System.arraycopy(oldBytes, 0, textBytes, 0, oldBytes.length);
				textBytes[oldBytes.length] = Processor.getInstance().getMemory((int) (off + oldBytes.length));
			}
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : TEXT : Displayed string \"" + new String(textBytes).substring(0, textBytes.length - 1) + "\" at " + x + ", " + y);
			
			try {
				GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("drawString", String.class, float.class, float.class), GLComplex.getContainer().getGraphics(), true, new String(textBytes, "UTF-8").replace((char) 13, '\n'), x, y));
			} catch (NoSuchMethodException | SecurityException | UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		
		public static void GCOLOR(int opcode)
		{
			Register dest = Processor.getInstance().getRegisterPerMode(opcode & 0b1111);
			
			dest.setValue((GLComplex.getContainer().getGraphics().getColor().getRedByte() << 24) | (GLComplex.getContainer().getGraphics().getColor().getGreenByte() << 16) | (GLComplex.getContainer().getGraphics().getColor().getBlueByte() << 8) | (GLComplex.getContainer().getGraphics().getColor().getAlphaByte() << 0));
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : GCOLOR : Color pulled at (" + GLComplex.getContainer().getGraphics().getColor().getRed() + ", " + GLComplex.getContainer().getGraphics().getColor().getGreen() + ", " + GLComplex.getContainer().getGraphics().getColor().getBlue() + ") -> " + dest.getName());
		}
		
		public static void COLOR(int opcode)
		{
			int value = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			Color toSet = new Color((value >> 24) & 0xff, (value >> 16) & 0xff, (value >> 8) & 0xff, (value >> 0) & 0xff);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : COLOR : Set color to (" + toSet.getRed() + ", " + toSet.getGreen() + ", " + toSet.getBlue() + ")");
			try {
				GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("setColor", Color.class), GLComplex.getContainer().getGraphics(), true, toSet));
			} catch (NoSuchMethodException | SecurityException e) {
				e.printStackTrace();
			}
		}
		
		public static void LSR(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			args[1] = Processor.getInstance().getRegisterPerMode(args[1]).getValue();
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(args[1] >> args[2]);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : LSR : " + args[1] + " >> " + args[2] + " = " + (args[1] >> args[2]));
		}
		
		public static void LSL(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			args[1] = Processor.getInstance().getRegisterPerMode(args[1]).getValue();
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(args[1] << args[2]);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : LSL : " + args[1] + " << " + args[2] + " = " + (args[1] << args[2]));
		}
		
		public static void ASR(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			args[1] = Processor.getInstance().getRegisterPerMode(args[1]).getValue();
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(args[1] >>> args[2]);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : ASR : " + args[1] + " >>> " + args[2] + " = " + (args[1] >>> args[2]));
		}
		
		public static void OVL(int opcode)
		{
			float x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), w = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue(), h = Processor.getInstance().getRegisterPerMode((opcode >> 12) & 0b1111).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : OVL x: " + x + " y: " + y + " w: " + w + " h: " + h);
			
			if(fill)
				try {
					GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("fillOval", float.class, float.class, float.class, float.class), GLComplex.getContainer().getGraphics(), true, x, y, w, h));
				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				}
			else
				try {
					GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("drawOval", float.class, float.class, float.class, float.class), GLComplex.getContainer().getGraphics(), true, x, y, w, h));
				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				}
		}
		
		public static void RECT(int opcode)
		{
			float x = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), y = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), w = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue(), h = Processor.getInstance().getRegisterPerMode((opcode >> 12) & 0b1111).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : RECT x: " + x + " y: " + y + " w: " + w + " h: " + h);
			
			if(fill)
				try {
					GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("fillRect", float.class, float.class, float.class, float.class), GLComplex.getContainer().getGraphics(), true, x, y, w, h));
				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				}
			else
				try {
					GameUtil.renderQueue.add(new RenderAction<Graphics>(Graphics.class.getDeclaredMethod("drawRect", float.class, float.class, float.class, float.class), GLComplex.getContainer().getGraphics(), true, x, y, w, h));
				} catch (NoSuchMethodException | SecurityException e) {
					e.printStackTrace();
				}
		}
		
		public static void FILL(int opcode)
		{
			fill = true;
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : FILL : Display set for fill");
		}
		
		public static void DRAW(int opcode)
		{
			fill = false;
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : DRAW : Display set for outline");
		}
		
		public static void CLR(int opcode)
		{
			GameUtil.queueClear();
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : CLR : Queued display clear");
		}
		
		public static void DSTR(int opcode)
		{
			int memStart = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue(), diskStart = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), length = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), id = (opcode >> 12) & 0b111_1111_1111;
			
			if(((opcode >> 23) & 0b1) == 0b1)
				id = Processor.getInstance().getRegisterPerMode(id).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : DSTR : " + memStart + " : " + diskStart + " : " + length + " : " + id);
			
			MemoryUtil.saveDiskRegion(memStart, diskStart, length, id);
		}

		public static void DLDR(int opcode)
		{
			int memStart = Processor.getInstance().getRegisterPerMode((opcode >> 8) & 0b1111).getValue(), diskStart = Processor.getInstance().getRegisterPerMode((opcode >> 4) & 0b1111).getValue(), length = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue(), id = (opcode >> 12) & 0b111_1111_1111;
			
			if(((opcode >> 23) & 0b1) == 0b1)
				id = Processor.getInstance().getRegisterPerMode(id).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : DLDR : " + memStart + " : " + diskStart + " : " + length + " : " + id);
			
			MemoryUtil.loadDiskRegion(memStart, diskStart, length, id);
		}

		public static void CTD(int opcode)
		{
			Processor.getInstance().getRegisterPerMode(opcode & 0b1111).setValue(Processor.getInstance().disks.size());
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : CTD : Counted " + Processor.getInstance().disks.size() + " disks");
		}

		public static void CPM(int opcode)
		{
			for(ProcessorMode mode : ProcessorMode.values())
				if(mode.id == (opcode & 0b1111))
					Processor.getInstance().setMode(mode);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : CPM : Mode changed to " + (opcode & 0b1111));
		}

		public static void HLT(int opcode)
		{
			System.out.println(Processor.getInstance().threadID + " : HLT : System halted");
			Processor.getInstance().haltProcessor();
		
		}
		
		public static void BLK(int opcode)
		{
			GameUtil.block(true);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : BLK : Render pipeline blocked");
		
		}
		
		public static void UBLK(int opcode)
		{
			GameUtil.block(false);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : UBLK : Render pipeline unblocked");
		
		}

		public static void PUSH(int opcode)
		{
			int val = Processor.getInstance().getRegisterPerMode(13).getValue();
			int off = AsmCore.fromBytes(Processor.getInstance().getMemorySegment(val, 4));
			
			Processor.getInstance().setMemorySegment(val + off, AsmCore.toBytes(Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue()));
			Processor.getInstance().setMemorySegment(val, AsmCore.toBytes(off + 4));
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : PUSH : " + Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue());
		}

		public static void POP(int opcode)
		{
			int val = Processor.getInstance().getRegisterPerMode(13).getValue();
			int off = AsmCore.fromBytes(Processor.getInstance().getMemorySegment(val, 4)) - 4;
			
			Processor.getInstance().getRegisterPerMode(opcode & 0b1111).setValue(AsmCore.fromBytes(Processor.getInstance().getMemorySegment(val + off, 4)));
			Processor.getInstance().setMemorySegment(val, AsmCore.toBytes(off));
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : POP : " + Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue() + " -> " + Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getName());
		
		}

		public static void B(int opcode)
		{
			int toJump = opcode & 0b1111_1111_1111_1111_1111_1111;
			
			toJump = AsmCore.expandInt(toJump, 24);
			
			toJump -= 4;
			
			Processor.getInstance().getRegisterPerMode(15).setValue(Processor.getInstance().getRegisterPerMode(15).getValue() + toJump);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : B : " + (toJump + 4) + " : " + Processor.getInstance().getRegisterPerMode(15).toString());
		
		}

		public static void BL(int opcode)
		{
			Processor.getInstance().getRegisterPerMode(14).setValue(Processor.getInstance().getRegisterPerMode(15).getValue());
			
			B(opcode);
		}

		public static void BX(int opcode)
		{
			int toJump = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			int mode = (opcode & 0b11110000) >> 4;
			
			for(ProcessorMode tmpMode : ProcessorMode.values())
				if(tmpMode.id == (mode))
					Processor.getInstance().setMode(tmpMode);
			
			Processor.getInstance().getRegisterPerMode(15).setValue(toJump);
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : BX : " + toJump + " : " + mode);
		
		}

		public static void STR(int opcode)
		{
			int[] parsed = parseDataOp(opcode);
			
			Processor.getInstance().setMemorySegment(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue(), (byte)((Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() & 0b1111_1111_0000_0000_0000_0000_0000_0000) >> 24), (byte)((Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() & 0b1111_1111_0000_0000_0000_0000) >> 16), (byte)((Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() & 0b1111_1111_0000_0000) >> 8), (byte)(Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() & 0b1111_1111));
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : STR : " + Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() + " -> " + Integer.toHexString(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue()));
		}

		public static void LDR(int opcode)
		{
			int[] parsed = parseDataOp(opcode);
			
			Processor.getInstance().getRegisterPerMode(parsed[1]).setValue(AsmCore.fromBytes(Processor.getInstance().getMemorySegment(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue(), 4)));
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : LDR : " + Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() + " -> " + Processor.getInstance().getRegisterPerMode(parsed[1]).getName());
		}

		public static void STRB(int opcode)
		{
			int[] parsed = parseDataOp(opcode);
			
			Processor.getInstance().setMemory(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue(), (byte)(Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() & 0b1111_1111));
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : STRB : " + Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() + " -> " + Integer.toHexString(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue()));
		}

		public static void LDRB(int opcode)
		{
			int[] parsed = parseDataOp(opcode);
			
			Processor.getInstance().getRegisterPerMode(parsed[1]).setValue(Processor.getInstance().getMemory(parsed[2] + Processor.getInstance().getRegisterPerMode(parsed[0]).getValue()));
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : LDRB : " + Processor.getInstance().getRegisterPerMode(parsed[1]).getValue() + " -> " + Processor.getInstance().getRegisterPerMode(parsed[1]).getName());
		}

		public static void SWP(int opcode)
		{
			int[] toReturn = new int[3];
			
			toReturn[0] = Processor.getInstance().getRegisterPerMode(opcode >> 16 & 0b1111).getValue();
			Register dest = Processor.getInstance().getRegisterPerMode(opcode >> 12 & 0b1111);
			
			toReturn[2] = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			
			int tmpVal = AsmCore.fromBytes(Processor.getInstance().getMemorySegment(toReturn[0] + toReturn[2], 4));
			Processor.getInstance().setMemorySegment(toReturn[0] + toReturn[2], AsmCore.toBytes(dest.getValue()));
			dest.setValue(tmpVal);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SWP : " + dest.getName() + " <--> " + Integer.toHexString(toReturn[0] + toReturn[2]));
			
		}

		public static void SWPB(int opcode)
		{
			int[] toReturn = new int[3];
			
			toReturn[0] = Processor.getInstance().getRegisterPerMode(opcode >> 16 & 0b1111).getValue();
			Register dest = Processor.getInstance().getRegisterPerMode(opcode >> 12 & 0b1111);
			
			toReturn[2] = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			
			byte tmpVal = Processor.getInstance().getMemory(toReturn[0] + toReturn[2]);
			Processor.getInstance().setMemory(toReturn[0] + toReturn[2], (byte) (dest.getValue() & 0b1111_1111));
			dest.setValue(tmpVal);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SWPB : " + dest.getName() + " <--> " + Integer.toHexString(toReturn[0] + toReturn[2]));
			
		}

		public static void MUL(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : MUL : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " * " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() * args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() * args[2]);
		}
		
		public static void DIV(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : DIV : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " / " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() / args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() / args[2]);
		}

		public static void SVC(int opcode)
		{
			int intrupt = opcode & 0b111111111111111111111111;
			
			int tmpAddr = Processor.getInstance().getRegisterPerMode(15).getValue();
			
			Processor.getInstance().getRegisterPerMode(15).setValue(AsmCore.fromBytes(Processor.getInstance().getMemorySegment((Processor.getInstance().getRegisterPerMode(12).getValue()) + (intrupt * 4), 4)));
			
			Processor.getInstance().setMode(ProcessorMode.IRQ);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SVC : " + intrupt + " : " + Processor.getInstance().getRegisterPerMode(15).getValue());
			
			Processor.getInstance().getRegisterPerMode(14).setValue(tmpAddr);
		}

		public static void EOR(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : EOR : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " ^ " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() ^ args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() ^ args[2]);
		}

		public static void SUB(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : SUB : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " - " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() - args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() - args[2]);
		}

		public static void RSB(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : RSB : " + args[2] + " + " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " = " + (args[2] - Processor.getInstance().getRegisterPerMode(args[1]).getValue()) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(args[2] - Processor.getInstance().getRegisterPerMode(args[1]).getValue());
		}

		public static void ADD(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : ADD : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " + " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() + args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() + args[2]);
		}

		public static void TST(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			int op1 = Processor.getInstance().getRegisterPerMode(ops[1]).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : TST : " + op1 + " & " + ops[2] + " = " + (op1 & ops[2]));
			
			
			op1 &= ops[2];
			AsmCore.setCPSR(op1 < 0, op1 == 0, false, false);
		}

		public static void TEQ(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			int op1 = Processor.getInstance().getRegisterPerMode(ops[1]).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : TEQ : " + op1 + " ^ " + ops[2] + " = " + (op1 ^ ops[2]));
			
			op1 ^= ops[2];
			AsmCore.setCPSR(op1 < 0, op1 == 0, false, false);
		}

		public static void CMP(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			int op1 = Processor.getInstance().getRegisterPerMode(ops[1]).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : CMP : " + op1 + " - " + ops[2] + " = " + (op1 - ops[2]));
			
			AsmCore.setCPSR(op1 - ops[2] < 0, op1 - ops[2] == 0, false, false);
		}

		public static void CMN(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			int op1 = Processor.getInstance().getRegisterPerMode(ops[1]).getValue();
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : CMN : " + op1 + " + " + ops[2] + " = " + (op1 - ops[2]));
			
			op1 += ops[2];
			AsmCore.setCPSR(op1 < 0, op1 == 0, false, false);
		}

		public static void ORR(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : ORR : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " | " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() | args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() | args[2]);
		}

		public static void MOV(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			Register dest = Processor.getInstance().getRegisterPerMode(ops[1]);
			dest.setValue(ops[2]);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : MOV : " + ops[2] + " -> " + dest.getName());
			
		}

		public static void BIC(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : BIC : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " & " + Integer.toBinaryString(~args[2]) + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() & ~args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() & ~args[2]);
		}

		public static void MVN(int opcode)
		{
			int[] ops = parseDataOp(opcode);
			Register dest = Processor.getInstance().getRegisterPerMode(ops[1]);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : MVN : " + ~ops[2] + " -> " + dest.getName());
			
			dest.setValue(~ops[2]);
		}

		public static void AND(int opcode)
		{
			int[] args = parseDataOp(opcode);
			
			if(ZeroDayExploit.getKey("--trace"))
				System.out.println(Processor.getInstance().threadID + " : AND : " + Processor.getInstance().getRegisterPerMode(args[1]).getValue() + " & " + args[2] + " = " + (Processor.getInstance().getRegisterPerMode(args[1]).getValue() & args[2]) + " -> " + Processor.getInstance().getRegisterPerMode(args[0]).getName());
			
			Processor.getInstance().getRegisterPerMode(args[0]).setValue(Processor.getInstance().getRegisterPerMode(args[1]).getValue() & args[2]);
		}

		private static int[] parseDataOp(int opcode)
		{
			int[] toReturn = new int[3];
			
			toReturn[0] = opcode >> 16 & 0b1111;
			toReturn[1] = opcode >> 12 & 0b1111;
			
			if(((opcode & 0b10000_0_0000_0000_000000000000) >> 25) == 0b1)
			{
				toReturn[2] = opcode & 0b1111_1111_1111;
				toReturn[2] = AsmCore.expandInt(toReturn[2], 12);
				
			}else
				toReturn[2] = Processor.getInstance().getRegisterPerMode(opcode & 0b1111).getValue();
			
			return toReturn;
		}
	}

	public static class StoryScripts
	{
		public static void LD_IMG(String args)
		{
			try {
				GameUtil.renderQueue.add(new RenderAction<GraphicsUtil>(GraphicsUtil.class.getDeclaredMethod("displayLoadingImageSCRIPT", String.class, Graphics.class, long.class, int.class), null, false, args.split(",")[0].trim().replace("\"", ""), GLComplex.getContainer().getGraphics(), Long.parseLong(args.split(",")[1].trim()), Integer.parseInt(args.split(",")[2].trim())));
			} catch (NoSuchMethodException | SecurityException e) {
				e.printStackTrace();
			}
			SUS("");
		}
		
		public static void EX(String args)
		{
			Processor.getPlayer().suspend(!Boolean.parseBoolean(args.trim()));
		}
		
		public static void SND_MAIL(String args)
		{
			
		}
		
		public static void ADD_DISK(String args)
		{
			Processor.getPlayer().addDisk(args);
		}
		
		public static void RM_DISK(String args)
		{
			Processor.getPlayer().removeDisk(Integer.parseInt(args.trim()));
		}
		
		public static void ADD_SRV(final String args)
		{
			new Thread()
			{
				public void run()
				{
					String path = args.trim().replace("\"", "");
					Properties srvFile = new Properties();
					try {
						srvFile.load(FileUtil.getFile(path));
					} catch (IOException e) {
						e.printStackTrace();
					}
					
					this.setName(srvFile.getProperty("name"));
					NetworkCore.setAddress(NetworkCore.getAddress(srvFile.getProperty("ip", "0.0.0.0")));
					new Processor(srvFile.getProperty("bios"), Integer.parseInt(srvFile.getProperty("mem")), srvFile.getProperty("disks").split(";")).execute(0);
					System.err.println("Server \"" + srvFile.getProperty("name") + "\" terminated");
				}
			}
			.start();
		}
		
		public static void RM_SRV(String args)
		{
			Processor.getInstance(args.trim().replace("\"", "")).haltProcessor();
		}
		
		public static void HLT(String args)
		{
			StoryCore.haltStory();
		}
		
		public static void SUS(String args)
		{
			StoryCore.suspendStory(true);
		}
		
		public static void SND_PLAY(String args)
		{
			AudioUtil.loadSound(args.trim().replace("\"", ""), true, false);
		}
		
		public static void SND_STOP(String args)
		{
			AudioUtil.stopSound(args.trim().replace("\"", ""));
		}
		
		public static void MUS_PLAY(String args)
		{
			AudioUtil.loadMusic(args.trim().replace("\"", ""), true, false);
		}
		
		public static void MUS_STOP(String args)
		{
			SND_STOP(args);
		}
		
		public static void DO_LOG(String args)
		{
			StoryCore.doLog(StoryCore.applyVar(args.trim().replace("\"", "")));
		}
		
		public static void SET_LOG(String args)
		{
			StoryCore.setLog(args.trim().replace("\"", ""));
		}
		
		public static void GOTO(String args)
		{
			if(!args.trim().startsWith("\""))
				StoryCore.jump(Integer.parseInt(args.trim()));
			else
				if(!args.trim().contains("#"))
					StoryCore.jump(args.trim().replace("\"", ""));
				else
					StoryCore.jump(StoryCore.getVar(args.trim().replace("\"", "").replace("#", "")));
		}
		
		public static void SET_VAR(String args)
		{
			String var = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			StoryCore.setVar(var, val);
		}
		
		public static void DO_MATH(String args)
		{
			String op = args.trim().split(",")[0].trim().replace("\"", "").toUpperCase();
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			int arg = args.trim().split(",")[2].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[2].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[2].trim());
			
			switch(op)
			{
			case "ADD":
				StoryCore.setVar(var, StoryCore.getVar(var) + arg);
				return;
			case "SUB":
				StoryCore.setVar(var, StoryCore.getVar(var) - arg);
				return;
			case "MUL":
				StoryCore.setVar(var, StoryCore.getVar(var) * arg);
				return;
			case "DIV":
				StoryCore.setVar(var, StoryCore.getVar(var) / arg);
				return;
			case "MOD":
				StoryCore.setVar(var, StoryCore.getVar(var) % arg);
				return;
			case "AND":
				StoryCore.setVar(var, StoryCore.getVar(var) & arg);
				return;
			case "OR":
				StoryCore.setVar(var, StoryCore.getVar(var) | arg);
				return;
			case "XOR":
				StoryCore.setVar(var, StoryCore.getVar(var) ^ arg);
				return;
			case "NOR":
				StoryCore.setVar(var, StoryCore.getVar(var) | ~arg);
				return;
			case "NAND":
				StoryCore.setVar(var, StoryCore.getVar(var) & ~arg);
				return;
			case "LSL":
				StoryCore.setVar(var, StoryCore.getVar(var) << arg);
				return;
			case "LSR":
				StoryCore.setVar(var, StoryCore.getVar(var) >> arg);
				return;
			case "ASR":
				StoryCore.setVar(var, StoryCore.getVar(var) >>> arg);
				return;
				
			case "NOT":
				StoryCore.setVar(var, ~StoryCore.getVar(var));
				return;
			}
		}
		
		public static void SET_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			StoryCore.setField(field, val);
		}
		
		public static void GET_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.setVar(var, StoryCore.getField(field));
		}
		
		public static void RM_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			StoryCore.removeField(field);
		}
		
		public static void IF(String args)
		{
			String expr = args.trim().split(",")[0].trim().replace("\"", ""), label = args.trim().split(",")[1].trim().replace("\"", ""), op = expr.split(" ")[1];
			int arg1 = expr.split(" ")[0].trim().contains("#") ? StoryCore.getVar(expr.split(" ")[0].trim().replace("#", "")) : Integer.parseInt(expr.split(" ")[0].trim()), arg2 = expr.split(" ")[2].trim().contains("#") ? StoryCore.getVar(expr.split(" ")[2].trim().replace("#", "")) : Integer.parseInt(expr.split(" ")[2].trim());
			boolean result = false;
			
//			System.out.println(expr + " : " + label + " : " + op + " : " + arg1 + " + " + arg2);
			
			switch(op)
			{
			case "==":
				result = arg1 == arg2;
				break;
			case "!=":
				result = arg1 != arg2;
				break;
			case "<=":
				result = arg1 <= arg2;
				break;
			case ">=":
				result = arg1 >= arg2;
				break;
			case "<":
				result = arg1 < arg2;
				break;
			case ">":
				result = arg1 > arg2;
				break;
			}
			
			if(result)
				StoryCore.jump(label);
		}
		
		public static void GET_DATE(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.setVar(var, TimeUtil.get(field));
		}
		
		public static void SET_DATE(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			TimeUtil.set(field, val);
		}
		
		public static void ADD_PLUGIN(String args)
		{
			ZeroDayExploit.loadPlugin("", new File(FileUtil.baseDir + args.replace("\"", "")));
			DO_LOG("Loaded plugin " + args);
		}
		
		public static void SLEEP(String args)
		{
			try {
				Thread.sleep(Long.parseLong(args.trim()));
			} catch (NumberFormatException | InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		public static void CL_EVENT(String args)
		{
			String[] elem = args.trim().split(",");
			int hour = Integer.parseInt(elem[0].trim()), minute = Integer.parseInt(elem[1].trim()), year = Integer.parseInt(elem[2].trim()), day = Integer.parseInt(elem[3].trim()), month = Integer.parseInt(elem[4].trim());
			String label = elem[5].trim().replace("\"", "");
			
			StoryCore.addEvent(new Event.CalEvent(hour, minute, year, day, month, label));
		}
		
		public static void HK_EVENT(String args)
		{
			String name = args.trim().split(",")[0].trim().replace("\"", ""), label = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.addEvent(new Event.GoalEvent(name, label));
		}
	}
}
