package net.lotrek.zero;

// ______ _______  ______  _____       ______  _______ __   __
//	____/ |______ |_____/ |     |      |     \ |_____|   \_/  
// /_____ |______ |    \_ |_____|      |_____/ |     |    |   
//                                                        
//  _______ _     _  _____          _____  _____ _______  
//  |______  \___/  |_____] |      |     |   |      |     
//  |______ _/   \_ |       |_____ |_____| __|__    |     

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;
import java.util.Scanner;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import net.lotrek.zero.engine.AsmCore;
import net.lotrek.zero.engine.Assembler;
import net.lotrek.zero.engine.Processor;
import net.lotrek.zero.engine.Register;
import net.lotrek.zero.graphics.GLComplex;
import net.lotrek.zero.graphics.GraphicsUtil;
import net.lotrek.zero.network.NetworkCore;
import net.lotrek.zero.tools.AdvancedZipUtil;
import net.lotrek.zero.tools.FileUtil;
import net.lotrek.zero.tools.GameUtil;
import net.lotrek.zero.tools.HTTPUtil;
import net.lotrek.zero.tools.MultiplexOutputStream;
import net.lotrek.zero.tools.ZipUtil;

public class ZeroDayExploit
{
	private static HashMap<String, Boolean> globalKeys = new HashMap<String, Boolean>();
	public static String[] args;
	
	public static boolean getKey(String name)
	{
		return globalKeys.containsKey(name) ? globalKeys.get(name) : false;
	}
	
	public static void setKey(String name, boolean value)
	{
		globalKeys.put(name, value);
	}
	
	public static void main(String[] args)
	{
		for(String arg : args)
			globalKeys.put(arg, true);
		
		ZeroDayExploit.args = args;
		
		//Multiplex the terminal output
		try {
			MultiplexOutputStream.multiplexConsole(new FileOutputStream(new File("logFile.log"), false));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		NetworkCore.cacheRemoteAddress();
		AdvancedZipUtil.addZip("http://www.trewindata.com/zero/res.bin", "res");
		
		//Initiate special opcodes
		if(getKey("--plugins"))
			for(File item : new File("plugins").listFiles())
				loadPlugin("plugins/", item);
		
		if(getKey("--path"))
		{
			FileUtil.baseDir = args[args.length - 1];
			new File(FileUtil.baseDir).mkdirs();
		}
		
		if(getKey("-i"))
		{
			if (!args[1].endsWith(".raw"))
				GraphicsUtil.genBitmap(args[1], args[2]);
			else
				GraphicsUtil.genImage(args[1], args[2]);
			System.exit(0);
		}
		
		if(getKey("-a") && args.length > 1)
		{
			try {
				Assembler.assemble(new File(args[1]), new File(args[2]));
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.exit(0);
		}else if(getKey("-a") && args.length == 1)
		{
			JFileChooser fc = new JFileChooser();
			
			fc.setDialogTitle("Open assembly source");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".asm") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Assembly Source";
				}
				
			});
			fc.showOpenDialog(null);
			
			File src = fc.getSelectedFile();
			
			fc.setDialogTitle("Choose output file");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".bin") || arg0.getName().endsWith(".bios") || arg0.getName().endsWith(".disk") || arg0.getName().endsWith(".img") || !arg0.getName().contains(".") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Binary File";
				}
				
			});
			fc.showSaveDialog(null);
			
			File out = fc.getSelectedFile();
			
			try {
				Assembler.assemble(src, out);
			} catch (IOException e) {
				e.printStackTrace();
			}
			JOptionPane.showMessageDialog(null, "Finished assembly of " + src.getName());
			System.exit(0);
		}
		
		if(getKey("-d") && args.length > 1)
		{
			try {
				Assembler.disasemble(new File(args[1]), new File(args[2]));
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.exit(0);
		}else if(getKey("-d") && args.length == 1)
		{
			JFileChooser fc = new JFileChooser();
			
			fc.setDialogTitle("Open binary source");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".bin") || arg0.getName().endsWith(".bios") || arg0.getName().endsWith(".disk") || arg0.getName().endsWith(".img") || !arg0.getName().contains(".") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Binary File";
				}
				
			});
			
			fc.showOpenDialog(null);
			
			File src = fc.getSelectedFile();
			
			fc.setDialogTitle("Choose output file");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".asm") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Assembly Source";
				}
				
			});
			fc.showSaveDialog(null);
			
			File out = fc.getSelectedFile();
			
			try {
				Assembler.disasemble(src, out);
			} catch (IOException e) {
				e.printStackTrace();
			}
			JOptionPane.showMessageDialog(null, "Finished disassembly of " + src.getName());
			System.exit(0);
		}
		
		//Update the library path to the new directory
		//String osname = System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux";
		
		prepareNatives("http://www.trewindata.com/zero/natives.bin");
		
		loadClassesFromURL("http://www.trewindata.com/zero/lib.bin");
		/*try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{new File("lib.bin").toURI().toURL()});
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}*/
		
		//Sanity Check
		boolean isClean = true;
		for(String item : Assembler.opCodes)
		{
			String tmp = item.split("_")[0];
			try {
				AsmCore.guessHost(item, 1).getDeclaredMethod(tmp, int.class);
				AsmCore.guessHost(item, 0).getDeclaredMethod(tmp, String.class);
				AsmCore.guessHost(item, 2).getDeclaredMethod(tmp, int.class);
			} catch (NoSuchMethodException | SecurityException e) {
				System.err.println("Instruction " + tmp + " failed the sanity check");
				isClean = false;
			}
		}
		
		if(isClean)
			System.err.println("Passed the sanity check");
		
		//Start the game
		GLComplex.beginGL();
	}
	
	public static void throwFatal(String message)
	{
		System.err.println("Crash Report " + Calendar.getInstance().getTime().toString() + ":");
		System.err.println("\tCrash Message: " + message);
		System.err.println("\tCommand Line Arguments: " + Arrays.toString(args).replace("[", "").replace("]", ""));
		System.err.println("\tGame State: " + GameUtil.getState());
		System.err.println("\tLoaded Data Files: " + Arrays.toString(ZipUtil.getFiles()).replaceAll("\\[|\\]", ""));
		System.err.println("\tAlternate Files: " + Arrays.toString(ZipUtil.alternateFiles.toArray()).replaceAll("\\[|\\]", ""));
		System.err.println("\tProcessor State: " + (Processor.getInstance() == null ? "Unloaded" : "Loaded - in mode " + Processor.getInstance().getMode()));
		
		if(Processor.getInstance() != null)
		{
			System.err.println("\tRegister Dump:");
			for(Register item : Processor.getInstance().getRegisters().values())
				System.err.println("\t\t" + item.toString());
			
			try {
				System.err.println("\tDumping virtual memory...");
				long prevTime = System.currentTimeMillis();
				String name = Calendar.getInstance().getTime().toString().split("\\ ")[3].replace(":", "") + ".dmp";
				RandomAccessFile dump = new RandomAccessFile(new File(name), "rw");
				dump.setLength(Processor.getInstance().memory.length);
				dump.write(Processor.getInstance().memory);
				dump.close();
				System.err.println("\tVirual memory dumped to " + name + " in " + (System.currentTimeMillis() - prevTime) + " milliseconds");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		GLComplex.getContainer().exit();
	}
	
	public static <T> T castTo(Object toCast, Class<T> clazz)
	{
		return clazz.cast(toCast);
	}
	
	public static String getPath()
	{
		String osname = System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux";
		
		try {
			if(osname.equals("win"))
				return URLDecoder.decode(ZeroDayExploit.class.getProtectionDomain().getCodeSource().getLocation().getPath().substring(1), "UTF-8");
			else
				return URLDecoder.decode(ZeroDayExploit.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
		}catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return "";
	}
	
	public static boolean loadClasses(String path)
	{
		try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{new File(FileUtil.baseDir + path).toURI().toURL()});
			return true;
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean loadClassesFromURL(String string)
	{
		try {
			URL path = new URL(string);
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{path});
			return true;
		} catch (NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException | MalformedURLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static void loadPlugin(String base, File item)
	{
		if(item.isFile() && item.getName().endsWith(".bin"))
		{
			loadClasses(item.getAbsolutePath());
			Properties infoProp = new Properties();
			try {
				infoProp.load(ZipUtil.getStreamForFile(base + item.getName() + "/info"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			Scanner src = new Scanner(ZipUtil.getStreamForFile(base + item.getName() + "/proc"));
			
			int oldStruct = 0;
			
			while(src.hasNextLine())
			{
				String line = src.nextLine();
				Assembler.opCodes.remove(Assembler.opMap.get(line.split("_")[0]));
				Assembler.opCodes.add(line);
				Assembler.opMap.put(line.split("_")[0], line);
				oldStruct++;
			}
			
			src.close();
			
			System.out.println("Loaded " + infoProp.getProperty("author", "UNKNOWN") + "'s plugin \"" + infoProp.getProperty("name", item.getName()) + "\", installed " + oldStruct + " instruction" + (oldStruct > 1 ? "s" : ""));
		}
	}
	
	private static void prepareNatives(String url)
	{
		System.err.println("Loading native libraries from " + System.getProperty("java.io.tmpdir") + "natives");
	    
		System.setProperty("org.lwjgl.librarypath", System.getProperty("java.io.tmpdir") + "natives");
		
		if(!new File(System.getProperty("java.io.tmpdir") + "natives/lib.bin").exists())
		{
			
			new File(System.getProperty("java.io.tmpdir") + "natives").mkdirs();
			
			HTTPUtil.downloadFile("http://www.trewindata.com/zero/" + (System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux") +".bin", System.getProperty("java.io.tmpdir") + "natives/lib.bin");
			
			try {
				ZipFile natives = new ZipFile(System.getProperty("java.io.tmpdir") + "natives/lib.bin");
				Enumeration<? extends ZipEntry> files = natives.entries();
				
				String dir = System.getProperty("java.io.tmpdir") + "natives/";
				
				while(files.hasMoreElements())
				{
					ZipEntry tmpEntry = files.nextElement();
					
					if(tmpEntry.isDirectory())
						continue;
					
					FileOutputStream os = new FileOutputStream(new File(dir + tmpEntry.getName()));
					InputStream is = natives.getInputStream(tmpEntry);
					
					while(is.available() > 0)
						os.write(is.read());
					
					os.close();
				}
				
				natives.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			final Field usrPathsField = ClassLoader.class.getDeclaredField("usr_paths");
			usrPathsField.setAccessible(true);
 
			//get array of paths
			final String[] paths = (String[])usrPathsField.get(null);
 
			//add the new path
			final String[] newPaths = Arrays.copyOf(paths, paths.length + 1);
			newPaths[newPaths.length-1] = System.getProperty("java.io.tmpdir") + "natives";

			usrPathsField.set(null, newPaths);
		} catch (NoSuchFieldException | SecurityException
				| IllegalArgumentException | IllegalAccessException e1) {
			e1.printStackTrace();
		}
	}
}
