package net.lotrek.zero.graphics;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Calendar;
import java.util.Properties;

import net.lotrek.zero.Abraxas;
import net.lotrek.zero.engine.Engine;
import net.lotrek.zero.tools.AudioUtil;
import net.lotrek.zero.tools.FBOUtil;
import net.lotrek.zero.tools.GameUtil;

import org.lwjgl.LWJGLException;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;

public class GLComplex extends BasicGame
{
	private Properties saveProperties = new Properties();
	private static AppGameContainer gc;

	private static class ZeroContainer extends AppGameContainer {

		public ZeroContainer() throws SlickException {
			super(new GLComplex(), GraphicsUtil.getScreenWidth(), GraphicsUtil
					.getScreenHeight(), false);
			System.setProperty("org.lwjgl.opengl.Window.undecorated", "true");
			Display.setLocation(0, 0);
			this.setShowFPS(false);
			this.setClearEachFrame(false);
			this.setVerbose(true);
			GLComplex.gc = this;
		}

	}

	private GLComplex() {
		super("Zero Day Exploit");
	}

	public static void beginGL() {
		try {
			new ZeroContainer().start();
		} catch (SlickException e) {
			e.printStackTrace();
		}
	}

	public void render(GameContainer arg0, Graphics arg1) throws SlickException
	{
		if(FBOUtil.isFBOSupported())
		{
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
			GL11.glClearColor(0, 0, 0, 0);
			FBOUtil.bindFBO("game");
			{
				GameUtil.renderGUI((AppGameContainer) arg0, arg1);
			}
			FBOUtil.unbindFBO();
			
			FBOUtil.renderFBO("game");
			if(!(Abraxas.getKey("--debug") && Keyboard.isKeyDown(Keyboard.KEY_Q)))
				GraphicsUtil.drawScanLines();
		}else
		{
			GameUtil.renderGUI((AppGameContainer) arg0, arg1);
			if(GameUtil.getState().contains("pregame"))
				GraphicsUtil.drawScanLines();
		}
	}
	
	@Override
	public void keyPressed(int key, char c)
	{
		super.keyPressed(key, c);
		if(key == Keyboard.KEY_P && Keyboard.isKeyDown(Keyboard.KEY_0))
		{
			GraphicsUtil.takeScreenShot(0, 0, GraphicsUtil.getScreenWidth(),
					GraphicsUtil.getScreenHeight(), "Screenshot-"
							+ Calendar.getInstance().getTime().toString().split("\\ ")[3].replace(":", "")
							+ ".png");
		}else
		if(Engine.getPlayer() != null)
			Engine.getPlayer().interrupt(1, false, 0, ((key & 0xff) << 8) | (c & 0xff));
	}

	public void init(GameContainer arg0) throws SlickException
	{
		arg0.setAlwaysRender(true);
		
		if(Abraxas.getKey("--music"))
			AudioUtil.loadSound("res.bin/music.wav", true, false);
		
		GraphicsUtil.displayLoadingImage("res.bin/loadingImage.png",
				arg0.getGraphics(), 750, 10);
		GraphicsUtil.displayLoadingImage("res.bin/Zero.png",
				arg0.getGraphics(), 750, 10);
		
		GameUtil.initPregame();
	}

	public void update(GameContainer arg0, int arg1) throws SlickException
	{
		
	}
	
	public static void stop()
	{
		try {
			if(!Display.isCurrent())
				Display.makeCurrent();
		} catch (LWJGLException e) {
			e.printStackTrace();
		}
		
		gc.destroy();
	}

	public void beginGame(File gameFile) {
		try {
			this.saveProperties.load(new FileInputStream(gameFile));
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	public static AppGameContainer getContainer()
	{
		return gc;
	}
}
