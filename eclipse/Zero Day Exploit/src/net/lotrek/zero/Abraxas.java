package net.lotrek.zero;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import net.lotrek.zero.engine.APPLETONx32;
import net.lotrek.zero.engine.APPLETONx64;
import net.lotrek.zero.engine.Engine;
import net.lotrek.zero.graphics.GLComplex;
import net.lotrek.zero.graphics.GraphicsUtil;
import net.lotrek.zero.network.NetworkCore;
import net.lotrek.zero.tools.AdvancedZipUtil;
import net.lotrek.zero.tools.DevShell;
import net.lotrek.zero.tools.FileUtil;
import net.lotrek.zero.tools.GameUtil;
import net.lotrek.zero.tools.HTTPUtil;
import net.lotrek.zero.tools.MultiplexOutputStream;
import net.lotrek.zero.tools.VideoUtil;
import net.lotrek.zero.tools.ZipUtil;

public class Abraxas
{
	private static HashMap<String, Boolean> globalKeys = new HashMap<String, Boolean>();
	public static String[] args;
	private static Properties settings = new Properties();
	
	public static boolean getKey(String name)
	{
		return globalKeys.containsKey(name) ? globalKeys.get(name) : false;
	}
	
	public static void setKey(String name, boolean value)
	{
		globalKeys.put(name, value);
	}
	
	public static void clearKeys()
	{
		globalKeys.clear();
	}
	
	public static void main(String[] args)
	{
		Engine.setGlobalEngine(APPLETONx64.class);
		
		if(getKey("--path"))
		{
			FileUtil.baseDir = args[args.length - 1];
			new File(FileUtil.baseDir).mkdirs();
		}
		
		try {
			settings.load(FileUtil.getFile("settings"));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		for(Object value : settings.keySet())
			setKey((String)value, readSettingsBoolean((String)value));
		
		//Update the temporary directory to fix linking errors under Linux
		if((System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux").equals("linux"))
			System.setProperty("java.io.tmpdir", "/lib/tmp/");
		
		for(String arg : args)
			globalKeys.put(arg, true);
		
		Abraxas.args = args;
		
		//Multiplex the terminal output
		try {
			MultiplexOutputStream.multiplexConsole(new FileOutputStream(new File(FileUtil.baseDir + "logFile.log"), false));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		System.out.print("Arguments: [ ");
		for(String key : globalKeys.keySet())
			System.out.print(key + " = " + getKey(key) + ", ");
		System.out.print("]\r\n");
		
		prepareNatives();
		
		NetworkCore.cacheRemoteAddress();
		AdvancedZipUtil.addZip("http://www.trewindata.com/zero/res.bin", "res");
		
		//Initiate special opcodes
		if(getKey("--plugins"))
			for(File item : new File("plugins").listFiles())
				loadPlugin("plugins/", item);
		
		//Shell
		if(getKey("-s"))
		{
			DevShell.initShell();
			System.exit(0);
		}
		
		if(getKey("-v"))
		{
			VideoUtil.playVideo(Abraxas.args[1]);
			System.exit(0);
		}
		
		if(getKey("-fs"))
		{
			//This should be sufficient for normal use. 50320 files, 1000 megabytes maximum total size. Each block fills 100 megabytes, at 10 blocks maximum. Smallest block holds 4 kilobyte files, biggest holds 5 megabyte files
			generateFilesystem(new File(Abraxas.args[1]), new File(Abraxas.args[2]), new File(Abraxas.args[3]), new File(Abraxas.args[4]), new int[]{4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 5242880}, new int[]{25600, 12800, 6400, 3200, 1600, 800, 400, 200, 100, 20});
			System.exit(0);
		}
		
		if(getKey("-i"))
		{
			if (!args[1].endsWith(".raw"))
				GraphicsUtil.genBitmap(FileUtil.baseDir + args[1], FileUtil.baseDir + args[2]);
			else
				GraphicsUtil.genImage(FileUtil.baseDir + args[1], FileUtil.baseDir + args[2]);
			System.exit(0);
		}
		
		if(getKey("-a") && args.length > 1)
		{
			try {
				Engine.createGlobalEngine().generateCode(FileUtil.baseDir + args[1], FileUtil.baseDir + args[2]);
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.exit(0);
		}else if(getKey("-a") && args.length == 1)
		{
			JFileChooser fc = new JFileChooser();
			
			fc.setDialogTitle("Open assembly source");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".asm") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Assembly Source";
				}
				
			});
			fc.showOpenDialog(null);
			
			File src = fc.getSelectedFile();
			
			fc.setDialogTitle("Choose output file");
			fc.setFileFilter(new FileFilter()
			{

				@Override
				public boolean accept(File arg0)
				{
					return arg0.getName().endsWith(".bin") || arg0.getName().endsWith(".bios") || arg0.getName().endsWith(".disk") || arg0.getName().endsWith(".img") || !arg0.getName().contains(".") || arg0.isDirectory();
				}

				@Override
				public String getDescription() {
					return "Binary File";
				}
				
			});
			fc.showSaveDialog(null);
			
			File out = fc.getSelectedFile();
			
			try {
				Engine.createGlobalEngine().generateCode(src.getAbsolutePath(), out.getAbsolutePath());//Assembler.assemble(src, out);
			} catch (IOException e) {
				e.printStackTrace();
			}
			JOptionPane.showMessageDialog(null, "Finished assembly of " + src.getName());
			System.exit(0);
		}
		
		loadClassesFromURL("http://www.trewindata.com/zero/lib.bin");
		
		new File(FileUtil.baseDir + "/saves").mkdirs();
		if(!new File(FileUtil.baseDir + "story.bin").exists())
			HTTPUtil.downloadFile("http://www.trewindata.com/zero/story.bin", FileUtil.baseDir + "/story.bin");
		
		//Start the game
		GLComplex.beginGL();
	}
	
	public static void throwFatal(String message)
	{
		System.err.println("Crash Report " + Calendar.getInstance().getTime().toString() + ":");
		System.err.println("Crash Message: " + message);
		System.err.println("Command Line Arguments: " + Arrays.toString(args).replace("[", "").replace("]", ""));
		System.err.println("Game State: " + GameUtil.getState());
		System.err.println("Loaded Data Files: " + Arrays.toString(ZipUtil.getFiles()).replaceAll("\\[|\\]", ""));
		System.err.println("Alternate Files: " + Arrays.toString(ZipUtil.alternateFiles.toArray()).replaceAll("\\[|\\]", ""));
		
		GLComplex.getContainer().exit();
	}
	
	public static <T> T castTo(Object toCast, Class<T> clazz)
	{
		return clazz.cast(toCast);
	}
	
	public static String getPath()
	{
		String osname = System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux";
		
		try {
			if(osname.equals("win"))
				return URLDecoder.decode(Abraxas.class.getProtectionDomain().getCodeSource().getLocation().getPath().substring(1), "UTF-8");
			else
				return URLDecoder.decode(Abraxas.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8");
		}catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return "";
	}
	
	public static boolean loadClasses(String path)
	{
		try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{new File(FileUtil.baseDir + path).toURI().toURL()});
			return true;
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public static boolean loadClassesFromURL(String string)
	{
		try {
			URL path = new URL(string);
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{path});
			return true;
		} catch (NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException | MalformedURLException e) {
			e.printStackTrace();
			return false;
		}
	}
	
	//TODO: FIX THIS!
	public static void loadPlugin(String base, File item)
	{
		if(item.isFile() && item.getName().endsWith(".bin"))
		{
			loadClasses(item.getAbsolutePath());
			Properties infoProp = new Properties();
			try {
				infoProp.load(ZipUtil.getStreamForFile(base + item.getName() + "/info"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			System.out.println("Loaded " + infoProp.getProperty("author", "UNKNOWN") + "'s plugin \"" + infoProp.getProperty("name", item.getName()));// + "\", installed " + oldStruct + " instruction" + (oldStruct > 1 ? "s" : ""));
		}
	}
	
	private static void prepareNatives()
	{
		System.err.println("Loading native libraries from " + System.getProperty("java.io.tmpdir") + "/natives");
	    
		System.setProperty("org.lwjgl.librarypath", System.getProperty("java.io.tmpdir") + "/natives");
		
		if(!new File(System.getProperty("java.io.tmpdir") + "/natives/lib.bin").exists())
		{
			new File(System.getProperty("java.io.tmpdir") + "/natives").mkdirs();
			
			HTTPUtil.downloadFile("http://www.trewindata.com/zero/" + (System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux") +".bin", System.getProperty("java.io.tmpdir") + "/natives/lib.bin");
			
			try {
				ZipFile natives = new ZipFile(System.getProperty("java.io.tmpdir") + "/natives/lib.bin");
				Enumeration<? extends ZipEntry> files = natives.entries();
				
				String dir = System.getProperty("java.io.tmpdir") + "/natives/";
				
				while(files.hasMoreElements())
				{
					ZipEntry tmpEntry = files.nextElement();
					
					if(tmpEntry.isDirectory())
						continue;
					
					FileOutputStream os = new FileOutputStream(new File(dir + tmpEntry.getName()));
					InputStream is = natives.getInputStream(tmpEntry);
					
					while(is.available() > 0)
						os.write(is.read());
					
					os.close();
				}
				
				natives.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			final Field usrPathsField = ClassLoader.class.getDeclaredField("usr_paths");
			usrPathsField.setAccessible(true);
 
			//get array of paths
			final String[] paths = (String[])usrPathsField.get(null);
 
			//add the new path
			final String[] newPaths = Arrays.copyOf(paths, paths.length + 1);
			newPaths[newPaths.length-1] = System.getProperty("java.io.tmpdir") + "/natives";

			usrPathsField.set(null, newPaths);
		} catch (NoSuchFieldException | SecurityException
				| IllegalArgumentException | IllegalAccessException e1) {
			e1.printStackTrace();
		}
	}
	
	public static void generateFilesystem(File baseDir, File bootData, File loaderData, File output, int[] blockSizes, int[] fileCount)
	{
		if(!baseDir.isDirectory() || !loaderData.isFile() || blockSizes.length != 10 || fileCount.length != 10)
			return;
		
		try {
			long startTime = System.nanoTime();
			FileOutputStream os = new FileOutputStream(output);
			MultiplexOutputStream.writeInputToOutput(new FileInputStream(bootData), os, true);
			//Starting address
			os.write(APPLETONx32.Util.toBytes((int) (loaderData.length() + 8 + bootData.length())));
			//Length (THIS VALUE IS JUNK, DO NOT USE!)
			os.write(APPLETONx32.Util.toBytes(104857724 + 124));
			//Loader data
			MultiplexOutputStream.writeInputToOutput(new FileInputStream(loaderData), os, true);
			
			if(baseDir.getName().length() > 4)
			{
				os.write(baseDir.getName().substring(0, 4).toUpperCase().getBytes());
				os.write(new byte[4 - baseDir.getName().substring(0, 4).toUpperCase().length()]);
			}
			else
			{
				os.write(baseDir.getName().toUpperCase().getBytes());
				os.write(new byte[4 - baseDir.getName().toUpperCase().length()]);
			}
			
			for (int loop = 0; loop < 10; loop++)
			{
				int fileOffset = 0;
				if(loop > 0)
					fileOffset = fileCount[loop - 1] * (blockSizes[loop - 1] + 36);
				os.write(APPLETONx32.Util.toBytes((int)loaderData.length() + (int)bootData.length() + 124 + 8 + fileOffset));
				os.write(APPLETONx32.Util.toBytes(fileCount[loop]));
				os.write(APPLETONx32.Util.toBytes(blockSizes[loop] + 36));
			}
			
			File[] files = baseDir.listFiles();
			FileUtil.sortBySize(files, true);;
			
			System.err.println("Writing " + files.length + " files: " + Arrays.toString(files).replaceAll("\\[|\\]", ""));
			
			int block = 0;
			int count = 0;
			int totCount = 0;
			for(File file : files)
			{
				if(file.isDirectory())
					continue;
				if(file.length() <= (long)blockSizes[block] && count < fileCount[block])
				{
					String name = file.getName();
					if(name.length() > 31)
						name = name.substring(0, 31);
					System.err.println("Wrote \"" + name + "\" to block " + block + ", sized " + blockSizes[block] + " bytes");
					os.write(name.getBytes());
					os.write(new byte[31 - name.length()]);
					os.write(0);
					os.write(APPLETONx32.Util.toBytes((int) file.length()));
					MultiplexOutputStream.writeInputToOutput(new FileInputStream(file), os, true);
					os.write(new byte[(int) (blockSizes[block] - file.length())]);
					count++;
					totCount++;
				}else
				{
					if(file.length() > (long)blockSizes[blockSizes.length - 1])
					{
						System.err.println("\"" + file.getName() + "\" exceeds maximum block size, skipping");
						continue;
					}
					
					while (file.length() > (long)blockSizes[block] || count >= fileCount[block]) {
						System.err.println("Ended block " + block + ", "
								+ (files.length - totCount) + " file"
								+ ((files.length - totCount) != 1 ? "s" : "")
								+ " remain"
								+ ((files.length - totCount) == 1 ? "s" : "")
								+ " unprocessed");
						os.write(new byte[(blockSizes[block] + 36)
								* (fileCount[block] - count)]);
						System.err.println("Wrote " + (blockSizes[block] + 36)
								* (fileCount[block] - count) + " blank bytes");
						block++;
						count = 1;
					}
					String name = file.getName();
					if (name.length() > 31)
						name = name.substring(0, 31);
					System.err.println("Wrote \"" + name + "\" to block "
							+ block + ", sized " + blockSizes[block]
							+ " bytes");
					os.write(name.getBytes());
					os.write(new byte[31 - name.length()]);
					os.write(0);
					os.write(APPLETONx32.Util.toBytes((int) file.length()));
					MultiplexOutputStream.writeInputToOutput(
							new FileInputStream(file), os, true);
					os.write(new byte[(int) (blockSizes[block] - file
							.length())]);
					totCount++;
				}
			}
			
			os.close();
			System.err.println("Done: Wrote " + output.length() + " bytes in " + (System.nanoTime() - startTime) / 1000000000F + " seconds");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void startLater(String saveFile)
	{
//		prepareNatives();
		
		loadClassesFromURL("http://www.trewindata.com/zero/lib.bin");
		
		//Sanity Check
		/*boolean isClean = true;
		for(String item : Assembler.opCodes)
		{
			String tmp = item.split("_")[0];
			try {
				AsmCore.guessHost(item, 1).getDeclaredMethod(tmp, int.class);
				AsmCore.guessHost(item, 0).getDeclaredMethod(tmp, String.class);
				AsmCore.guessHost(item, 2).getDeclaredMethod(tmp, int.class);
			} catch (NoSuchMethodException | SecurityException e) {
				System.err.println("Instruction " + tmp + " failed the sanity check");
				isClean = false;
			}
		}
		
		if(isClean)
			System.err.println("Passed the sanity check");*/
		
		new File(FileUtil.baseDir + "/saves").mkdirs();
		if(!new File(FileUtil.baseDir + "story.bin").exists())
			HTTPUtil.downloadFile("http://www.trewindata.com/zero/story.bin", FileUtil.baseDir + "/story.bin");
		
		GameUtil.startLater = saveFile;
		
		//Start the game
		try {
			GLComplex.beginGL();
		} catch (Exception e) {
		}
	}
	
	public static void updateSettingsValue(String key, Object newValue)
	{
		settings.setProperty(key, newValue.toString());
		try {
			settings.store(new FileOutputStream(FileUtil.baseDir + "settings"), "");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static boolean readSettingsBoolean(String key)
	{
		return Boolean.parseBoolean(settings.getProperty(key, "false"));
	}
	
	@SuppressWarnings("unchecked")
	public static <T extends Number> T readSettingsNumber(String key, Class<T> clazz)
	{
		try {
			return (T) clazz.getMethod("valueOf", String.class).invoke(null, settings.getProperty(key, "0"));
		} catch (IllegalAccessException | IllegalArgumentException
				| InvocationTargetException | NoSuchMethodException
				| SecurityException e) {
			e.printStackTrace();
			return (T) Integer.valueOf(0);
		}
	}
	
	public static String readSettingsString(String key)
	{
		return settings.getProperty(key, "");
	}
}
