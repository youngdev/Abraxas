package net.lotrek.zero.network;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.HashMap;
import java.util.Random;

import net.lotrek.zero.engine.Processor;

public class NetworkCore
{
	private static HashMap<Integer, String> addressMap = new HashMap<Integer, String>();
	private static HashMap<String, Integer> reverseMap = new HashMap<String, Integer>();
	private static String remoteAddr = "127.0.0.1";
	
	public static void setAddress(int address)
	{
		addressMap.put(address, Thread.currentThread().getName());
		reverseMap.put(Thread.currentThread().getName(), address);
		
		System.out.println("Assigned IP " + getAddress(address) + " to \"" + Thread.currentThread().getName() + "\"");
	}
	
	public static int assignAddress()
	{
		Random rng = new Random();
		int rand = 0;
		
		while(addressMap.containsKey(rand = rng.nextInt())){}
		
		addressMap.put(rand, Thread.currentThread().getName());
		
		System.out.println("Assigned IP " + getAddress(rand) + " to \"" + Thread.currentThread().getName() + "\"");
		
		return rand;
	}
	
	public static int getAddress()
	{
		return reverseMap.get(Thread.currentThread().getName());
	}
	
	public static String getAddress(int addr)
	{
		String toReturn = "";
		
		toReturn += ((addr >> 24) & 0xff) + ".";
		toReturn += ((addr >> 16) & 0xff) + ".";
		toReturn += ((addr >> 8) & 0xff) + ".";
		toReturn += ((addr >> 0) & 0xff);
		
		return toReturn;
	}
	
	public static int getAddress(String addr)
	{
		int toReturn = 0;
		String[] seg = addr.split("\\.");
		
		toReturn |= (Integer.parseInt(seg[0]) << 24) & 0xff_00_00_00;
		toReturn |= (Integer.parseInt(seg[1]) << 16) & 0xff_00_00;
		toReturn |= (Integer.parseInt(seg[2]) << 8) & 0xff_00;
		toReturn |= (Integer.parseInt(seg[3]) << 0) & 0xff;
		
		return toReturn;
	}
	
	public static void cacheRemoteAddress()
	{	
		try {
			URL whatismyip = new URL("http://checkip.amazonaws.com");
			BufferedReader in = null;
			in = new BufferedReader(new InputStreamReader(
			        whatismyip.openStream()));
			remoteAddr = in.readLine();
		} catch (IOException e) {
			System.err.println("Unable to obtain remote address!");
		}
	}
	
	public static String getRemoteAddress()
	{
		return remoteAddr;
	}
	
	public static void sendData(int ip, byte...b)
	{
//		System.out.println("Sent data to " + getAddress(ip) + " : " + Arrays.toString(b));
		
		Processor inst = Processor.getInstance(addressMap.get(ip));
		
		if(inst != null)
			inst.pushNetwork(b);
		else
			System.err.println("Network transmission failed");
	}
}
