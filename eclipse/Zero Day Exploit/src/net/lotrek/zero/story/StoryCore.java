package net.lotrek.zero.story;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Scanner;

import org.newdawn.slick.Graphics;

import net.lotrek.zero.Abraxas;
import net.lotrek.zero.engine.Engine;
import net.lotrek.zero.graphics.GLComplex;
import net.lotrek.zero.graphics.GraphicsUtil;
import net.lotrek.zero.graphics.RenderAction;
import net.lotrek.zero.tools.AudioUtil;
import net.lotrek.zero.tools.FileUtil;
import net.lotrek.zero.tools.GameUtil;
import net.lotrek.zero.tools.TimeUtil;

public class StoryCore
{
	public static class StoryScripts
	{
		public static void LD_IMG(String args)
		{
			try {
				GameUtil.renderQueue.add(new RenderAction<GraphicsUtil>(GraphicsUtil.class.getDeclaredMethod("displayLoadingImageSCRIPT", String.class, Graphics.class, long.class, int.class), null, false, args.split(",")[0].trim().replace("\"", ""), GLComplex.getContainer().getGraphics(), Long.parseLong(args.split(",")[1].trim()), Integer.parseInt(args.split(",")[2].trim())));
			} catch (NoSuchMethodException | SecurityException e) {
				e.printStackTrace();
			}
			SUS("");
		}
		
		public static void LD_VIDEO(String args)
		{
			try {
				GameUtil.renderQueue.add(new RenderAction<GameUtil>(GameUtil.class.getDeclaredMethod("playVideo", String.class), null, false, args.replace("\"", "")));
			} catch (NoSuchMethodException | SecurityException e) {
				e.printStackTrace();
			}
			SUS("");
		}
		
		public static void EX(String args)
		{
			if(Engine.getPlayer() != null)
				Engine.getPlayer().setSuspended(!Boolean.parseBoolean(args.trim()));
		}
		
		public static void SND_MAIL(String args)
		{
			
		}
		
		public static void ADD_DISK(String args)
		{
		}
		
		public static void RM_DISK(String args)
		{
		}
		
		public static void ADD_SRV(final String args)
		{
			String path = args.trim().replace("\"", "");
			Properties srvFile = new Properties();
			try {
				srvFile.load(FileUtil.getFile(path));
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			Engine.createGlobalEngine(srvFile.getProperty("bios"), Integer.parseInt(srvFile.getProperty("mem")), srvFile.getProperty("disks").split(";"), srvFile.getProperty("ip", "0.0.0.0")).start(srvFile.getProperty("name"));
		}
		
		public static void RM_SRV(String args)
		{
			Engine.getEngine(args.trim().replace("\"", "")).terminate();
		}
		
		public static void HLT(String args)
		{
			StoryCore.haltStory();
		}
		
		public static void SUS(String args)
		{
			StoryCore.suspendStory(true);
		}
		
		public static void SND_PLAY(String args)
		{
			AudioUtil.loadSound(args.trim().replace("\"", ""), true, false);
		}
		
		public static void SND_STOP(String args)
		{
			AudioUtil.stopSound(args.trim().replace("\"", ""));
		}
		
		public static void MUS_PLAY(String args)
		{
			AudioUtil.loadMusic(args.trim().replace("\"", ""), true, false);
		}
		
		public static void MUS_STOP(String args)
		{
			SND_STOP(args);
		}
		
		public static void DO_LOG(String args)
		{
			StoryCore.doLog(StoryCore.applyVar(args.trim().replace("\"", "")));
		}
		
		public static void SET_LOG(String args)
		{
			StoryCore.setLog(args.trim().replace("\"", ""));
		}
		
		public static void GOTO(String args)
		{
			if(!args.trim().startsWith("\""))
				StoryCore.jump(Integer.parseInt(args.trim()));
			else
				if(!args.trim().contains("#"))
					StoryCore.jump(args.trim().replace("\"", ""));
				else
					StoryCore.jump(StoryCore.getVar(args.trim().replace("\"", "").replace("#", "")));
		}
		
		public static void SET_VAR(String args)
		{
			String var = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			StoryCore.setVar(var, val);
		}
		
		public static void DO_MATH(String args)
		{
			String op = args.trim().split(",")[0].trim().replace("\"", "").toUpperCase();
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			int arg = args.trim().split(",")[2].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[2].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[2].trim());
			
			switch(op)
			{
			case "ADD":
				StoryCore.setVar(var, StoryCore.getVar(var) + arg);
				return;
			case "SUB":
				StoryCore.setVar(var, StoryCore.getVar(var) - arg);
				return;
			case "MUL":
				StoryCore.setVar(var, StoryCore.getVar(var) * arg);
				return;
			case "DIV":
				StoryCore.setVar(var, StoryCore.getVar(var) / arg);
				return;
			case "MOD":
				StoryCore.setVar(var, StoryCore.getVar(var) % arg);
				return;
			case "AND":
				StoryCore.setVar(var, StoryCore.getVar(var) & arg);
				return;
			case "OR":
				StoryCore.setVar(var, StoryCore.getVar(var) | arg);
				return;
			case "XOR":
				StoryCore.setVar(var, StoryCore.getVar(var) ^ arg);
				return;
			case "NOR":
				StoryCore.setVar(var, StoryCore.getVar(var) | ~arg);
				return;
			case "NAND":
				StoryCore.setVar(var, StoryCore.getVar(var) & ~arg);
				return;
			case "LSL":
				StoryCore.setVar(var, StoryCore.getVar(var) << arg);
				return;
			case "LSR":
				StoryCore.setVar(var, StoryCore.getVar(var) >> arg);
				return;
			case "ASR":
				StoryCore.setVar(var, StoryCore.getVar(var) >>> arg);
				return;
			case "NOT":
				StoryCore.setVar(var, ~StoryCore.getVar(var));
				return;
			}
		}
		
		public static void SET_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			StoryCore.setField(field, val);
		}
		
		public static void GET_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.setVar(var, StoryCore.getField(field));
		}
		
		public static void RM_FIELD(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			StoryCore.removeField(field);
		}
		
		public static void IF(String args)
		{
			String expr = args.trim().split(",")[0].trim().replace("\"", ""), label = args.trim().split(",")[1].trim().replace("\"", ""), op = expr.split(" ")[1];
			int arg1 = expr.split(" ")[0].trim().contains("#") ? StoryCore.getVar(expr.split(" ")[0].trim().replace("#", "")) : Integer.parseInt(expr.split(" ")[0].trim()), arg2 = expr.split(" ")[2].trim().contains("#") ? StoryCore.getVar(expr.split(" ")[2].trim().replace("#", "")) : Integer.parseInt(expr.split(" ")[2].trim());
			boolean result = false;
			
			switch(op)
			{
			case "==":
				result = arg1 == arg2;
				break;
			case "!=":
				result = arg1 != arg2;
				break;
			case "<=":
				result = arg1 <= arg2;
				break;
			case ">=":
				result = arg1 >= arg2;
				break;
			case "<":
				result = arg1 < arg2;
				break;
			case ">":
				result = arg1 > arg2;
				break;
			}
			
			if(result)
				StoryCore.jump(label);
		}
		
		public static void GET_DATE(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			String var = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.setVar(var, TimeUtil.get(field));
		}
		
		public static void SET_DATE(String args)
		{
			String field = args.trim().split(",")[0].trim().replace("\"", "");
			int val = args.trim().split(",")[1].trim().contains("\"") ? StoryCore.getVar(args.trim().split(",")[1].trim().replace("\"", "")) : Integer.parseInt(args.trim().split(",")[1].trim());
			
			TimeUtil.set(field, val);
		}
		
		public static void ADD_PLUGIN(String args)
		{
			Abraxas.loadPlugin("", new File(FileUtil.baseDir + args.replace("\"", "")));
			DO_LOG("Loaded plugin " + args);
		}
		
		public static void SLEEP(String args)
		{
			try {
				Thread.sleep(Long.parseLong(args.trim()));
			} catch (NumberFormatException | InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		public static void CL_EVENT(String args)
		{
			String[] elem = args.trim().split(",");
			int hour = Integer.parseInt(elem[0].trim()), minute = Integer.parseInt(elem[1].trim()), year = Integer.parseInt(elem[2].trim()), day = Integer.parseInt(elem[3].trim()), month = Integer.parseInt(elem[4].trim());
			String label = elem[5].trim().replace("\"", "");
			
			StoryCore.addEvent(new Event.CalEvent(hour, minute, year, day, month, label));
		}
		
		public static void HK_EVENT(String args)
		{
			String name = args.trim().split(",")[0].trim().replace("\"", ""), label = args.trim().split(",")[1].trim().replace("\"", "");
			
			StoryCore.addEvent(new Event.GoalEvent(name, label));
		}
	}
	
	private static String storyZip, saveFile;
	private volatile static boolean doHalt, suspend;
	private static LinkedList<String> scriptLines;
	private static HashMap<String, Integer> labelLoc = new HashMap<String, Integer>(), vars = new HashMap<String, Integer>();
	private static ArrayList<Event> events = new ArrayList<Event>();
	private static int executePosition = 0;
	private static PrintStream logFile;
	private static Properties saveData;
	
	public static void beginStory(Properties save, String saveFile)
	{
		saveData = save;
		StoryCore.saveFile = saveFile;
		
		storyZip = save.getProperty("story");
		Scanner lines = new Scanner(FileUtil.getFile(storyZip+"/script"));

		while(lines.hasNextLine())
			scriptLines.add(lines.nextLine().trim());
		
		lines.close();
		
		int tmpId = 0;
		for(String tmpLine : scriptLines)
		{
			if(tmpLine.trim().startsWith(":"))
				labelLoc.put(tmpLine.replace(":", ""), tmpId);
			tmpId++;
		}
		
		while(!doHalt && executePosition < scriptLines.size())
		{
			if(!suspend)
			{
				String toParse = scriptLines.get(executePosition);
				
				executePosition++;
				if(toParse.isEmpty() || toParse.startsWith("//") || toParse.startsWith(";") || toParse.startsWith(":"))
					continue;
				
				try {
					StoryScripts.class.getDeclaredMethod(toParse.split(" ")[0].toUpperCase(), String.class).invoke(null, toParse.replace(toParse.split(" ")[0] + " ", ""));
				} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
					e.printStackTrace();
				}
			}else
			{
				Event[] tmpEvents = events.toArray(new Event[0]);
				for(Event event : tmpEvents)
					event.evaluate();
			}
		}
		
		while(!doHalt);
		
		if(GameUtil.getState().contains("ingame"))
			GameUtil.exitRuntime();
	}
	
	public static void haltStory()
	{
		saveData.setProperty("time", TimeUtil.getTimeString());
		try {
			saveData.store(new FileOutputStream(new File(FileUtil.baseDir + saveFile)), "");
		} catch (IOException e) {
			e.printStackTrace();
		}
		AudioUtil.stopAll(false);
		doHalt = true;
	}
	
	public static boolean doHalt()
	{
		return doHalt;
	}
	
	public static void suspendStory(boolean val)
	{
		suspend = val;
	}
	
	public static int getLabel(String name)
	{
		return labelLoc.containsKey(name) ? labelLoc.get(name) : -1;
	}
	
	public static void setLog(String file)
	{
		try {
			logFile = new PrintStream(new FileOutputStream(new File(FileUtil.baseDir + file)));
			doLog("Set log file to \"" + file + "\"");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public static void doLog(String text)
	{
		if(logFile != null)
			logFile.println("[" + new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()) + " : " + executePosition + "] " + text);
	}
	
	public static void jump(int line)
	{
		suspendStory(false);
		executePosition = line;
	}
	
	public static void jump(String label)
	{
		suspendStory(false);
		executePosition = labelLoc.get(label);
	}
	
	public static void jump(String label, Event toDestroy)
	{
		suspendStory(false);
		executePosition = labelLoc.get(label);
		destroyEvent(toDestroy);
	}
	
	public static void setVar(String name, int val)
	{
		vars.put(name, val);
	}
	
	public static int getVar(String name)
	{
		return vars.containsKey(name) ? vars.get(name) : 0;
	}
	
	public static void clear()
	{
		labelLoc.clear();
		vars.clear();
		executePosition = 0;
		logFile = null;
		suspend = false;
		doHalt = false;
		storyZip = "";
		if(scriptLines != null)
			scriptLines.clear();
		scriptLines = new LinkedList<String>();
		events.clear();
	}
	
	public static void setField(String var, int val)
	{
		saveData.setProperty(var, "" + val);
	}
	
	public static int getField(String var)
	{
		return Integer.parseInt(saveData.getProperty(var, "0"));
	}
	
	public static void removeField(String var)
	{
		saveData.remove(var);
	}
	
	public static String applyVar(String args)
	{
		for(String var : vars.keySet())
			args = args.replace("#" + var, vars.get(var) + "");
		
		return args;
	}
	
	public static void addEvent(Event item)
	{
		events.add(item);
	}
	
	public static void destroyEvent(Event item)
	{
		events.remove(item);
	}
}
