package net.lotrek.zero.story;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Scanner;

import net.lotrek.zero.engine.Instructions;
import net.lotrek.zero.tools.AudioUtil;
import net.lotrek.zero.tools.FileUtil;
import net.lotrek.zero.tools.GameUtil;
import net.lotrek.zero.tools.TimeUtil;

public class StoryCore
{
	private static String storyZip, saveFile;
	private volatile static boolean doHalt, suspend;
	private static LinkedList<String> scriptLines = new LinkedList<String>();
	private static HashMap<String, Integer> labelLoc = new HashMap<String, Integer>(), vars = new HashMap<String, Integer>();
	private static ArrayList<Event> events = new ArrayList<Event>();
	private static int executePosition = 0;
	private static PrintStream logFile;
	private static Properties saveData;
	
	public static void beginStory(Properties save, String saveFile)
	{
		saveData = save;
		StoryCore.saveFile = saveFile;
		
		//		System.out.println("BEGIN : " + doHalt);
		storyZip = save.getProperty("story");
		Scanner lines = new Scanner(FileUtil.getFile(storyZip+"/script"));

		while(lines.hasNextLine())
			scriptLines.add(lines.nextLine().trim());
		
		lines.close();
		
		int tmpId = 0;
		for(String tmpLine : scriptLines)
		{
			if(tmpLine.trim().startsWith(":"))
				labelLoc.put(tmpLine.replace(":", ""), tmpId);
			tmpId++;
		}
		
		while(!doHalt && executePosition < scriptLines.size())
		{
			if(!suspend)
			{
				String toParse = scriptLines.get(executePosition);
//				System.out.println(toParse);
				executePosition++;
				if(toParse.isEmpty() || toParse.startsWith("//") || toParse.startsWith(";") || toParse.startsWith(":"))
					continue;
				
				try {
					Instructions.StoryScripts.class.getDeclaredMethod(toParse.split(" ")[0].toUpperCase(), String.class).invoke(null, toParse.replace(toParse.split(" ")[0] + " ", ""));
				} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
					e.printStackTrace();
				}
			}else
			{
				for(Event event : events)
					event.evaluate();
			}
		}
		
		while(!doHalt);
		
		GameUtil.exitRuntime();
		
//		System.out.println("CLEARED ALL");
	}
	
	public static void haltStory()
	{
//		System.err.println("TERMINATE STORY");
		saveData.setProperty("time", TimeUtil.getTimeString());
		try {
			saveData.store(new FileOutputStream(new File(FileUtil.baseDir + saveFile)), "");
		} catch (IOException e) {
			e.printStackTrace();
		}
		AudioUtil.stopAll();
		doHalt = true;
	}
	
	public static boolean doHalt()
	{
		return doHalt;
	}
	
	public static void suspendStory(boolean val)
	{
//		System.out.println("SUSPEND: " + val);
		suspend = val;
	}
	
	public static int getLabel(String name)
	{
		return labelLoc.containsKey(name) ? labelLoc.get(name) : -1;
	}
	
	public static void setLog(String file)
	{
		try {
			logFile = new PrintStream(new FileOutputStream(new File(FileUtil.baseDir + file)));
			doLog("Set log file to \"" + file + "\"");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public static void doLog(String text)
	{
		if(logFile != null)
			logFile.println("[" + new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()) + " : " + executePosition + "] " + text);
	}
	
	public static void jump(int line)
	{
		suspendStory(false);
		executePosition = line;
	}
	
	public static void jump(String label)
	{
		suspendStory(false);
		executePosition = labelLoc.get(label);
	}
	
	public static void jump(String label, Event toDestroy)
	{
		suspendStory(false);
		executePosition = labelLoc.get(label);
		destroyEvent(toDestroy);
	}
	
	public static void setVar(String name, int val)
	{
		vars.put(name, val);
	}
	
	public static int getVar(String name)
	{
		return vars.containsKey(name) ? vars.get(name) : 0;
	}
	
	public static void clear()
	{
		labelLoc.clear();
		vars.clear();
		executePosition = 0;
		logFile = null;
		suspend = false;
		doHalt = false;
		storyZip = "";
		scriptLines.clear();
		events.clear();
	}
	
	public static void setField(String var, int val)
	{
		saveData.setProperty(var, "" + val);
	}
	
	public static int getField(String var)
	{
		return Integer.parseInt(saveData.getProperty(var, "0"));
	}
	
	public static void removeField(String var)
	{
		saveData.remove(var);
	}
	
	public static String applyVar(String args)
	{
		for(String var : vars.keySet())
			args = args.replace("#" + var, vars.get(var) + "");
		
		return args;
	}
	
	public static void addEvent(Event item)
	{
		events.add(item);
	}
	
	public static void destroyEvent(Event item)
	{
		events.remove(item);
	}
}
