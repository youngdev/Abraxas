package net.lotrek.zero.tools;

import java.io.IOException;
import java.io.RandomAccessFile;

import net.lotrek.zero.engine.Processor;

public class MemoryUtil
{
	public static int getInstruction(int addr)
	{
		return Processor.getInstance().getMemory(addr++) & Processor.getInstance().getMemory(addr++) << 8 & Processor.getInstance().getMemory(addr++) << 16 & Processor.getInstance().getMemory(addr++) << 24;
	}
	
	public static void loadString(int addr, String toLoad)
	{
		Processor.getInstance().setMemorySegment(addr, toLoad.getBytes());
	}
	
	public static void loadFile(int addr, long start, long length, RandomAccessFile toLoad) throws IOException
	{
		toLoad.seek(start);
		toLoad.read(Processor.getInstance().memory, addr, (int) length);
	}
	
	public static void loadDiskRegion(int memStart, int diskStart, int length, int id)
	{
		byte[] mem = new byte[length];
		
		try {
			Processor.getInstance().getDisk(id).seek(diskStart);
			Processor.getInstance().getDisk(id).read(mem);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Processor.getInstance().setMemorySegment(memStart, mem);
	}
	
	public static void saveDiskRegion(int memStart, int diskStart, int length, int id)
	{
		byte[] mem = Processor.getInstance().getMemorySegment(memStart, length);;
		
		try {
			Processor.getInstance().getDisk(id).seek(diskStart);
			Processor.getInstance().getDisk(id).write(mem);
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
	}
}
