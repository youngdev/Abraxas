package net.lotrek.zero.tools;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;
import java.util.Scanner;

import net.lotrek.zero.ZeroDayExploit;
import net.lotrek.zero.engine.Assembler;
import net.lotrek.zero.graphics.GraphicsUtil;

public class DevShell
{
	public static class Commands
	{
		public static Properties alias = new Properties();
		
		public static void batch(String[] args)
		{
			if(args.length == 1)
			{
				String[] com = args[0].replace("\"", "").split(";");
				
				for(String line : com)
				{
					if(Commands.alias.containsKey(line.trim()))
						line = Commands.alias.getProperty(line.trim());
					try {
						Commands.class.getDeclaredMethod(line.split(" ")[0], String[].class).invoke(null, (Object)(line.substring(line.split(" ")[0].length()).trim().split("(?<=\") *(?=\")")[0].isEmpty() ? new String[0] : line.substring(line.split(" ")[0].length()).trim().split("[ ]+(?=([^\"]*\"[^\"]*\")*[^\"]*$)")));
					} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
						if(e instanceof NoSuchMethodException)
							println("BATCH: \"" + line.split(" ")[0] + "\" is not a valid command");
						else if(e instanceof InvocationTargetException)
						{
							println("BATCH: \"" + line.split(" ")[0] + "\" exists, but threw this error:");
							((InvocationTargetException)e).getCause().printStackTrace();
						}else
						{
							println("BATCH: \"" + line.split(" ")[0] + "\" produced an impossible error");
							e.printStackTrace();
						}
					}
				}
			}else
				println("BATCH: Wrong number of arguments");
		}
		
		public static void bin(String[] args)
		{
			if(args.length == 2)
				try {
					Assembler.assembleBinary(new File(fixPath(args[0])), new File(fixPath(args[1])));
				} catch (IOException e) {
					e.printStackTrace();
				}
			else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void img(String[] args)
		{
			if(args.length == 2)
				if (!args[1].endsWith(".raw"))
					GraphicsUtil.genBitmap(fixPath(args[0]), fixPath(args[1]));
				else
					GraphicsUtil.genImage(fixPath(args[0]), fixPath(args[1]));
				else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void exec(String[] args)
		{
			if(args.length == 1)
			{
				try {
					new ProcessBuilder(fixPath(args[0].split(" ")[0].replace("\"", ""))).inheritIO().start().waitFor();
				} catch (IOException | InterruptedException e1) {
					try {
						new ProcessBuilder(args[0].split(" ")[0].replace("\"", "")).inheritIO().start().waitFor();
					} catch (InterruptedException | IOException e) {
						println("ERROR: Attempting to execute \"" + args[0] + "\" threw an exception: " + e.getClass().getCanonicalName());
					}
				}
			}else if(args.length == 0)
			{
				try {
					new ProcessBuilder("cmd").inheritIO().start().waitFor();
				} catch (IOException | InterruptedException e) {
					e.printStackTrace();
				}
			}else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void fs(String[] args)
		{
			if(args.length == 4)
				ZeroDayExploit.generateFilesystem(new File(fixPath(args[0])), new File(fixPath(args[1])), new File(fixPath(args[2])), new File(fixPath(args[3])), new int[]{4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 5242880}, new int[]{25600, 12800, 6400, 3200, 1600, 800, 400, 200, 100, 20});
			else
				System.out.println("ERROR: Wrong number of arguments");
		}
		
		public static void grep(String[] args)
		{
			if(args.length == 2)
			{
				PrintStream out = System.out;
				PrintStream err = System.err;
				class FilteredPrintStream extends PrintStream
				{
					private String filterBy;
					
					public FilteredPrintStream(OutputStream out, String toFilter)
					{
						super(out);
						this.filterBy = toFilter;
					}
					
					public void println(String x)
					{
						this.println((Object)x);
					}
					
					public void println(Object x)
					{
						if (x instanceof String)
							if (((String)x).contains(filterBy))
								super.println(x);
					}
				}
				System.setOut(new FilteredPrintStream(out, args[0].replace("\"", "")));
				System.setErr(new FilteredPrintStream(err, args[0].replace("\"", "")));
				
				String line = args[1].replace("\"", "");
				
				if(Commands.alias.containsKey(line.trim()))
					line = Commands.alias.getProperty(line.trim());
				try {
					Commands.class.getDeclaredMethod(line.split(" ")[0], String[].class).invoke(null, (Object)(line.substring(line.split(" ")[0].length()).trim().split("(?<=\") *(?=\")")[0].isEmpty() ? new String[0] : line.substring(line.split(" ")[0].length()).trim().split("[ ]+(?=([^\"]*\"[^\"]*\")*[^\"]*$)")));
				} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
					System.setOut(out);
					System.setErr(err);
					if(e instanceof NoSuchMethodException)
						println("GREP: \"" + line.split(" ")[0] + "\" is not a valid command");
					else if(e instanceof InvocationTargetException)
					{
						println("GREP: \"" + line.split(" ")[0] + "\" exists, but threw this error:");
						((InvocationTargetException)e).getCause().printStackTrace();
					}else
					{
						println("GREP: \"" + line.split(" ")[0] + "\" produced an impossible error");
						e.printStackTrace();
					}
				}
				
				System.setOut(out);
				System.setErr(err);
			}else
				println("GREP: Wrong number of arguments");
		}
		
		public static void open(String[] args)
		{
			if(args.length == 1)
				try {
					Desktop.getDesktop().open(new File(fixPath(args[0])));
				} catch (IOException e) {
					e.printStackTrace();
				}
			else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void dasm(String[] args)
		{
			if(args.length == 2)
				try {
					Assembler.disasemble(new File(fixPath(args[0])), new File(fixPath(args[1])));
				} catch (IOException e) {
					e.printStackTrace();
				}
			else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void asm(String[] args)
		{
			if(args.length == 2)
				try {
					Assembler.assemble(new File(fixPath(args[0])), new File(fixPath(args[1])));
				} catch (IOException e) {
					e.printStackTrace();
				}
			else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void start(String[] args)
		{
			if(args.length >= 1)
			{
				String[] gameArgs = new String[args.length - 1];
				System.arraycopy(args, 1, gameArgs, 0, gameArgs.length);
				ZeroDayExploit.clearKeys();
				for(String arg : gameArgs)
					ZeroDayExploit.setKey(arg, true);
				ZeroDayExploit.args = gameArgs;
				ZeroDayExploit.startLater(args[0]);
			}else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void alias(String[] args)
		{
			if(args.length == 0)
				for(Object term : alias.keySet())
					println(term + " = " + alias.get(term));
			else if(args.length == 1)
				if(args[0].trim().equals("--clear"))
					alias.clear();
				else if(alias.containsKey(args[0].trim()))
					alias.remove(args[0].trim());
				else
					println("ERROR: \"" + args[0].trim() + "\" doesn't mean anything");
			else if(args.length == 2)
			{
				alias.setProperty(args[0], args[1].replace("\"", "").trim());
				println("Added " + args[0] + " as an alias for " + args[1].replace("\"", "").trim());
			}else
			{
				println("ERROR: Wrong number of arguments");
			}
		}
		
		public static void cd(String[] args)
		{
			if(args.length == 1 && !args[0].contains(":\\"))
			{
				try {
					if(new File((FileUtil.baseDir + args[0] + "\\").replace("\\.\\", "\\")).isDirectory())
						FileUtil.baseDir = new File((FileUtil.baseDir + args[0] + "\\").replace("\\.\\", "\\").replace("\"", "")).getCanonicalPath() + "\\";
					else
						println("ERROR: \"" + new File((FileUtil.baseDir + args[0] + "\\").replace("\\.\\", "\\").replace("\"", "")).getCanonicalPath() + "\" is not a directory");
				} catch (IOException e) {
					e.printStackTrace();
				}
				
			}
			else if(args.length == 1 && args[0].contains(":\\"))
				try {
					if(new File(args[0].replace("\"", "")).isDirectory())
						FileUtil.baseDir = new File(args[0].replace("\"", "")).getCanonicalPath();
					else
						println("ERROR: \"" + new File(args[0].replace("\"", "")).getCanonicalPath() + "\" is not a directory");
				} catch (IOException e) {
					e.printStackTrace();
				}
			else
				println("ERROR: Wrong number of arguments");
		}
		
		public static void ls(String[] args)
		{
			if(args.length == 1)
				if(new File(fixPath(args[0].replace("\"", ""))).getAbsoluteFile().isDirectory())
					for(File file : new File(fixPath(args[0].replace("\"", ""))).getAbsoluteFile().listFiles())
						try {
							String type = null;//file.getName().endsWith("dmp") ? null : Files.probeContentType(file.toPath());
							println(file.getName() + " :" + (file.isDirectory() ? " directory : " + file.list().length + (file.list().length == 1 ? " child" : " children") : " " + (type == null ? "file : " : type + " : ") + file.length() + " bytes"));
						} catch (Exception e) {
							e.printStackTrace();
						}
				else
					println("ERROR: \"" + new File(fixPath(args[0].replace("\"", ""))).getAbsolutePath() + "\" is not a directory");
			else if(args.length == 0)
				if(new File(fixPath(".")).getAbsoluteFile().isDirectory())
					for(File file : new File(fixPath(".")).getAbsoluteFile().listFiles())
						try {
							String type = null;//file.getName().endsWith("dmp") ? null : Files.probeContentType(file.toPath());
							println(file.getName() + " :" + (file.isDirectory() ? " directory : " + file.list().length + (file.list().length == 1 ? " child" : " children") : " " + (type == null ? "file : " : type + " : ") + file.length() + " bytes"));
						} catch (Exception e) {
							e.printStackTrace();
						}
				else
					println("ERROR: \"" + new File(fixPath(".")).getAbsolutePath() + "\" is not a directory");
			else
				println("ERROR: Wrong number of arguments");
		}
		
		private static String fixPath(String path)
		{
			path = path.replace("\"", "");
			try {
				if(path.contains(":\\"))
					return new File(path).getCanonicalPath();
				else
					return new File(FileUtil.baseDir + (FileUtil.baseDir.trim().isEmpty() ? "" : "\\") + path).getCanonicalPath();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return path;
		}
	}
	
	public static void initShell()
	{
		try {
			Commands.alias.load(new FileInputStream(new File(Commands.fixPath("shell"))));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		Scanner input = new Scanner(System.in);
		print(new File(FileUtil.baseDir).getAbsolutePath() + " $ ");
		String line;
		while(!(line = input.nextLine()).trim().equals("exit"))
		{
			if(Commands.alias.containsKey(line.trim()))
				line = (String) Commands.alias.get(line.trim());
			try {
				Commands.class.getDeclaredMethod(line.split(" ")[0], String[].class).invoke(null, (Object)(line.substring(line.split(" ")[0].length()).trim().split("(?<=\") *(?=\")")[0].isEmpty() ? new String[0] : line.substring(line.split(" ")[0].length()).trim().split("[ ]+(?=([^\"]*\"[^\"]*\")*[^\"]*$)")));
			} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
				if(e instanceof NoSuchMethodException)
					println("ERROR: \"" + line.split(" ")[0] + "\" is not a valid command");
				else if(e instanceof InvocationTargetException)
				{
					println("ERROR: \"" + line.split(" ")[0] + "\" exists, but threw this error:");
					((InvocationTargetException)e).getCause().printStackTrace();
				}else
				{
					println("ERROR: \"" + line.split(" ")[0] + "\" produced an impossible error");
					e.printStackTrace();
				}
			}
			print(new File(FileUtil.baseDir).getAbsolutePath() + " $ ");
		}
		
		println("exit");
		
		input.close();
		
		try {
			Commands.alias.store(new FileOutputStream(new File("shell")), "DevShell alias directory");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private static void print(Object toPrint)
	{
		System.out.print(toPrint);
		System.out.flush();
	}
	
	private static void println(Object toPrint)
	{
		System.out.println(toPrint);
		System.out.flush();
	}
}
