package net.lotrek.zero.tools;

import java.util.Calendar;
import java.util.GregorianCalendar;

public class TimeUtil
{
	private static GregorianCalendar time = new GregorianCalendar();
	private static int timeScale;
	private static long lastTime;
	
	public static void initTime(String value)
	{
		String[] elements = value.split("\\|");
		time.set(Integer.parseInt(elements[2]), Integer.parseInt(elements[1]), Integer.parseInt(elements[0]), Integer.parseInt(elements[3]), Integer.parseInt(elements[4]));
		timeScale = Integer.parseInt(elements[5]);
		lastTime = System.currentTimeMillis();
	}
	
	public static String getTimeString()
	{
		return get("DAY_OF_MONTH") + "|" + get("MONTH") + "|" + get("YEAR") + "|" + get("HOUR_OF_DAY") + "|" + get("MINUTE") + "|" + timeScale;
	}
	
	public static String getLockedTimeString()
	{
		return getLocked("DAY_OF_MONTH") + "|" + getLocked("MONTH") + "|" + getLocked("YEAR") + "|" + getLocked("HOUR_OF_DAY") + "|" + getLocked("MINUTE") + "|" + timeScale;
	}
	
	public static void doTimeTick()
	{
		int timeDiff = (int) ((System.currentTimeMillis() - lastTime) * timeScale);
		
		time.add(Calendar.MILLISECOND, timeDiff);
		
		lastTime = System.currentTimeMillis();
	}
	
	public static int get(String element)
	{
		if(element.equals("SCALE"))
			return timeScale;
		
		try {
			int elemVal = Calendar.class.getDeclaredField(element).getInt(null);
			
			return time.get(elemVal);
		} catch (IllegalArgumentException | IllegalAccessException
				| NoSuchFieldException | SecurityException e) {
			e.printStackTrace();
			return -1;
		}
	}
	
	public static void set(String element, int val)
	{
		if(element.equals("SCALE"))
			timeScale = val;
		
		try {
			int elemVal = Calendar.class.getDeclaredField(element).getInt(null);
			
			time.set(elemVal, val);
		} catch (IllegalArgumentException | IllegalAccessException
				| NoSuchFieldException | SecurityException e) {
			e.printStackTrace();
		}
	}
	
	public static int getLocked(String element)
	{
		try {
			int elemVal = Calendar.class.getDeclaredField(element).getInt(null);
			
			return Calendar.getInstance().get(elemVal);
		} catch (IllegalArgumentException | IllegalAccessException
				| NoSuchFieldException | SecurityException e) {
			e.printStackTrace();
			return -1;
		}
	}
	
	public static void setLocked(String element, int val)
	{
		try {
			int elemVal = Calendar.class.getDeclaredField(element).getInt(null);
			
			Calendar.getInstance().set(elemVal, val);
		} catch (IllegalArgumentException | IllegalAccessException
				| NoSuchFieldException | SecurityException e) {
			e.printStackTrace();
		}
	}
}
