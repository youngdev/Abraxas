package net.lotrek.zero.tools;

import java.io.File;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

public class AdvancedZipUtil
{
	private static URLClassLoader loader = (URLClassLoader) ClassLoader.getSystemClassLoader();
	
	public static void addZip(String path)
	{
		if(new File(FileUtil.baseDir + path.replace(".bin", "")).isDirectory())
			path = path.replace(".bin", "");
		
		try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
			method.setAccessible(true);
			method.invoke(loader, new File(FileUtil.baseDir + path).toURI().toURL());
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
	}
	
	public static void addZip(String url, String altDir)
	{
		try {
			URL path = new URL(url);
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
			method.setAccessible(true);
			method.invoke(loader, path);
			method.invoke(loader, new File(FileUtil.baseDir + altDir).toURI().toURL());
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
	}
	
	public static void addRemoteZip(String url)
	{
		try {
			URL path = new URL(url);
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(loader, path);
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
	}
	
	public static InputStream getFileFromPool(String path)
	{
		return loader.getResourceAsStream(path);
	}
	
	public static boolean testForFile(String name)
	{
		return loader.getResource(name) != null;
	}
}
