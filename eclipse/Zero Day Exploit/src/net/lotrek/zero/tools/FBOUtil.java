package net.lotrek.zero.tools;

import java.nio.ByteBuffer;
import java.util.HashMap;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.EXTFramebufferObject;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GLContext;
import org.newdawn.slick.opengl.TextureImpl;

public class FBOUtil
{
	private static HashMap<String, Integer[]> fbo = new HashMap<String, Integer[]>();
	
	public static boolean isFBOSupported()
	{
		return GLContext.getCapabilities().GL_EXT_framebuffer_object;
	}
	
	public static void createFBO(String name)
	{
		int obj = EXTFramebufferObject.glGenFramebuffersEXT();
		int texture = GL11.glGenTextures();
		
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
	    
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);

		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_NEAREST);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_NEAREST);
    
		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, Display.getWidth(), Display.getHeight(), 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, (ByteBuffer)null);
		
		
		EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, obj);
		EXTFramebufferObject.glFramebufferTexture2DEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, EXTFramebufferObject.GL_COLOR_ATTACHMENT0_EXT, GL11.GL_TEXTURE_2D, texture, 0);
		
		//Verify integrity
		int framebuffer = EXTFramebufferObject.glCheckFramebufferStatusEXT( EXTFramebufferObject.GL_FRAMEBUFFER_EXT ); 
		switch ( framebuffer ) {
			case EXTFramebufferObject.GL_FRAMEBUFFER_COMPLETE_EXT:
				break;
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT exception");
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT exception");
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT exception");
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT exception");
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT exception");
			case EXTFramebufferObject.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT:
				throw new RuntimeException( "FrameBuffer: " + obj
						+ ", has caused a GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT exception");
			default:
				throw new RuntimeException( "Unexpected reply from glCheckFramebufferStatusEXT: " + framebuffer);
		}
		
		EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, obj);
		GL11.glPushAttrib(GL11.GL_VIEWPORT_BIT);
		GL11.glViewport(0, 0, Display.getWidth(), Display.getHeight());
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
		unbindFBO();
		
		fbo.put(name, new Integer[]{obj, texture});
	}
	
	public static void bindFBO(String name)
	{
		if(!fbo.containsKey(name))
		{
			createFBO(name);
			System.err.println("\"" + name + "\" does not exist; creating " + fbo.get(name)[1]);
		}
		
		int obj = fbo.get(name)[0];
		EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, obj);
	}
	
	public static int getFBOTexture(String name)
	{
		if(fbo.containsKey(name))
			return fbo.get(name)[1];
		
		createFBO(name);
		System.err.println("\"" + name + "\" does not exist; creating " + fbo.get(name)[1]);
		
		return fbo.get(name)[1];
	}
	
	public static void renderFBO(String name)
	{
		GL11.glDisable(GL11.GL_DEPTH_TEST);
		
		int texture = getFBOTexture(name);
		
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
		
		GL11.glColor4f(1, 1, 1, 1);
		
		GL11.glBegin(GL11.GL_QUADS);
		{
			GL11.glTexCoord2f(0, 1);
			GL11.glVertex2f(0, 0);

			GL11.glTexCoord2f(1, 1);
			GL11.glVertex2f(Display.getWidth(), 0);

			GL11.glTexCoord2f(1, 0);
			GL11.glVertex2f(Display.getWidth(), Display.getHeight());

			GL11.glTexCoord2f(0, 0);
			GL11.glVertex2f(0, Display.getHeight());
		}
		GL11.glEnd();
		
		TextureImpl.unbind();
	}
	
	public static void destroyFBO(String name)
	{
		if(!fbo.containsKey(name))
			return;
		
		EXTFramebufferObject.glDeleteFramebuffersEXT(fbo.get(name)[0]);
		GL11.glDeleteTextures(fbo.get(name)[1]);
		
		fbo.remove(name);
	}
	
	public static void unbindFBO()
	{
		EXTFramebufferObject.glBindFramebufferEXT(EXTFramebufferObject.GL_FRAMEBUFFER_EXT, 0);
	}
}
