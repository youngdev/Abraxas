package com.fifthdimensionsoftware.lwjgl;

import static com.fifthdimensionsoftware.game.ZeroDayExploit.*;

import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.JFrame;

import org.lwjgl.opengl.Display;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.SlickException;

import com.fifthdimensionsoftware.game.GameWindow;
import com.fifthdimensionsoftware.game.ZeroDayExploit;

public class LwjglCore
{
	public LwjglWindow rootWindow;
	public AppGameContainer rootContainer;
	public ArrayList<GameWindow> auxWindows = new ArrayList<GameWindow>();
	public HashMap<String, Boolean> internalKeys;
	private static LwjglCore instance;
	
	public LwjglCore()
	{
		if(instance == null)
			instance = this;
		else
			throwFatal("How the heck did you do that?");
	}
	
	public static LwjglCore getInstance()
	{
		return instance;
	}

	public void run() throws SlickException 
	{
		this.internalKeys = ZeroDayExploit.getInstance().internalKeys;
		this.prepareWindow(GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[rootID]);
	}
	
	public boolean getKey(String key)
	{
		if(key.equals("debug") && hostname.toLowerCase().equals("glados") && (this.internalKeys.get("debug") != null ? this.internalKeys.get("debug") : false))
		{
			return true;
		}else
			if(this.internalKeys.containsKey(key))
				return this.internalKeys.get(key);
			else
				return false;
	}
	
	public void prepareWindow(GraphicsDevice screen) throws SlickException
	{
		Rectangle bounds = screen.getDefaultConfiguration().getBounds();
		if(GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[rootID].equals(screen))
		{
			rootWindow = new LwjglWindow("Zero Day Exploit");
	        this.rootContainer = new AppGameContainer(rootWindow);
	        rootContainer.setDisplayMode(bounds.width, bounds.height, false);
	        Display.setLocation(bounds.x, bounds.y);
	        rootContainer.setShowFPS(true);//this.getKey("debug"));
	        rootContainer.setClearEachFrame(true);
	        new Thread(){
	        	public void run()
	        	{
	        		try {
						rootContainer.start();
					} catch (SlickException e) {
						e.printStackTrace();
					}
	        	}
	        }.start();
		}else{
			GameWindow auxWindow = new GameWindow((this.auxWindows.size()+1)+"");
			this.auxWindows.add(auxWindow);
			this.prepareWindow(auxWindow, screen);
		}
	}
	
	public void prepareWindow(GameWindow window, GraphicsDevice screen)
	{
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setSize(new Dimension(screen.getDisplayMode().getWidth(), screen.getDisplayMode().getHeight()));
		window.setLocation(screen.getConfigurations()[0].getBounds().x, screen.getConfigurations()[0].getBounds().y);
		window.setExtendedState(JFrame.MAXIMIZED_BOTH);
		window.setUndecorated(true);
		window.setAlwaysOnTop(true);
		//Setup the double buffer
		window.initializeBuffer();
		window.setVisible(true);
	}

	public org.newdawn.slick.Graphics getScreen()
	{
		try {
			return this.rootWindow.backBuffer.getGraphics();
		} catch (SlickException e) {
			e.printStackTrace();
			return this.rootContainer.getGraphics();
		}
	}
}
