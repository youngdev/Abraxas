package com.fifthdimensionsoftware.lwjgl;


import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.InputStream;

import org.lwjgl.opengl.GL11;
import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

import com.fifthdimensionsoftware.game.WindowManager;
import com.fifthdimensionsoftware.game.ZipHandler;
import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;

public class LwjglWindow extends BasicGame
{
	
	public GameContainer parentContainer;
	public Image backBuffer;
	public WindowManager windowMan;
	public LuaJava baseLua = new LuaJava();

	public LwjglWindow(String title) 
	{
		super(title);
	}

	@Override
	public void render(GameContainer container, Graphics g) throws SlickException
	{
		if(this.backBuffer != null)
			backBuffer.startUse();
			backBuffer.drawEmbedded(0, 0, backBuffer.getWidth(), backBuffer.getHeight());
			backBuffer.endUse();
		for(String window : this.windowMan.windows())
		{
			this.windowMan.getWindow(window).paint();
			this.windowMan.getWindow(window).backBuffer.startUse();
			this.windowMan.getWindow(window).backBuffer.drawEmbedded(this.windowMan.getWindow(window).x, this.windowMan.getWindow(window).y, this.windowMan.getWindow(window).backBuffer.getWidth(), this.windowMan.getWindow(window).backBuffer.getHeight());
			this.windowMan.getWindow(window).backBuffer.endUse();
		}
	}
	
	@Override
	public void init(GameContainer container) throws SlickException 
	{
		GL11.glDisable(GL11.GL_BLEND);
		parentContainer = container;
		this.allocateImages();
		this.backBuffer = new Image(container.getWidth(), container.getHeight());
		this.windowMan = new WindowManager();
		ExecutionCore.executeFunction("boot", "boot");
	}

	@Override
	public void update(GameContainer container, int delta) throws SlickException 
	{
		for(String window : this.windowMan.windows())
		{
			this.windowMan.getWindow(window).paintDetail();
		}
	}
	
	public void allocateImages()
	{
		this.baseLua.allocateResourceLegacy("Pattern_Cube");
	}

	
	public Image loadFromRes(String name) throws IOException, SlickException
	{
		long time = System.currentTimeMillis();
		InputStream bais = ZipHandler.getStreamForFile("res.dat", name);
		Image toReturn = new Image(bais, name, false);
		bais.close();
		System.err.println("Zip loading took "+(System.currentTimeMillis() - time)+" ms");
		return toReturn;
	}
	
	@Override
	public void mouseClicked(int button, int x, int y, int times) 
	{
		super.mouseClicked(button, x, y, times);
		System.out.println("Clicked "+x+", "+y);
		if(true)
		{
			for(String window : this.windowMan.windows())
			{
				for(String item : this.windowMan.getWindow(window).listenerMethods())
				{
					if(new Rectangle(this.windowMan.getWindow(window).region(item).x + this.windowMan.getWindow(window).x, this.windowMan.getWindow(window).region(item).y + this.windowMan.getWindow(window).y, this.windowMan.getWindow(window).region(item).width, this.windowMan.getWindow(window).region(item).height).contains(new Point(x,y)))
					{
						if(item.split("\\|")[0].equals("INTERNALDRAG"))
						{
							this.windowMan.getWindow(window).move();
						}
						else if(item.split("\\|")[0].equals("INTERNALTEXT")){
							if(this.windowMan.getWindow(this.windowMan.activeWindow) != null)
								if(this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox) != null)
									this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox).isActive = false;
							this.windowMan.getWindow(window).activeBox = item.split("\\|")[1];
							this.windowMan.activeWindow = window;
							this.windowMan.getWindow(window).textbox(item.split("\\|")[1]).isActive = true;
							}
						else if(item.split("\\|")[0].equals("INTERNALCHECK")){
							this.windowMan.getWindow(window).checkBox(item.split("\\|")[1]).toggle();
						}
						else
							ExecutionCore.executeFunctionAsync(item.split("\\|")[1], item.split("\\|")[0]);
						return;
					}
				}
			}
		}
	}

	boolean isShift = false;
	
	@Override
	public void keyPressed(int code, char character) 
	{
		super.keyPressed(code, character);
		System.out.println("Pressed "+character);
		if(code == KeyEvent.VK_SHIFT && !isShift)
		{
			this.isShift = true;
		}
		
		if(this.windowMan.getWindow(this.windowMan.activeWindow) != null)
			if(this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox) != null)
				if(code != KeyEvent.VK_BACK_SPACE)
				{
					if(character != KeyEvent.CHAR_UNDEFINED)
					{
						String text = this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox).getText();
						//Only type if it can fit
						try {
							if(this.windowMan.getWindow(this.windowMan.activeWindow).backBuffer.getGraphics().getFont().getWidth(text)+20+this.windowMan.getWindow(this.windowMan.activeWindow).bufferGraphics.getFontMetrics().charWidth(character) <= this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox).width)
								this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox).write((isShift || (Toolkit.getDefaultToolkit().getLockingKeyState(KeyEvent.VK_CAPS_LOCK))) ? (character+"").toUpperCase() : character+"");
						} catch (UnsupportedOperationException | SlickException e) {
							e.printStackTrace();
						}
					}
				}else
					this.windowMan.getWindow(this.windowMan.activeWindow).textbox(this.windowMan.getWindow(this.windowMan.activeWindow).activeBox).backspace();
	}

	@Override
	public void keyReleased(int code, char character) 
	{
		super.keyReleased(code, character);
		if(code == KeyEvent.VK_SHIFT)
		{
			this.isShift = false;
		}
	}
}
