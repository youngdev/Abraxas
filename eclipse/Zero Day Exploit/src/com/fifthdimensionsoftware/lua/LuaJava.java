package com.fifthdimensionsoftware.lua;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.TexturePaint;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Properties;
import java.util.Random;
import java.util.Scanner;

import javax.imageio.ImageIO;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.util.BufferedImageUtil;

import com.fifthdimensionsoftware.game.GameWindow;
import com.fifthdimensionsoftware.game.MailSystem;
import com.fifthdimensionsoftware.game.Sound;
import com.fifthdimensionsoftware.game.WindowManager;
import com.fifthdimensionsoftware.game.ZeroDayExploit;
import com.fifthdimensionsoftware.game.ZipHandler;
import com.fifthdimensionsoftware.growl.Notifier;

public class LuaJava implements Serializable{
	private static final long serialVersionUID = 1L;

	private static HashMap<String, BufferedImage> res = new HashMap<String,BufferedImage>();
	private static HashMap<String, Image> lwjglRes = new HashMap<String, Image>();
	
	public String context = "";
	
	public static String nextContext = "";
	
	public LuaJava()
	{
		this.context = nextContext;
		nextContext = "";
	}
	
	public void playSound(String name, String dir)
	{
		Sound sound = null;
		if(!dir.equals("res"))
			sound = new Sound(this.filterPath(dir, name, "wav"));
		else
			sound = new Sound(ZipHandler.getStreamForFile("res.dat", name+".wav"));
		sound.play();
	}
	
	public String getUID()
	{
		String toReturn = "UID:";
		String chars = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM";
		Random rng = new Random();
		for(int loop = 0; loop < 10; loop++)
		{
			toReturn += chars.toCharArray()[rng.nextInt(chars.toCharArray().length)];
		}
		return toReturn;
	}
	
	public String dencryptString(String string, String key)
	{
		String toReturn = "";
		try {
			toReturn = new String( encryptBytes(string.getBytes("UTF-8"), key.getBytes("UTF-8")), "UTF-8" );
		} catch (IOException e) {
			e.printStackTrace();
		}
		return toReturn;
	}
	
	public byte[] encryptBytes(final byte[] input, final byte[] secret) {
	  final byte[] output = new byte[input.length];
	  if (secret.length == 0) {
	    throw new IllegalArgumentException("empty security key");
	  }
	  int spos = 0;
	  for (int pos = 0; pos < input.length; ++pos) {
	    output[pos] = (byte) (input[pos] ^ secret[spos]);
	    ++spos;
	    if (spos >= secret.length) {
	      spos = 0;
	    }
	  }
	  return output;
	}
	
	public Graphics2D getScreenLegacy(int id)
	{
		return ZeroDayExploit.getScreen(id);
	}
	
	public Graphics getScreen()
	{
		return ZeroDayExploit.lwjglCore.getScreen();
	}
	
	public long getFPS()
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			return ZeroDayExploit.getInstance().rootWindow.lastFPS;
		else
			return ZeroDayExploit.lwjglCore.rootContainer.getFPS();
	}
	
	public Graphics2D getRoot()
	{
		return ZeroDayExploit.getInstance().rootWindow.bufferGraphics;
	}
	
	public Color createColorLegacy(int r, int g, int b, int a)
	{
		return new Color(r,g,b,a);
	}
	
	public Color createColorLegacy(int r, int g, int b)
	{
		return this.createColorLegacy(r, g, b, 255);
	}
	
	public org.newdawn.slick.Color createColor(int r, int g, int b, int a)
	{
		return new org.newdawn.slick.Color(r, g, b, a);
	}
	
	public org.newdawn.slick.Color createColor(int r, int g, int b)
	{
		return this.createColor(r, g, b, 255);
	}
	
	public void allocateResource(String name)
	{
		try {
			LuaJava.lwjglRes.put(name, ZeroDayExploit.lwjglCore.rootWindow.loadFromRes(name+".png"));
		} catch (IOException | SlickException e) {
			e.printStackTrace();
		}
	}
	
	public void allocateResourceLegacy(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(ZipHandler.getStreamForFile("res.dat", name+".png")));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void allocateResourceFromDisk(String name)
	{
		try {
			LuaJava.lwjglRes.put(name, new Image(filterPath("disk", name, "png")));
		} catch (SlickException e) {
			e.printStackTrace();
		}
	}
	
	public void allocateResourceFromDiskLegacy(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(new File(filterPath("disk", name, "png"))));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public BufferedImage getResourceLegacy(String name)
	{
		return LuaJava.res.get(name);
	}
	
	public Image getResource(String name)
	{
		return LuaJava.lwjglRes.get(name);
	}
	
	public void repaintScreen()
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			ZeroDayExploit.getInstance().rootWindow.repaint();
	}
	
	public void repaintScreen(int id)
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			this.getManager(id).repaint();
	}
	
	public int rootWidth()
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			return ZeroDayExploit.getInstance().rootWindow.getWidth();
		else {
			ZeroDayExploit.getInstance();
			return ZeroDayExploit.lwjglCore.rootContainer.getWidth();
		}
	}
	
	public int rootHeight()
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			return ZeroDayExploit.getInstance().rootWindow.getHeight();
		else {
			ZeroDayExploit.getInstance();
			return ZeroDayExploit.lwjglCore.rootContainer.getWidth();
		}
	}
	
	public int screenWidth(int id)
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			return ZeroDayExploit.getInstance().auxWindows.get(id).getWidth();
		else
			if(id == ZeroDayExploit.rootID)
			{
				return ZeroDayExploit.lwjglCore.rootContainer.getWidth();
			}else
				return ZeroDayExploit.lwjglCore.auxWindows.get(id).getWidth();
	}
	
	public int screenHeight(int id)
	{
		if(ZeroDayExploit.getInstance().getKey("legacyDisplay"))
			return ZeroDayExploit.getInstance().auxWindows.get(id).getHeight();
		else
			if(id == ZeroDayExploit.rootID)
			{
				return ZeroDayExploit.lwjglCore.rootContainer.getWidth();
			}else
				return ZeroDayExploit.lwjglCore.auxWindows.get(id).getWidth();
	}
	
	
	public void execute(String name)
	{
		ExecutionCore.executeScript(filterPath("disk", name, "lua"), this.context);
	}
	
	public void executeAsync(String name)
	{
		ExecutionCore.executeScriptAsync(filterPath("disk", name, "lua"), name, this.context);
	}
	
	public void function(String name, String func)
	{
		ExecutionCore.executeFunction(filterPath("disk", name, "lua"), func);
	}
	
	public void functionAsync(String terminal, String name, String func)
	{
		ExecutionCore.executeFunctionAsync(filterPath("disk", name, "lua"), func);
	}
	
	public void sleep(long time) throws InterruptedException
	{
		Thread.sleep(time);
	}
	
	public void prepareAlpha(Graphics2D screen, float alpha)
	{
		screen.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha/255));
	}
	
	public void resetAlpha(Graphics2D screen)
	{
		screen.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0F));
	}
	
	public WindowManager getRootManager()
	{
		return ZeroDayExploit.lwjglCore.rootWindow.windowMan;
	}
	
	public WindowManager getManager(int id)
	{
		return ZeroDayExploit.getInstance().auxWindows.get(id).windowManager;
	}
	
	public String filterPath(String dir, String name, String extension)
	{
		if(context.isEmpty())
			return new File(new File("").getAbsolutePath() + "\\"+context+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
		else
			return this.context + dir +"\\"+name.replace("..", ".")+"."+extension;
	}
	
	public Image vertGradient(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, 0, height, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		try {
			ImageIO.write(toReturn, "PNG", new File(width+"."+height+".png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return this.convertImage(toReturn);
	}
	
	public Image horizGradient(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, width, 0, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return this.convertImage(toReturn);
	}
	
	public BufferedImage vertGradientLegacy(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, 0, height, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public BufferedImage horizGradientLegacy(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, width, 0, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public Image generateBorder(Color realColor, int width, int height, int size)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g = toReturn.createGraphics();
		Color transparent = new Color(0,0,0,0);
		g.setBackground(transparent);
		
		//Top
		g.drawImage(vertGradientLegacy(realColor, transparent,width,size), 0, 0, width, size, null);
		//Bottom
		g.drawImage(vertGradientLegacy(transparent, realColor,width,size), 0, height-size, width, size, null);
		//Left
		g.drawImage(horizGradientLegacy(realColor, transparent,size,height), 0, 0, size, height, null);
		//Right
		g.drawImage(horizGradientLegacy(transparent, realColor, size, height), width-size, 0, size, height, null);
		
		return this.convertImage(toReturn);
	}
	
	public Image generatePattern(BufferedImage pattern, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		TexturePaint gp1 = new TexturePaint(pattern, new Rectangle(0,0, pattern.getWidth(), pattern.getHeight()));
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return this.convertImage(toReturn);
	}
	
	public BufferedImage generateBorderLegacy(Color realColor, int width, int height, int size)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g = toReturn.createGraphics();
		Color transparent = new Color(0,0,0,0);
		g.setBackground(transparent);
		
		//Top
		g.drawImage(vertGradientLegacy(realColor, transparent,width,size), 0, 0, width, size, null);
		//Bottom
		g.drawImage(vertGradientLegacy(transparent, realColor,width,size), 0, height-size, width, size, null);
		//Left
		g.drawImage(horizGradientLegacy(realColor, transparent,size,height), 0, 0, size, height, null);
		//Right
		g.drawImage(horizGradientLegacy(transparent, realColor, size, height), width-size, 0, size, height, null);
		
		return toReturn;
	}
	
	public BufferedImage generatePatternLegacy(BufferedImage pattern, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		TexturePaint gp1 = new TexturePaint(pattern, new Rectangle(0,0, pattern.getWidth(), pattern.getHeight()));
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public Font createFont(String name, int size)
	{
		return new Font(name, Font.PLAIN, size);
	}
	
	public int randInt(int max)
	{
		return new Random().nextInt(max);
	}
	
	public void displaySystemPane(String name)
	{
		//ZeroDayExploit.displaySystemPane(name);
	}
	
	//File IO. ENTER AT OWN RISK!!!!
	
	public Scanner openScanner(String file) throws FileNotFoundException
	{
		return new Scanner(new FileInputStream(this.filterPath("disk", file.split("\\.")[0], file.split("\\.")[1])));
	}
	
	public PrintStream openPrintStream(String file, boolean append) throws FileNotFoundException
	{
		return new PrintStream(new FileOutputStream(this.filterPath("disk", file.split("\\.")[0], file.split("\\.")[1]), append));
	}
	
	public Properties openProperties(String file) throws FileNotFoundException, IOException
	{
		Properties tmpProp = new Properties();
		tmpProp.load(new FileInputStream(this.filterPath("disk", file.split("\\.")[0], file.split("\\.")[1])));
		return tmpProp;
	}
	
	public LangObj openLang(String lang) throws IOException
	{
		return new LangObj(lang);
	}
	
	//End File IO
	
	public MailSystem getMailSystem()
	{
		return ZeroDayExploit.globalMail;
	}
	
	public Notifier getNotifier()
	{
		return ZeroDayExploit.globalNotifier;
	}
	
	public void rebootSystem()
	{
		boolean oldState = ZeroDayExploit.getInstance().getKey("windowUpdate");
		ZeroDayExploit.getInstance().internalKeys.put("windowUpdate", false);
		ExecutionCore.stopAllScripts();
		for(String window : ZeroDayExploit.getInstance().rootWindow.windowManager.windows())
		{
			ZeroDayExploit.getInstance().rootWindow.windowManager.removeWindow(window);
		}
		ZeroDayExploit.getInstance().rootWindow.windowManager.windows.clear();
		for(GameWindow item : ZeroDayExploit.getInstance().auxWindows.values())
		{
			for(String window : item.windowManager.windows())
			{
				item.windowManager.removeWindow(window);
			}
			item.windowManager.windows.clear();
		}
		ExecutionCore.executeFunctionAsync("boot", "boot");
		ZeroDayExploit.getInstance().internalKeys.put("windowUpdate", oldState);
	}
	
	public boolean isInterrupted()
	{
		return Thread.currentThread().isInterrupted();
	}
	
	public Image convertImage(BufferedImage image)
	{
		try {
			return new Image(BufferedImageUtil.getTexture("IMAGE", image));
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}
}