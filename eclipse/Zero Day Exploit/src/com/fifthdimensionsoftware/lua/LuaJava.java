package com.fifthdimensionsoftware.lua;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.TexturePaint;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.ImageIO;

import com.fifthdimensionsoftware.game.Sound;
import com.fifthdimensionsoftware.game.WindowManager;
import com.fifthdimensionsoftware.game.ZeroDayExploit;
import com.fifthdimensionsoftware.game.ZipHandler;

public class LuaJava {
	
	private static HashMap<String, BufferedImage> res = new HashMap<String,BufferedImage>();
	
	public static void playSound(String name, String dir)
	{
		Sound sound = null;
		if(!dir.equals("res"))
			sound = new Sound(LuaJava.filterPath(dir, name, "wav"));
		else
			try {
				sound = new Sound(ZipHandler.getStreamForFile("res.dat", name+".wav"));
			} catch (IOException e) {
				e.printStackTrace();
			}
		sound.play();
	}
	
	public static String dencryptString(String string, String key)
	{
		String toReturn = "";
		try {
			toReturn = new String( encryptBytes(string.getBytes("UTF-8"), key.getBytes("UTF-8")), "UTF-8" );
		} catch (IOException e) {
			e.printStackTrace();
		}
		return toReturn;
	}
	
	public static byte[] encryptBytes(final byte[] input, final byte[] secret) {
	    final byte[] output = new byte[input.length];
	    if (secret.length == 0) {
	        throw new IllegalArgumentException("empty security key");
	    }
	    int spos = 0;
	    for (int pos = 0; pos < input.length; ++pos) {
	        output[pos] = (byte) (input[pos] ^ secret[spos]);
	        ++spos;
	        if (spos >= secret.length) {
	            spos = 0;
	        }
	    }
	    return output;
	}
	
	public static Graphics2D getScreen()
	{
		return ZeroDayExploit.getScreen();
	}
	
	public static Color createColor(int r, int g, int b, int a)
	{
		return new Color(r,g,b,a);
	}
	
	public static void allocateResource(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(ZipHandler.getStreamForFile("res.dat", name+".png")));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void allocateResourceFromDisk(String name)
	{
		try {
			LuaJava.res.put(name, ImageIO.read(new File(filterPath("disk", name, "png"))));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static BufferedImage getResource(String name)
	{
		return LuaJava.res.get(name);
	}
	
	public static ImageObserver getObserver()
	{
		return ZeroDayExploit.getInstance().rootWindow;
	}
	
	public static void repaintScreen()
	{
		ZeroDayExploit.getInstance().rootWindow.repaint();
	}
	
	public static int screenWidth()
	{
		return ZeroDayExploit.getInstance().rootWindow.getWidth();
	}
	
	public static int screenHeight()
	{
		return ZeroDayExploit.getInstance().rootWindow.getHeight();
	}
	
	public static void execute(String terminal, String name)
	{
		ExecutionCore.executeScript(terminal, filterPath("disk", name, "lua"));
	}
	
	public static void executeAsync(String terminal, String name)
	{
		ExecutionCore.executeScriptAsync(terminal, filterPath("disk", name, "lua"), name);
	}
	
	public static void function(String name, String func)
	{
		ExecutionCore.executeFunction(filterPath("disk", name, "lua"), func);
	}
	
	public static void functionAsync(String terminal, String name, String func)
	{
		ExecutionCore.executeFunctionAsync(filterPath("disk", name, "lua"), func);
	}
	
	public static void sleep(long time) throws InterruptedException
	{
		Thread.sleep(time);
	}
	
	public static void prepareAlpha(Graphics2D screen, float alpha)
	{
        screen.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha));
	}
	
	public static void resetAlpha(Graphics2D screen)
	{
        screen.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0F));
	}
	
	public static WindowManager getManager()
	{
		return ZeroDayExploit.getWindow();
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
	
	public static BufferedImage vertGradient(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, 0, height, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public static BufferedImage horizGradient(Color color1, Color color2, int width, int height)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		GradientPaint gp1 = new GradientPaint(0,0, color1, width, 0, color2);
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public static BufferedImage generateBorder(Color realColor, int width, int height, int size)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g = toReturn.createGraphics();
		Color transparent = new Color(0,0,0,0);
		g.setBackground(transparent);
		
		//Top
		g.drawImage(vertGradient(realColor, transparent,width,size), 0, 0, width, size, getObserver());
		//Bottom
		g.drawImage(vertGradient(transparent, realColor,width,size), 0, height-size, width, size, getObserver());
		//Left
		g.drawImage(horizGradient(realColor, transparent,size,height), 0, 0, size, height, getObserver());
		//Right
		g.drawImage(horizGradient(transparent, realColor, size, height), width-size, 0, size, height, getObserver());
		
		return toReturn;
	}
	
	public static BufferedImage generatePattern(BufferedImage pattern, int width, int height, int sizeX, int sizeY)
	{
		BufferedImage toReturn = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
		Graphics2D g2d = toReturn.createGraphics();
		
		TexturePaint gp1 = new TexturePaint(pattern, new Rectangle(0,0, pattern.getWidth(), pattern.getHeight()));
		
		g2d.setPaint(gp1);
		g2d.fillRect(0, 0, width, height);
		
		return toReturn;
	}
	
	public static Font createFont(String name, int size)
	{
		return new Font(name, Font.PLAIN, size);
	}
}