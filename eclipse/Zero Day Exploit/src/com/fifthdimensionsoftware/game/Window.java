package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.HashMap;

import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.util.BufferedImageUtil;

import com.fifthdimensionsoftware.lua.ExecutionCore;

public class Window
{
	public int width, height, x, y;
	int oldX = 0;
	int oldY = 0;
	int Rx;
	int Ry;
	String title;
	public volatile BufferedImage doubleBuffer;
	public volatile Graphics2D bufferGraphics;
	public Image backBuffer;
	Color barColorLegacy, borderOneLegacy, borderTwoLegacy;
	org.newdawn.slick.Color barColor, borderOne, borderTwo;
	
	GameWindow theWindow;
	public String activeBox = "";
	
	public Window(GameWindow window)
	{
		this.theWindow = window;
		this.barColorLegacy = window.windowManager.barColor;
		this.borderOneLegacy = window.windowManager.borderOne;
		this.borderTwoLegacy = window.windowManager.borderTwo;
		this.barColor = new org.newdawn.slick.Color(barColorLegacy.getRGB());
		this.borderOne = new org.newdawn.slick.Color(borderOneLegacy.getRGB());
		this.borderTwo = new org.newdawn.slick.Color(borderTwoLegacy.getRGB());
	}
	
	public Window(WindowManager windowMan)
	{
		this.barColorLegacy = windowMan.barColor;
		this.borderOneLegacy = windowMan.borderOne;
		this.borderTwoLegacy = windowMan.borderTwo;
		this.barColor = this.convertColor(barColorLegacy);
		this.borderOne = this.convertColor(borderOneLegacy);
		this.borderTwo = this.convertColor(borderTwoLegacy);
	}
	
	public HashMap<String, Rectangle> listenerMethods = new HashMap<String, Rectangle>();
	public HashMap<String, TextField> textBoxes = new HashMap<String, TextField>();
	public HashMap<String, CheckBox> checkBoxes = new HashMap<String, CheckBox>();
	public volatile Thread tickThread;
	
	boolean showTitleBar, showBorder, showTitleText, postrender, alignWithMouse, updateWindow = false, tmpUpdate = true;
	
	public void initBuffer()
	{
		GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
		doubleBuffer = gc.createCompatibleImage(width, height, 3);//new BufferedImage(this.width, this.height, BufferedImage.TYPE_4BYTE_ABGR);
		this.bufferGraphics = doubleBuffer.createGraphics();
		this.updateStyle("NORMAL");
		try {
			this.backBuffer = new Image(BufferedImageUtil.getTexture(this.title, this.doubleBuffer));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void addMouseRegion(String method, String script, int x, int y, int width, int height)
	{
		System.out.println(this.title+" "+x+", "+y);
		this.listenerMethods.put(method+"|"+script, new Rectangle(x,y,width,height));
	}
	
	public void removeMouseRegion(String method, String script)
	{
		this.textBoxes.remove(method+"|"+script);
	}
	
	public void addTextBox(String name, int x, int y, int width, int height, String func, String script)
	{
		this.textBoxes.put(name, new TextField(x, y, width, height, func, script));
		this.addMouseRegion("INTERNALTEXT", name, x, y, width, height);
	}
	
	public void addCheckBox(String name, int x, int y, boolean showLabel)
	{
		this.checkBoxes.put(name, new CheckBox(x,y, name, showLabel));
		this.addMouseRegion("INTERNALCHECK", name, x, y, 16, 16);
	}
	
	public void addCheckBox(String name, int x, int y)
	{
		this.checkBoxes.put(name, new CheckBox(x,y, name, true));
		this.addMouseRegion("INTERNALCHECK", name, x, y, 16, 16);
	}
	
	public String[] listenerMethods()
	{
		return this.listenerMethods.keySet().toArray(new String[0]);
	}
	
	public String[] textboxes()
	{
		return this.textBoxes.keySet().toArray(new String[0]);
	}
	
	public String[] checkboxes()
	{
		return this.checkBoxes.keySet().toArray(new String[0]);
	}
	
	public CheckBox checkBox(String name)
	{
		return this.checkBoxes.get(name);
	}
	
	public TextField textbox(String name)
	{
		return this.textBoxes.get(name);
	}
	
	public Rectangle region(String region)
	{
		return this.listenerMethods.get(region);
	}
	
	public void setLocation(int x2, int y2) 
	{
		this.x = x2;
		this.y = y2;
	}

	public void setSize(int width2, int height2) 
	{
		this.width = width2;
		this.height = height2;
	}
	
	public void move()
	{
		this.Rx = MouseInfo.getPointerInfo().getLocation().x - this.x;
		this.Ry = MouseInfo.getPointerInfo().getLocation().y - this.y;
		this.alignWithMouse = !this.alignWithMouse;
	}
	
	public void enableUpdates(boolean flag)
	{
		this.updateWindow = flag;
	}
	
	public void updateNext()
	{
		this.tmpUpdate = true;
	}
	
	public void updateColors(Color title, Color border1, Color border2)
	{
		this.barColorLegacy = title;
		this.borderOneLegacy = border1;
		this.borderTwoLegacy = border2;
		this.barColor = this.convertColor(title);
		this.borderOne = this.convertColor(border1);
		this.borderTwo = this.convertColor(border2);
	}
	
	public org.newdawn.slick.Color convertColor(Color color)
	{
		return new org.newdawn.slick.Color(color.getRGB());
	}
	
	public void updateStyle(String style)
	{
		switch(style)
		{
		case "NORMAL":
			this.showBorder = true;
			this.postrender = true;
			this.showTitleBar = true;
			this.showTitleText = true;
			break;
		case "NOBORDER":
			this.showBorder = false;
			break;
		case "BORDER":
			this.showBorder = true;
			break;
		case "POSTRENDER":
			this.postrender = true;
			break;
		case "NOPOSTRENDER":
			this.postrender = false;
			break;
		case "TITLEBAR":
			this.showTitleBar = true;
			break;
		case "NOTITLEBAR":
			this.showTitleBar = false;
			break;
		case "TITLETEXT":
			this.showTitleText = true;
			break;
		case "NOTITLETEXT":
			this.showTitleText = false;
			break;
		case "FREE":
			this.showBorder = false;
			this.postrender = false;
			this.showTitleBar = false;
			this.showTitleText = false;
			break;
		}
	}
	
	public void paintDetail() throws SlickException
	{
		org.newdawn.slick.Color tmpColor = this.backBuffer.getGraphics().getColor();
		if(this.showTitleBar)
		{
			this.backBuffer.getGraphics().setColor(this.barColor);
			this.backBuffer.getGraphics().fillRect(0, 0, width, 20);
		}
		//Window borders
		if(this.showBorder)
		{
			//Window border 1
			this.backBuffer.getGraphics().setColor(this.borderOne);
			this.backBuffer.getGraphics().drawRect(0, 0, width-1, height-1);
			//Window border 2
			this.backBuffer.getGraphics().setColor(this.borderTwo);
			this.backBuffer.getGraphics().drawRect(1, 1, width-3, height-3);
		}
		//Title text
		if(this.showTitleText)
		{
			this.backBuffer.getGraphics().setColor(org.newdawn.slick.Color.white);
			this.backBuffer.getGraphics().drawString(this.title, 5, 2);
		}
		
		this.backBuffer.getGraphics().setColor(tmpColor);
		
		if(this.postrender)
			ExecutionCore.executePostrender(title);
	}
	
	public void paintDetailLegacy()
	{
		Color tmpColor = this.bufferGraphics.getColor();
		if(this.showTitleBar)
		{
			this.bufferGraphics.setColor(this.barColorLegacy);
			this.bufferGraphics.fillRect(0, 0, width, 20);
		}
		//Window borders
		if(this.showBorder)
		{
			//Window border 1
			this.bufferGraphics.setColor(this.borderOneLegacy);
			this.bufferGraphics.drawRect(0, 0, width-1, height-1);
			//Window border 2
			this.bufferGraphics.setColor(this.borderTwoLegacy);
			this.bufferGraphics.drawRect(1, 1, width-3, height-3);
		}
		//Title text
		if(this.showTitleText)
		{
			this.bufferGraphics.setColor(Color.white);
			this.bufferGraphics.drawString(this.title, 5, 15);
		}
		
		this.bufferGraphics.setColor(tmpColor);
		
		if(this.postrender)
			ExecutionCore.executePostrender(title);
	}

	public void paint() throws SlickException
	{
		if (ZeroDayExploit.getInstance().getKey("legacyDisplay")) {
			//Title bar
			if (this.updateWindow || this.tmpUpdate) {
				this.tmpUpdate = false;
				this.paintDetailLegacy();
			}
			//Push the buffer to the correct position
			if (this.alignWithMouse) {
				this.x = MouseInfo.getPointerInfo().getLocation().x - this.Rx;
				this.y = MouseInfo.getPointerInfo().getLocation().y - this.Ry;
			}
			if (this.x != this.oldX || this.y != this.oldY) {
				this.theWindow.windowBufferGraphics.setBackground(new Color(0,
						0, 0, 1));
				this.theWindow.windowBufferGraphics.clearRect(this.oldX,
						this.oldY, this.width, this.height);
			}
			this.oldX = this.x;
			this.oldY = this.y;
			for (String item : this.textboxes()) {
				this.textBoxes.get(item).paintLegacy(bufferGraphics);
			}
			for (String item : this.checkboxes()) {
				this.checkBoxes.get(item).paintLegacy(bufferGraphics);
			}
			this.theWindow.windowBufferGraphics.drawImage(doubleBuffer, this.x,
					this.y, this.width, this.height, this.theWindow);
		}else{
			//Title bar
			if (this.updateWindow || this.tmpUpdate) {
				this.tmpUpdate = false;
				try {
					this.paintDetail();
				} catch (SlickException e) {
					e.printStackTrace();
				}
			}
			//Push the buffer to the correct position
			if (this.alignWithMouse) {
				this.x = MouseInfo.getPointerInfo().getLocation().x - this.Rx;
				this.y = MouseInfo.getPointerInfo().getLocation().y - this.Ry;
			}
			
			this.oldX = this.x;
			this.oldY = this.y;
			
			for (String item : this.textboxes())
				this.textBoxes.get(item).paint(this.backBuffer.getGraphics(), new Point(0,0));
			
			for (String item : this.checkboxes()) 
				this.checkBoxes.get(item).paint(this.backBuffer.getGraphics(), new Point(0,0));
		}
			
	}
}