package com.fifthdimensionsoftware.game;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;

public class MailSystem implements Serializable
{
	private static final long serialVersionUID = 1L;
	private HashMap<String, ArrayList<MailMessage>> mailMap = new HashMap<String, ArrayList<MailMessage>>();
	private HashMap<String, String> passMap = new HashMap<String, String>();
	
	public void sendMessage(String recipient, String password, MailMessage message)
	{
		if(mailMap.containsKey(recipient))
		{
			if(passMap.get(recipient).equals(password))
				mailMap.get(recipient).add(message);
		}
	}
	
	public ArrayList<MailMessage> getMessages(String account, String password)
	{
		if(this.mailMap.containsKey(account))
			if(this.passMap.get(account).equals(password))
				return this.mailMap.get(account);
		return null;
	}
	
	public ArrayList<MailMessage> getUnreadMessages(String account, String password)
	{
		if(this.mailMap.containsKey(account))
			if(this.passMap.get(account).equals(password))
			{
				ArrayList<MailMessage> oldList = this.mailMap.get(account);
				ArrayList<MailMessage> newList = new ArrayList<MailMessage>();
				for(MailMessage item : oldList)
				{
					if(!item.isRead())
						newList.add(item);
				}
				return newList;
			}
		return null;
	}
	
	public void registerRecipient(String newRecipient, String password)
	{
		if(!mailMap.containsKey(newRecipient))
		{
			mailMap.put(newRecipient, new ArrayList<MailMessage>());
			passMap.put(newRecipient, password);
		}
	}
	
	@SuppressWarnings("unchecked")
	public void loadMail(File path)
	{
		try {
			FileInputStream fis = new FileInputStream(path);
			ObjectInputStream ois = new ObjectInputStream(fis);
			Object loadMap = ois.readObject();
			this.mailMap = (HashMap<String, ArrayList<MailMessage>>) (loadMap instanceof HashMap ? loadMap : this.mailMap);
			this.passMap = (HashMap<String, String>) (loadMap instanceof HashMap ? loadMap : this.passMap);
			fis.close();
			ois.close();
		} catch (ClassNotFoundException | IOException e) {
			e.printStackTrace();
		}
	}
	
	public void saveMail(File path)
	{
		try {
			FileOutputStream fos = new FileOutputStream(path);
			ObjectOutputStream oos = new ObjectOutputStream(fos);
			oos.writeObject(this.mailMap);
			oos.writeObject(this.passMap);
			fos.close();
			oos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public MailMessage createMessage(String message, Serializable... data)
	{
		return new MailMessage(message, data);
	}
}
class MailMessage implements Serializable
{
	private static final long serialVersionUID = 1L;
	private boolean read = false;
	private Serializable[] attatchments = {};
	public String message = "";
	
	public MailMessage(String messageParam, Serializable... attachParam)
	{
		this.attatchments = attachParam;
		this.message = messageParam;
	}
	
	public void setRead(boolean flag)
	{
		this.read = flag;
	}
	
	public boolean isRead()
	{
		return this.read;
	}
	
	public int attatchmentCount()
	{
		return this.attatchments.length;
	}
	
	public Serializable getAttatchment(int id)
	{
		return this.attatchments[id];
	}
}