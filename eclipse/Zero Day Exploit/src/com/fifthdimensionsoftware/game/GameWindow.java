package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;

public class GameWindow extends JFrame implements MouseListener{

	private static final long serialVersionUID = 4686662884255670207L;
	
	public BufferedImage doubleBuffer;
	public Graphics2D bufferGraphics;
	public BufferedImage windowBuffer;
	public Graphics2D windowBufferGraphics;
	public BufferedImage ultimateBuffer;
	public Graphics2D ultimateBufferGraphics;
	public WindowManager windowManager = new WindowManager();
	
	public GameWindow(String windowTitle)
	{
		super(windowTitle);
		setLayout(new FlowLayout());
        addMouseListener(this);
	}
	
	public void pushBuffer(Graphics g)
	{
		if(g != null && this.ultimateBuffer != null)
		{
			g.drawImage(this.ultimateBuffer, 0, 0, this.getWidth(), this.getHeight(), this);
		}
	}
	
	public Graphics2D bufferGraphics()
	{
		return this.bufferGraphics;
	}
	
	public void initializeBuffer()
	{
		this.doubleBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.bufferGraphics = this.doubleBuffer.createGraphics();
		this.bufferGraphics.setColor(Color.black);
		this.bufferGraphics.fillRect(0, 0, this.getWidth(), this.getHeight());
		this.bufferGraphics.setColor(Color.white);
		
		this.windowBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.windowBufferGraphics = this.windowBuffer.createGraphics();
		
		this.ultimateBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.ultimateBufferGraphics = this.ultimateBuffer.createGraphics();
	}
	
	public void repaint()
	{
		this.windowManager.repaint();
		this.ultimateBufferGraphics.drawImage(doubleBuffer, 0, 0, this.getWidth(), this.getHeight(), LuaJava.getObserver());
		this.ultimateBufferGraphics.drawImage(this.windowBuffer, 0, 0, this.getWidth(), this.getHeight(), LuaJava.getObserver());
		this.pushBuffer(this.getGraphics());
	}
	
	
	public void paint(Graphics g)
	{
		if(g != null && this.doubleBuffer != null)
		{
			g.drawImage(this.doubleBuffer, 0, 0, this.getWidth(), this.getHeight(), this);
		}
	}

	@Override
	public void mouseClicked(MouseEvent arg0) 
	{
		for(String window : ZeroDayExploit.getWindow().windows())
		{
			for(String item : ZeroDayExploit.getWindow().window(window).listenerMethods())
			{
				if(new Rectangle(ZeroDayExploit.getWindow().window(window).region(item).x + ZeroDayExploit.getWindow().window(window).x, ZeroDayExploit.getWindow().window(window).region(item).y + ZeroDayExploit.getWindow().window(window).y, ZeroDayExploit.getWindow().window(window).region(item).width, ZeroDayExploit.getWindow().window(window).region(item).height).contains(arg0.getPoint()))//ZeroDayExploit.getWindow().window(window).region(item).contains(arg0.getX(), arg0.getY()))
				{
					if(!item.split("\\|")[0].equals("INTERNALDRAG"))
						ExecutionCore.executeFunctionAsync(item.split("\\|")[1], item.split("\\|")[0]);
					else
						ZeroDayExploit.getWindow().window(window).move();
					return;
				}
			}
		}
	}

	@Override
	public void mouseEntered(MouseEvent arg0)
	{
		
	}

	@Override
	public void mouseExited(MouseEvent arg0)
	{
		
	}

	@Override
	public void mousePressed(MouseEvent arg0)
	{
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0)
	{
		
	}
}
