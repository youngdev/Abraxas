package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;

public class GameWindow extends JFrame implements MouseListener, KeyListener{

	private static final long serialVersionUID = 4686662884255670207L;
	
	public BufferedImage doubleBuffer;
	public Graphics2D bufferGraphics;
	public BufferedImage windowBuffer;
	public Graphics2D windowBufferGraphics;
	public BufferedImage ultimateBuffer;
	public Graphics2D ultimateBufferGraphics;
	public WindowManager windowManager = new WindowManager(this);
	
	public GameWindow(String windowTitle)
	{
		super(windowTitle);
		setLayout(new FlowLayout());
        addMouseListener(this);
        addKeyListener(this);
	}
	
	public void pushBuffer(Graphics g)
	{
		if(g != null && this.ultimateBuffer != null)
		{
			g.drawImage(this.ultimateBuffer, 0, 0, this.getWidth(), this.getHeight(), this);
		}
	}
	
	public Graphics2D bufferGraphics()
	{
		return this.bufferGraphics;
	}
	
	public void initializeBuffer()
	{
		this.doubleBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.bufferGraphics = this.doubleBuffer.createGraphics();
		this.bufferGraphics.setColor(Color.black);
		this.bufferGraphics.fillRect(0, 0, this.getWidth(), this.getHeight());
		this.bufferGraphics.setColor(Color.white);
		
		this.windowBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.windowBufferGraphics = this.windowBuffer.createGraphics();
		
		this.ultimateBuffer = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
		this.ultimateBufferGraphics = this.ultimateBuffer.createGraphics();
	}
	
	public void repaint()
	{
		this.windowManager.repaint();
		this.ultimateBufferGraphics.drawImage(doubleBuffer, 0, 0, this.getWidth(), this.getHeight(), LuaJava.getObserver());
		this.ultimateBufferGraphics.drawImage(this.windowBuffer, 0, 0, this.getWidth(), this.getHeight(), LuaJava.getObserver());
		this.pushBuffer(this.getGraphics());
	}
	
	
	public void paint(Graphics g)
	{
		this.pushBuffer(g);
	}

	@Override
	public void mouseClicked(MouseEvent arg0) 
	{
		if(this.equals(ZeroDayExploit.getInstance().rootWindow))
		{
			for(String window : this.windowManager.windows())
			{
				for(String item : this.windowManager.getWindow(window).listenerMethods())
				{
					if(new Rectangle(this.windowManager.getWindow(window).region(item).x + this.windowManager.getWindow(window).x, this.windowManager.getWindow(window).region(item).y + this.windowManager.getWindow(window).y, this.windowManager.getWindow(window).region(item).width, this.windowManager.getWindow(window).region(item).height).contains(arg0.getPoint()))//ZeroDayExploit.getWindow().window(window).region(item).contains(arg0.getX(), arg0.getY()))
					{
						if(item.split("\\|")[0].equals("INTERNALDRAG"))
							this.windowManager.getWindow(window).move();
						else if(item.split("\\|")[0].equals("INTERNALTEXT")){
							this.windowManager.getWindow(window).activeBox = item.split("\\|")[1];
							this.windowManager.activeWindow = window;
							}
						else
							ExecutionCore.executeFunctionAsync(item.split("\\|")[1], item.split("\\|")[0]);
						return;
					}
				}
			}
		}
	}

	@Override
	public void mouseEntered(MouseEvent arg0)
	{
		
	}

	@Override
	public void mouseExited(MouseEvent arg0)
	{
		
	}

	@Override
	public void mousePressed(MouseEvent arg0)
	{
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0)
	{
		
	}

	boolean isShift = false;
	
	@Override
	public void keyPressed(KeyEvent arg0) 
	{
		if(arg0.getKeyCode() == KeyEvent.VK_SHIFT && !isShift)
		{
			this.isShift = true;
		}
		
		if(this.windowManager.getWindow(this.windowManager.activeWindow) != null)
			if(this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox) != null)
				if(arg0.getKeyCode() != KeyEvent.VK_BACK_SPACE)
				{
					if(arg0.getKeyChar() != KeyEvent.CHAR_UNDEFINED)
					{
						String text = this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox).text;
						//Only type if it can fit
						if(this.windowManager.getWindow(this.windowManager.activeWindow).bufferGraphics.getFontMetrics().stringWidth(text)+20+this.windowManager.getWindow(this.windowManager.activeWindow).bufferGraphics.getFontMetrics().charWidth(arg0.getKeyChar()) <= this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox).width)
							this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox).text += !isShift ? arg0.getKeyChar() : (arg0.getKeyChar()+"").toUpperCase();
					}
				}else
				{
					String text = this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox).text;
					//Don't cut if its empty
					if(!text.isEmpty())
						this.windowManager.getWindow(this.windowManager.activeWindow).textbox(this.windowManager.getWindow(this.windowManager.activeWindow).activeBox).text = text.substring(0, text.length()-1);
					
				}
	}

	@Override
	public void keyReleased(KeyEvent arg0) 
	{
		if(arg0.getKeyCode() == KeyEvent.VK_SHIFT)
		{
			this.isShift = false;
		}
	}

	@Override
	public void keyTyped(KeyEvent arg0) 
	{
				
	}
}
