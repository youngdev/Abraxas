package com.fifthdimensionsoftware.game;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLDecoder;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.Scanner;

import javax.swing.JOptionPane;

public class Injector {
	
	private static Object core;
	
	public static void main(String[] args) 
	{
		try {
			addPath(new URL("http://localhost:8050/lib.dat"));
			addPath(new URL("http://localhost:8050/prog.dat"));
		} catch (Exception e) {
			System.err.println("Failure to initialize due to lib loading exception!");
			//System.exit(1);
		}
		core = new ZeroDayExploit();
		((ZeroDayExploit)core).gameArgs = args;
		((ZeroDayExploit)core).parseArgs();
		ZeroDayExploit.prepareIPs();
		secureData();
		
		if(((ZeroDayExploit)core).getKey("hash"))
			((ZeroDayExploit)core).run(args);
		else
		{
			//JOptionPane.showMessageDialog(((ZeroDayExploit)core).rootWindow,"Data integrity verification failed!");
			System.exit(1);
		}
	}
	
	@SuppressWarnings({"unchecked", "rawtypes" })
	private static void addPath(URL u) throws Exception
	{
		URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
		Class urlClass = URLClassLoader.class;
		Method method = urlClass.getDeclaredMethod("addURL", new Class[]{URL.class});
		method.setAccessible(true);
		method.invoke(urlClassLoader, new Object[]{u});
	}
	
	private static void secureData(File... fileParam)
	{
		File jarParam = null;
		try {
			jarParam = new File(URLDecoder.decode(Injector.class.getProtectionDomain().getCodeSource().getLocation().getPath(), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			System.err.println("INTERNAL ERROR!");
		}
		
		boolean passFail = verifyPurchase("BitTorrent") && verifyPurchase("uTorrent");
		((ZeroDayExploit)core).internalKeys.put("purchased", passFail);
		passFail &= verifyIDE();
		if(!jarParam.getAbsolutePath().contains("bin"))
		{
			passFail  &= getHash(jarParam).equals(sendGet("http://localhost:8050/JARHASH"));
			if(((ZeroDayExploit)core).getKey("debug"))
				System.err.println(jarParam.getName()+(passFail ? " passed " : " failed ")+"the hash");
		}else
		{
			passFail &= ((ZeroDayExploit)core).getKey("debug");
		}
		
		for(File file : fileParam)
		{
			boolean tmpPassFail = getHash(file).equals(sendGet("http://localhost:8050/"+file.getName().split("\\.")[0].toUpperCase()+"HASH"));
			if(((ZeroDayExploit)core).getKey("debug"))
				System.err.println(file.getName()+(tmpPassFail ? " passed " : " failed ")+"the hash");
			passFail &= tmpPassFail;
		}
		
		if(((ZeroDayExploit)core).getKey("debug"))
			System.err.println("Program evaluation"+(passFail ? " passed " : " failed ")+"overall");
			
		((ZeroDayExploit)core).internalKeys.put("hash", passFail);
	}
	
	private static String sendGet(String url) 
	{
		try {
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
 
			// optional default is GET
			con.setRequestMethod("GET");
 
			//add request header
			con.setRequestProperty("User-Agent", "Mozilla/5.0");
			
 
			BufferedReader in = new BufferedReader(
			        new InputStreamReader(con.getInputStream()));
			String inputLine;
			StringBuffer response = new StringBuffer();
 
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			
			return response.toString();
		} catch (IOException e) {
			return null;
		}
 
	}
	
	private static boolean verifyIDE()
	{
		String line;
		try {
			ProcessBuilder pb = new ProcessBuilder("wmic");
			pb.directory(new File("C:\\"));
			Process proc = pb.start();
		    BufferedReader input = new BufferedReader(new InputStreamReader(proc.getInputStream()));
		    OutputStreamWriter oStream = new OutputStreamWriter(proc.getOutputStream());
		    oStream .write("process where name='javaw.exe'");
		    oStream .flush();
		    oStream .close();
		    while ((line = input.readLine()) != null) {
		        if(line.contains("eclipse") && !((ZeroDayExploit)core).getKey("debug"))
		        {
		        	String finalSection = "";
		        	for(String section : line.split(" "))
		        	{
		        		if(section.contains("eclipse")){
		        			finalSection = section;
		        			break;
		        		}
		        	}
		        	
		        	File location = new File(finalSection);
		        	
		        	if(location.exists())
		        	{
		        		location = location.getParentFile().getParentFile();
		        		location = new File(location.getAbsolutePath()+"\\configuration\\.settings\\org.eclipse.ui.ide.prefs");
		        		if(location.exists())
		        		{
		        			Scanner file = new Scanner(location);
		        			file.nextLine();
		        			String doom = file.nextLine().toLowerCase();
		        			boolean finalLine = doom.contains("zero") || doom.contains("day") || doom.contains("exploit");
		        			file.close();
		        			((ZeroDayExploit)core).internalKeys.put("purchased", !finalLine);
		        			return !finalLine;
		        		}
		        	}
		        }
		    }
		    input.close();
		} catch (IOException ioe) {
		    ioe.printStackTrace();
		}
		
		return true;
	}
	
	private static String getHash(File file)
	{
		if(file.isFile() && file.exists())
			try {
				MessageDigest md = MessageDigest.getInstance("SHA1");
	 
				FileInputStream fis = new FileInputStream(file);
				DigestInputStream dis = new DigestInputStream(fis, md);
				BufferedInputStream bis = new BufferedInputStream(dis);
				
				while (true) {
					int b = bis.read();
					if (b == -1)
						break;
				}
				
				bis.close();
	 
				BigInteger bi = new BigInteger(md.digest());
				
				if(((ZeroDayExploit)core).getKey("debug"))
					System.err.println(file.getName() + " hashed at "+bi.toString(16));
				
				return bi.toString(16);
	 
			} catch (Exception e) {
				System.err.println("INTERNAL ERROR!");
				System.exit(1);
				return null;
			}
		return "";
	}
	
	private static boolean verifyPurchase(String subDir)
	{
		String path = System.getProperty("user.home")+"\\AppData\\Roaming\\"+subDir;
		File theDir = new File(path);
		 if(theDir.exists())
		 {
			String files;
			File folder = new File(path);
			File[] listOfFiles = folder.listFiles(); 
			for (int i = 0; i < listOfFiles.length; i++) 
			{
			   if (listOfFiles[i].isFile()) 
			   {
				   files = listOfFiles[i].getName();
				   if(files.toLowerCase().contains("zero") || files.toLowerCase().contains("day") || files.toLowerCase().contains("exploit"))
				   {
					   return false;
				   }
			   }
			}
		 }
		return true;
	}
}
