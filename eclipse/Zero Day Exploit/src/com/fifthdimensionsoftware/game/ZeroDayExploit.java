package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;
import com.fifthdimensionsoftware.network.TargetServer;

public class ZeroDayExploit{
	
	public String[] gameArgs;
	private static ZeroDayExploit instance;
	public boolean inGame = false;
	public GameWindow rootWindow = new GameWindow("Zero Day Exploit");
	private HashMap<String, Boolean> internalKeys = new HashMap<String, Boolean>();
	public HashMap<Integer, GameWindow> auxWindows = new HashMap<Integer, GameWindow>();
	private int rootID;
	public static LuaJava baseLua = new LuaJava();
	public static String fifthIP;
	
	static
	{
		try {
			fifthIP = InetAddress.getByName("www.fifthdimensionsoftware.com").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.fifthdimensionsoftware.com\". It's no big deal.");
			fifthIP = "UNKNOWN_IP";
		}
	}
	
	public static void main(String[] args)
	{
		new ZeroDayExploit().run(args);
	}
	
	public void run(String[] args)
	{
		this.gameArgs = args;
		if(instance == null)
		{
			instance = this;
			this.parseArgs();
			
			//Populate the server list with saved servers
			TargetServer.populateServers();
			
			Properties configFile = new Properties();
		    try {
		      configFile.load(ZipHandler.getStreamForFile("res.dat", "Properties.cfg"));
		    }catch(Exception eta){
		        eta.printStackTrace();
		    }
		    this.rootID = Integer.parseInt(configFile.getProperty("primaryScreen"));
		    //Cleanup on exit
		    Runtime.getRuntime().addShutdownHook(new ExitThread());
		    
			//Setup the GameFrame
			this.prepareWindow(rootWindow, this.rootID);
			for(int loop = 0; loop < this.enumerateWindows(); loop++)
			{
				if(loop != this.rootID)
				{
					GameWindow tmpWindow = new GameWindow(""+loop);
					this.auxWindows.put(loop, tmpWindow);
					this.prepareWindow(tmpWindow, loop);
					tmpWindow.ultimateBufferGraphics.setColor(Color.black);
					tmpWindow.ultimateBufferGraphics.fillRect(0, 0, tmpWindow.getWidth(), tmpWindow.getHeight());
					tmpWindow.ultimateBufferGraphics.setColor(Color.white);
				}
			}
			//Allocate resources
			baseLua.allocateResource("5th_Logo");
			baseLua.allocateResource("Zero_Logo");
			baseLua.allocateResource("Pattern_Cube");
			//Display logo once primary allocation completes
			baseLua.getScreen(this.rootID).drawImage(baseLua.generatePattern(baseLua.getResource("Pattern_Cube"), baseLua.rootWidth(), baseLua.rootHeight()), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.getScreen(this.rootID).drawImage(baseLua.generateBorder(Color.black, baseLua.rootWidth(), baseLua.rootHeight(), 10), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.getScreen(this.rootID).drawImage(baseLua.getResource("5th_Logo"), baseLua.rootWidth()/2 - baseLua.getResource("5th_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("5th_Logo").getHeight()/2, baseLua.getObserver());
			baseLua.repaintScreen();
			//Set windows to visible once the screen is prepared
			rootWindow.setVisible(true);
			for(Integer item : this.auxWindows.keySet().toArray(new Integer[0]))
			{
				this.auxWindows.get(item).setVisible(true);
			}
			
			//Wait for the script and port binding to finish
			long prevTime = System.currentTimeMillis();
			
			//Add various libraries
			this.addPath("lib.dat");
			
			//baseLua.getScreen().drawImage(baseLua.getResource("Splash_Back"), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.repaintScreen();
			ExecutionCore.executeFunction("boot", "allocate");
			while(System.currentTimeMillis() < prevTime + 1500){}
			prevTime = System.currentTimeMillis();
			baseLua.getScreen(this.rootID).drawImage(baseLua.generatePattern(baseLua.getResource("Pattern_Cube"), baseLua.rootWidth(), baseLua.rootHeight()), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.getScreen(this.rootID).drawImage(baseLua.generateBorder(Color.black, baseLua.rootWidth(), baseLua.rootHeight(), 10), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
			baseLua.getScreen(this.rootID).drawImage(baseLua.getResource("Zero_Logo"), baseLua.rootWidth()/2 - baseLua.getResource("Zero_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("Zero_Logo").getHeight()/2, baseLua.getObserver());
			baseLua.repaintScreen();
			while(System.currentTimeMillis() < prevTime + 1500){}
			//setup the looping music playlist
			ExecutionCore.executeStreamAsync(ZipHandler.getStreamForFile("res.dat", "music.lua"), "music.lua","Music", "");
			//Setup the tick loop
			new TickThread().start();
			
			//Booting "Bitpro Industries unified operating system"
			ExecutionCore.executeFunction("boot", "boot");
		}else
		{
			System.err.println("ZeroDayExploit was already instantiated! (THIS SHOULD BE IMPOSSIBLE!)");
			System.exit(1);
		}
	}
	
	public String getArgument(int index)
	{
		return this.gameArgs[index];
	}
	
	public void parseArgs()
	{
		for(String arg : this.gameArgs)
		{
			switch(arg)
			{
			case "--debug":
				this.internalKeys.put("debug", true);
				break;
			}
		}
	}
	
	private boolean getKey(String key)
	{
		if(this.internalKeys.containsKey(key))
			return this.internalKeys.get(key);
		else
			return false;
	}
	
	//Return the one and only instance of the game core
	public static ZeroDayExploit getInstance()
	{
		return ZeroDayExploit.instance;
	}
	
	//Used by baseLua
	public static Graphics2D getScreen(int id)
	{
		if(id != getInstance().rootID)
			return getInstance().auxWindows.get(id).bufferGraphics();
		else
			return getInstance().rootWindow.bufferGraphics;
	}
	
	//Used by baseLua
	public static WindowManager getWindow()
	{
		return getInstance().rootWindow.windowManager;
	}
	
	@SuppressWarnings({ "deprecation", "unchecked", "rawtypes" })
	private void addPath(String s) {
	    try {
			File f = new File(s);
			if(!f.exists())
			{
				JOptionPane.showMessageDialog(this.rootWindow,"An error occured loading "+s+" into the classpath!");
				System.exit(1);
			}
			URL u;
			u = f.toURL();
			URLClassLoader urlClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
			Class urlClass = URLClassLoader.class;
			Method method = urlClass.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(urlClassLoader, new Object[]{u});
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
	}
	
	public void prepareWindow(GameWindow window, int screen)
	{
		GraphicsDevice[] screens = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
		
		
		Dimension size = null;
		if(screens.length -1 >= screen)
			size = new Dimension(screens[screen].getDisplayMode().getWidth(), screens[screen].getDisplayMode().getHeight());
		else
			return;
		
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setSize(size);
		window.setLocation(screens[screen].getConfigurations()[0].getBounds().x, screens[screen].getConfigurations()[0].getBounds().y);
		window.setExtendedState(JFrame.MAXIMIZED_BOTH);
		window.setUndecorated(true);
		window.setAlwaysOnTop(!this.getKey("debug"));
		//Setup the double buffer
		window.initializeBuffer();
	}
	
	public int enumerateWindows()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices().length;
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
}
