package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Properties;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;
import com.fifthdimensionsoftware.network.TargetServer;

public class ZeroDayExploit{
	
	public String[] gameArgs;
	private static ZeroDayExploit instance;
	public boolean inGame = false;
	public GameWindow rootWindow = new GameWindow("Zero Day Exploit");
	public HashMap<String, Boolean> internalKeys = new HashMap<String, Boolean>();
	public HashMap<Integer, GameWindow> auxWindows = new HashMap<Integer, GameWindow>();
	private int rootID;
	public static LuaJava baseLua = null;
	public static String fifthIP, darwinIP, uplinkIP, hostname;
	
	public static void prepareIPs()
	{
		try {
			fifthIP = InetAddress.getByName("www.fifthdimensionsoftware.com").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.fifthdimensionsoftware.com\". It's no big deal.");
			fifthIP = "UNKNOWN_IP";
		}
		try {
			darwinIP = InetAddress.getByName("www.darwinia.co.uk").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.darwinia.co.uk\". It's no big deal.");
			darwinIP = "UNKNOWN_IP";
		}
		try {
			uplinkIP = InetAddress.getByName("www.uplink.co.uk").getHostAddress();
		} catch (UnknownHostException e) {
			System.err.println("Error resolving \"www.uplink.co.uk\". It's no big deal.");
			uplinkIP = "UNKNOWN_IP";
		}
		try
		{
		    hostname = InetAddress.getLocalHost().getHostName();
		}
		catch (UnknownHostException ex)
		{
			System.err.println("Error resolving the local hostname. It's no big deal.");
			hostname = "UNKNOWN";
		}
	}
	
	public static void throwFatal(String message)
	{
		JOptionPane.showMessageDialog(ZeroDayExploit.getInstance().rootWindow,message);  
		System.exit(1);
	}
	
	/*public static void main(String[] args)
	{
		new ZeroDayExploit().run(args);
	}*/
	
	public void run(String[] args)
	{
		this.gameArgs = args;
		if(instance == null)
		{
			instance = this;
			if(!System.getProperty("os.name").toLowerCase().contains("windows"))
			{
				throwFatal("Zero Day Exploit is not yet prepared to handle a non-windows OS such as "+System.getProperty("os.name")+", and may contain extreme issues.\nWill now exit.");
			}
			
			this.parseArgs();
			
			//Populate the server list with saved servers
			TargetServer.populateServers();
			
			//Prepare special real IPs
			//ZeroDayExploit.prepareIPs();
			
			/*if(!this.getKey("skipCheck"))
			{
				//this.secureData(new File("lib.dat"));
			}else
			{
				System.err.println("System check skipped, forced failure");
				//this.internalKeys.put("purchased", this.verifyPurchase("BitTorrent") && this.verifyPurchase("uTorrent"));
				this.internalKeys.put("hash", false);
			}*/
			
			baseLua = new LuaJava();
			Properties configFile = new Properties();
		    try {
		      configFile.load(ZipHandler.getStreamForFile("res.dat", "Properties.cfg"));
		    }catch(Exception eta){
		        eta.printStackTrace();
		    }
		    this.rootID = Integer.parseInt(configFile.getProperty("primaryScreen"));
			if(true)
			{
			    //Cleanup on exit
			    Runtime.getRuntime().addShutdownHook(new ExitThread());
			    
				//Setup the GameFrame
				this.prepareWindow(rootWindow, this.rootID);
				for(int loop = 0; loop < this.enumerateWindows(); loop++)
				{
					if(loop != this.rootID)
					{
						GameWindow tmpWindow = new GameWindow(""+loop);
						this.auxWindows.put(loop, tmpWindow);
						this.prepareWindow(tmpWindow, loop);
						tmpWindow.ultimateBufferGraphics.setColor(Color.black);
						tmpWindow.ultimateBufferGraphics.fillRect(0, 0, tmpWindow.getWidth(), tmpWindow.getHeight());
						tmpWindow.ultimateBufferGraphics.setColor(Color.white);
					}
				}
				//Allocate resources
				baseLua.allocateResource("5th_Logo");
				baseLua.allocateResource("Zero_Logo");
				baseLua.allocateResource("Pattern_Cube");
				
				//Display logo once primary allocation completes
				baseLua.getScreen(this.rootID).drawImage(baseLua.generatePattern(baseLua.getResource("Pattern_Cube"), baseLua.rootWidth(), baseLua.rootHeight()), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
				baseLua.getScreen(this.rootID).drawImage(baseLua.generateBorder(Color.black, baseLua.rootWidth(), baseLua.rootHeight(), 10), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
				baseLua.getScreen(this.rootID).drawImage(baseLua.getResource("5th_Logo"), baseLua.rootWidth()/2 - baseLua.getResource("5th_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("5th_Logo").getHeight()/2, baseLua.getObserver());
				baseLua.repaintScreen();
				//Set windows to visible once the screen is prepared
				rootWindow.setVisible(true);
				for(Integer item : this.auxWindows.keySet().toArray(new Integer[0]))
				{
					System.err.println("Window "+item+" initialized");
					this.auxWindows.get(item).setVisible(true);
				}
				
				//Wait for the script and port binding to finish
				long prevTime = System.currentTimeMillis();
				
				//baseLua.getScreen().drawImage(baseLua.getResource("Splash_Back"), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
				baseLua.repaintScreen();
				ExecutionCore.executeFunction("boot", "allocate");
				while(System.currentTimeMillis() < prevTime + 1500){}
				prevTime = System.currentTimeMillis();
				baseLua.getScreen(this.rootID).drawImage(baseLua.generatePattern(baseLua.getResource("Pattern_Cube"), baseLua.rootWidth(), baseLua.rootHeight()), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
				baseLua.getScreen(this.rootID).drawImage(baseLua.generateBorder(Color.black, baseLua.rootWidth(), baseLua.rootHeight(), 10), 0, 0, baseLua.rootWidth(), baseLua.rootHeight(), baseLua.getObserver());
				baseLua.getScreen(this.rootID).drawImage(baseLua.getResource("Zero_Logo"), baseLua.rootWidth()/2 - baseLua.getResource("Zero_Logo").getWidth()/2, baseLua.rootHeight()/2 - baseLua.getResource("Zero_Logo").getHeight()/2, baseLua.getObserver());
				baseLua.repaintScreen();
				while(System.currentTimeMillis() < prevTime + 1500){}
				//setup the looping music playlist
				ExecutionCore.executeStreamAsync(ZipHandler.getStreamForFile("res.dat", "music.lua"), "music.lua","Music", "");
				//Setup the tick loop
				new TickThread().start();
				
				//Booting "Bitpro Industries unified operating system", otherwise throw the destroy trick (nod to revelation)
				if(this.getKey("purchased"))
					ExecutionCore.executeFunction("boot", "boot");
				else
					this.destroyTrick();
			}
		}else
		{
			System.err.println("ZeroDayExploit was already instantiated! (THIS SHOULD BE IMPOSSIBLE!)");
			System.exit(1);
		}
	}
	
	private void destroyTrick()
	{
		//Screw with pirates... Muahahaha
		/*this.rootWindow.bufferGraphics.setColor(Color.black);
		this.rootWindow.bufferGraphics.fillRect(0, 0, baseLua.rootWidth(), baseLua.rootHeight());*/
		this.rootWindow.bufferGraphics.setColor(Color.white);
		Random rng = new Random();
		long prevTime = System.currentTimeMillis();
		while(System.currentTimeMillis() < prevTime + 30000)
		{
			String toString = this.generateString();
			this.rootWindow.bufferGraphics.setFont(new Font("Arial", Font.PLAIN, rng.nextInt(65)+10));
			this.rootWindow.bufferGraphics.drawString(toString, rng.nextInt(baseLua.rootWidth()) - this.rootWindow.bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(baseLua.rootHeight()));
			this.rootWindow.repaint();
			for(Integer item : this.auxWindows.keySet().toArray(new Integer[0]))
			{
				toString = this.generateString();
				this.auxWindows.get(item).bufferGraphics.setFont(new Font("Arial", Font.PLAIN, rng.nextInt(65)+10));
				this.auxWindows.get(item).bufferGraphics.drawString(toString, rng.nextInt(this.auxWindows.get(item).getWidth())  - this.auxWindows.get(item).bufferGraphics.getFontMetrics().stringWidth(toString) / 2, rng.nextInt(this.auxWindows.get(item).getHeight()));
				this.auxWindows.get(item).repaint();
			}
		}
		
		this.rootWindow.bufferGraphics.setFont(new Font("Arial", Font.PLAIN, 15));
		this.rootWindow.bufferGraphics.setColor(Color.black);
		this.rootWindow.bufferGraphics.fillRect(0, 0, this.rootWindow.getWidth(), this.rootWindow.getHeight());
		this.rootWindow.repaint();
		for(Integer item : this.auxWindows.keySet().toArray(new Integer[0]))
		{
			this.auxWindows.get(item).bufferGraphics.setColor(Color.black);
			this.auxWindows.get(item).bufferGraphics.fillRect(0, 0, this.auxWindows.get(item).getWidth(), this.auxWindows.get(item).getHeight());
			this.auxWindows.get(item).repaint();
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {}
		String message = "Connection terminated by "+hostname+".";
		String prevString = "";
		this.rootWindow.bufferGraphics.setColor(Color.white);
		for(char character : message.toCharArray())
		{
			prevString += character;
			this.rootWindow.bufferGraphics.setColor(Color.black);
			this.rootWindow.bufferGraphics.fillRect(0, 0, baseLua.rootWidth(), baseLua.rootHeight());
			this.rootWindow.bufferGraphics.setColor(Color.white);
			this.rootWindow.bufferGraphics.drawString(prevString, 100, 100);
			this.rootWindow.repaint();
			try {
				Thread.sleep(25);
			} catch (InterruptedException e) {}
		}
		try {
			Thread.sleep(1500);
		} catch (InterruptedException e) {}
		
		System.exit(1);
	}
	
	private String generateString()
	{
		String[] list = {"YOU ARE NOT A SLAVE", "YOU DESERVE MORE THAN THIS", "THE TIME IS NEAR", "THERE IS NOTHING TO FEAR", "REVELATION IS COMING", "IN TIME YOU WILL THANK US", "YOU ARE MORE THAN A NUMBER", "WE ARE THE FIRST OF THE CHILDREN", "HOPE LIES IN THE RUINS", "THE MACHINE DOES NOT OWN YOU", "OUR SPIRITS ARE BEING CRUSHED", "YOU CANNOT DIGITISE LIFE", "WE WILL SEE YOU ON THE OTHER SIDE"};
	    return list[new Random().nextInt(list.length)];
	}
	
	public String getArgument(int index)
	{
		return this.gameArgs[index];
	}
	
	public void parseArgs()
	{
		for(String arg : this.gameArgs)
		{
			switch(arg)
			{
			case "--debug":
				this.internalKeys.put("debug", true);
				break;
			case "--skip-check":
				this.internalKeys.put("skipCheck", true);
				break;
			}
		}
	}
	
	public boolean getKey(String key)
	{
		if(key.equals("debug") && hostname.toLowerCase().equals("glados") && (this.internalKeys.get("debug") != null ? this.internalKeys.get("debug") : false))
		{
			return true;
		}else
			if(this.internalKeys.containsKey(key))
				return this.internalKeys.get(key);
			else
				return false;
	}
	
	//Return the one and only instance of the game core
	public static ZeroDayExploit getInstance()
	{
		return ZeroDayExploit.instance;
	}
	
	//Used by baseLua
	public static Graphics2D getScreen(int id)
	{
		if(id != getInstance().rootID)
			return getInstance().auxWindows.get(id).bufferGraphics();
		else
			return getInstance().rootWindow.bufferGraphics;
	}
	
	//Used by baseLua
	public static WindowManager getWindow()
	{
		return getInstance().rootWindow.windowManager;
	}
	public void prepareWindow(GameWindow window, int screen)
	{
		GraphicsDevice[] screens = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();
		
		
		Dimension size = null;
		if(screens.length -1 >= screen)
			size = new Dimension(screens[screen].getDisplayMode().getWidth(), screens[screen].getDisplayMode().getHeight());
		else
			return;
		
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setSize(size);
		window.setLocation(screens[screen].getConfigurations()[0].getBounds().x, screens[screen].getConfigurations()[0].getBounds().y);
		window.setExtendedState(JFrame.MAXIMIZED_BOTH);
		window.setUndecorated(true);
		window.setAlwaysOnTop(!this.getKey("debug"));
		//Setup the double buffer
		window.initializeBuffer();
	}
	
	public int enumerateWindows()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices().length;
	}
	
	public static String filterPath(String dir, String name, String extension)
	{
		return new File(new File("").getAbsolutePath() + "\\"+dir+"\\"+name.replace("..", ".")+"."+extension).getAbsolutePath();
	}
}
