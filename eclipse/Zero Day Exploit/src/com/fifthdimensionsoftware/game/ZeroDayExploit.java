package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.util.HashMap;

import javax.swing.JFrame;

import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;
import com.fifthdimensionsoftware.network.UPnP;

public class ZeroDayExploit{
	
	public String[] gameArgs;
	private static ZeroDayExploit instance;
	public boolean inGame = false;
	public GameWindow rootWindow = new GameWindow("Zero Day Exploit");
	private HashMap<String, Boolean> internalKeys = new HashMap<String, Boolean>();
	
	public static void main(String[] args)
	{
		new ZeroDayExploit().run(args);
	}
	public void run(String[] args)
	{
		this.gameArgs = args;
		if(instance == null)
		{
			instance = this;
			this.parseArgs();
			//Setup the GameFrame
			rootWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			rootWindow.setSize(Toolkit.getDefaultToolkit().getScreenSize());
		    rootWindow.setExtendedState(JFrame.MAXIMIZED_BOTH);
		    rootWindow.setUndecorated(true);
			rootWindow.setAlwaysOnTop(true);
			rootWindow.setVisible(true);
			//Setup the double buffer
			rootWindow.initializeBuffer();
			//Draw the splash screen
			LuaJava.allocateResource("Splash_Back");
			//LuaJava.allocateResource("Splash_Logo");
			LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Back"), 0, 0, LuaJava.screenWidth(), LuaJava.screenHeight(), LuaJava.getObserver());
			//LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Logo"), LuaJava.screenWidth()/2 - LuaJava.getResource("Splash_Logo").getWidth()/2, LuaJava.screenHeight()/2 - LuaJava.getResource("Splash_Logo").getHeight()/2, LuaJava.getObserver());
			//Wait for the script and port binding to finish
			long prevTime = System.currentTimeMillis();
			if(this.getKey("debug"))
				try {
					System.err.println("Debug mode enabled!");
					//Map port 8080
					LuaJava.getScreen().drawString("Mapping port 8080...", 0, 10);
					LuaJava.repaintScreen();
					if(!UPnP.mapPort(8080, "TCP", "Zero Day Exploit"))
					{
						LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Back"), 0, 0, LuaJava.screenWidth(), LuaJava.screenHeight(), LuaJava.getObserver());
						//LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Logo"), LuaJava.screenWidth()/2 - LuaJava.getResource("Splash_Logo").getWidth()/2, LuaJava.screenHeight()/2 - LuaJava.getResource("Splash_Logo").getHeight()/2, LuaJava.getObserver());
						LuaJava.getScreen().setColor(Color.red);
						LuaJava.getScreen().drawString("Port mapping failed!", 0, 10);
						LuaJava.repaintScreen();
						LuaJava.getScreen().setColor(Color.white);
						LuaJava.sleep(1000);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Back"), 0, 0, LuaJava.screenWidth(), LuaJava.screenHeight(), LuaJava.getObserver());
			//LuaJava.getScreen().drawImage(LuaJava.getResource("Splash_Logo"), LuaJava.screenWidth()/2 - LuaJava.getResource("Splash_Logo").getWidth()/2, LuaJava.screenHeight()/2 - LuaJava.getResource("Splash_Logo").getHeight()/2, LuaJava.getObserver());
			LuaJava.getScreen().drawString("Preparing textures...", 0, 10);
			LuaJava.repaintScreen();
			ExecutionCore.executeFunction("boot", "allocate");
			while(System.currentTimeMillis() < prevTime + 2000){}
			LuaJava.getScreen().clearRect(0, 0, LuaJava.screenWidth(), LuaJava.screenHeight());
			LuaJava.repaintScreen();
			//setup the looping music playlist
			ExecutionCore.executeScriptAsync("main", "res/music.lua","Music");
			//Setup the tick loop
			ExecutionCore.executeScriptAsync("main", "res/tick.lua","Tick");
			//Booting "Bitpro Industries unified operating system"
			ExecutionCore.executeFunction("boot", "boot");
		}else
		{
			System.err.println("ZeroDayExploit was already instantiated! (THIS SHOULD BE IMPOSSIBLE!)");
			System.exit(1);
		}
	}
	
	public String getArgument(int index)
	{
		return this.gameArgs[index];
	}
	
	public void parseArgs()
	{
		for(String arg : this.gameArgs)
		{
			switch(arg)
			{
			case "--debug":
				this.internalKeys.put("debug", true);
				break;
			}
		}
	}
	
	private boolean getKey(String key)
	{
		if(this.internalKeys.containsKey(key))
			return this.internalKeys.get(key);
		else
			return false;
	}
	
	//Return the one and only instance of the game core
	public static ZeroDayExploit getInstance()
	{
		return ZeroDayExploit.instance;
	}
	
	//Used by LuaJava
	public static Graphics2D getScreen()
	{
		return getInstance().rootWindow.bufferGraphics();
	}
	
	//Used by LuaJava
	public static WindowManager getWindow()
	{
		return getInstance().rootWindow.windowManager;
	}
}
