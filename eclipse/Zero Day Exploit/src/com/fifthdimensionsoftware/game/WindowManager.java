package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.HashMap;

import com.fifthdimensionsoftware.lua.ExecutionCore;

public class WindowManager {
	private HashMap<String,Window> windows = new HashMap<String,Window>();
	
	public void addWindow(int x, int y, int width, int height, String title)
	{
		Window newWindow = new Window();
		newWindow.setSize(width, height);
		newWindow.setLocation(x, y);
		newWindow.title = title;
		newWindow.initBuffer();
		windows.put(title, newWindow);
	}
	
	public Graphics2D getWindow(String name)
	{
		return windows.get(name).bufferGraphics;
	}
	
	public Window window(String name)
	{
		return windows.get(name);
	}
	
	public void repaint()
	{
		for(Object item : this.windows.values().toArray())
		{
			Window window = (Window)item;
			window.paint();
		}
	}
	
	public String[] windows()
	{
		return this.windows.keySet().toArray(new String[0]);
	}
}
class Window
{
	int width, height, x, y, oldX = 0, oldY = 0, Rx, Ry;
	String title;
	BufferedImage doubleBuffer;
	Graphics2D bufferGraphics;
	Color barColor = new Color(115, 38, 38);
	Color borderOne = new Color(93, 6, 6);
	Color borderTwo = new Color(149, 92, 92);
	
	public HashMap<String, Rectangle> listenerMethods = new HashMap<String, Rectangle>();
	
	boolean showTitleBar, showBorder, showTitleText, postrender, alignWithMouse;
	
	public void initBuffer()
	{
		doubleBuffer = new BufferedImage(this.width, this.height, BufferedImage.TYPE_4BYTE_ABGR);
		this.bufferGraphics = doubleBuffer.createGraphics();
		this.updateStyle("NORMAL");
	}
	
	public void addMouseRegion(String method, String script, int x, int y, int width, int height)
	{
		this.listenerMethods.put(method+"|"+script, new Rectangle(x,y,width,height));
	}
	
	public String[] listenerMethods()
	{
		return this.listenerMethods.keySet().toArray(new String[0]);
	}
	
	public Rectangle region(String region)
	{
		return this.listenerMethods.get(region);
	}
	
	public void setLocation(int x2, int y2) 
	{
		this.x = x2;
		this.y = y2;
	}

	public void setSize(int width2, int height2) 
	{
		this.width = width2;
		this.height = height2;
	}
	
	public void move()
	{
		this.Rx = MouseInfo.getPointerInfo().getLocation().x - this.x;
		this.Ry = MouseInfo.getPointerInfo().getLocation().y - this.y;
		this.alignWithMouse = !this.alignWithMouse;
	}
	
	public void updateStyle(String style)
	{
		switch(style)
		{
		case "NORMAL":
			this.showBorder = true;
			this.postrender = true;
			this.showTitleBar = true;
			this.showTitleText = true;
			break;
		case "NOBORDER":
			this.showBorder = false;
			break;
		case "BORDER":
			this.showBorder = true;
			break;
		case "POSTRENDER":
			this.postrender = true;
			break;
		case "NOPOSTRENDER":
			this.postrender = false;
			break;
		case "TITLEBAR":
			this.showTitleBar = true;
			break;
		case "NOTITLEBAR":
			this.showTitleBar = false;
			break;
		case "TITLETEXT":
			this.showTitleText = true;
			break;
		case "NOTITLETEXT":
			this.showTitleText = false;
			break;
		}
	}

	public void paint()
	{
		Color tmpColor = this.bufferGraphics.getColor();
		//Title bar
		if(this.showTitleBar)
		{
			this.bufferGraphics.setColor(this.barColor);
			this.bufferGraphics.fillRect(0, 0, width, 20);
		}
		//Window borders
		if(this.showBorder)
		{
			//Window border 1
			this.bufferGraphics.setColor(this.borderOne);
			this.bufferGraphics.drawRect(0, 0, width-1, height-1);
			//Window border 2
			this.bufferGraphics.setColor(this.borderTwo);
			this.bufferGraphics.drawRect(1, 1, width-3, height-3);
		}
		//Title text
		if(this.showTitleText)
		{
			this.bufferGraphics.setColor(Color.white);
			this.bufferGraphics.drawString(this.title, 5, 15);
		}
		this.bufferGraphics.setColor(tmpColor);
		if(this.postrender)
			ExecutionCore.executePostrender(title);
		//Push the buffer to the correct position
		if(this.alignWithMouse)
		{
			this.x = MouseInfo.getPointerInfo().getLocation().x - this.Rx;
			this.y = MouseInfo.getPointerInfo().getLocation().y - this.Ry;
		}
		if(this.x != this.oldX || this.y != this.oldY)
		{
			ZeroDayExploit.getInstance().rootWindow.windowBufferGraphics.setBackground(new Color(0,0,0,1));
			ZeroDayExploit.getInstance().rootWindow.windowBufferGraphics.clearRect(this.oldX, this.oldY, this.width, this.height);
		}
		this.oldX = this.x;
		this.oldY = this.y;
		ZeroDayExploit.getInstance().rootWindow.windowBufferGraphics.drawImage(doubleBuffer, this.x, this.y, this.width, this.height, ZeroDayExploit.getInstance().rootWindow);
	}
}