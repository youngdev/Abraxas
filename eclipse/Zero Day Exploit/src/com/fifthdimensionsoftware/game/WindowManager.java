package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.util.HashMap;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;

public class WindowManager {
	public volatile HashMap<String,Window> windows = new HashMap<String,Window>();
	public Color barColor = new Color(115, 38, 38), borderOne = new Color(93, 6, 6), borderTwo = new Color(149, 92, 92);
	private GameWindow rootWindow;
	public String activeWindow = "";
	
	public WindowManager(GameWindow newRoot)
	{
		this.rootWindow = newRoot;
	}
	
	public WindowManager() 
	{
		
	}

	public void addWindow(int x, int y, int width, int height, String title)
	{
		final Window newWindow = new Window(ZeroDayExploit.lwjglCore.rootWindow.windowMan);
		newWindow.setSize(width, height);
		newWindow.setLocation(x, y);
		newWindow.title = title;
		newWindow.initBuffer();
		windows.put(title, newWindow);
		newWindow.tickThread = new Thread(){
			private boolean interrupted = false;
			public void run()
			{
				this.setName("Window Tick Thread: "+newWindow.title);
				while (ZeroDayExploit.getInstance().getKey("windowUpdate") && !this.isInterrupted())
				{
					try {
						newWindow.paintDetail();
					} catch (SlickException e) {
						e.printStackTrace();
					}
				}
			}
			@Override
			public void interrupt()
			{
				System.err.println("Interrupted "+this.getName());
				this.interrupted = true;
			}
			
			@Override
			public boolean isInterrupted()
			{
				return this.interrupted;
			}
		};
		//newWindow.tickThread.start();
	}
	
	public void removeWindow(String name)
	{
		this.getWindow(name).tickThread.interrupt();
		try {
			this.getWindow(name).tickThread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		this.getWindow(name).tickThread = null;
		windows.remove(name);
		this.rootWindow.windowBufferGraphics.clearRect(0, 0, this.rootWindow.getWidth(), this.rootWindow.getHeight());
	}
	
	public Graphics2D windowSurfaceLegacy(String name)
	{
		return windows.get(name).bufferGraphics;
	}
	
	public Graphics windowSurface(String name)
	{
		try {
			return windows.get(name).backBuffer.getGraphics();
		} catch (SlickException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public Window getWindow(String name)
	{
		return windows.get(name);
	}
	
	public synchronized void repaint()
	{
		try {
			for(Window window : this.windows.values())
			{
				window.paint();
			}
		} catch (Exception e) {
			System.err.println("Paint exception, system reboot?");
			this.windows.clear();
			System.gc();
		}
	}
	
	public String[] windows()
	{
		return this.windows.keySet().toArray(new String[0]);
	}
	
	public void setTheme(Color title, Color border1, Color border2)
	{
		this.barColor = title;
		this.borderOne = border1;
		this.borderTwo = border2;
	}
}
