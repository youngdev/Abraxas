package com.fifthdimensionsoftware.game;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsEnvironment;
import java.awt.MouseInfo;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.HashMap;

import com.fifthdimensionsoftware.lua.ExecutionCore;

public class WindowManager {
	private HashMap<String,Window> windows = new HashMap<String,Window>();
	public Color barColor = new Color(115, 38, 38), borderOne = new Color(93, 6, 6), borderTwo = new Color(149, 92, 92);
	private GameWindow rootWindow;
	public String activeWindow = "";
	
	public WindowManager(GameWindow newRoot)
	{
		this.rootWindow = newRoot;
	}
	
	public void addWindow(int x, int y, int width, int height, String title)
	{
		Window newWindow = new Window(this.rootWindow);
		newWindow.setSize(width, height);
		newWindow.setLocation(x, y);
		newWindow.title = title;
		newWindow.initBuffer();
		windows.put(title, newWindow);
	}
	
	public void removeWindow(String name)
	{
		windows.put(name, null);
		windows.remove(name);
		this.rootWindow.windowBufferGraphics.clearRect(0, 0, this.rootWindow.getWidth(), this.rootWindow.getHeight());
	}
	
	public Graphics2D windowSurface(String name)
	{
		return windows.get(name).bufferGraphics;
	}
	
	public Window getWindow(String name)
	{
		return windows.get(name);
	}
	
	public void repaint()
	{
		for(Object item : this.windows.values())
		{
			Window window = (Window)item;
			window.paint();
		}
	}
	
	public String[] windows()
	{
		return this.windows.keySet().toArray(new String[0]);
	}
	
	public void setTheme(Color title, Color border1, Color border2)
	{
		this.barColor = title;
		this.borderOne = border1;
		this.borderTwo = border2;
	}
}
class Window
{
	int width, height, x, y, oldX = 0, oldY = 0, Rx, Ry;
	String title;
	BufferedImage doubleBuffer;
	Graphics2D bufferGraphics;
	Color barColor, borderOne, borderTwo;
	GameWindow theWindow;
	String activeBox = "";
	
	public Window(GameWindow window)
	{
		this.theWindow = window;
		this.barColor = window.windowManager.barColor;
		this.borderOne = window.windowManager.borderOne;
		this.borderTwo = window.windowManager.borderTwo;
	}
	
	public HashMap<String, Rectangle> listenerMethods = new HashMap<String, Rectangle>();
	public HashMap<String, TextField> textBoxes = new HashMap<String, TextField>();
	public HashMap<String, CheckBox> checkBoxes = new HashMap<String, CheckBox>();
	
	boolean showTitleBar, showBorder, showTitleText, postrender, alignWithMouse, updateWindow = false, tmpUpdate = true;
	
	public void initBuffer()
	{
		GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();
		doubleBuffer = gc.createCompatibleImage(width, height, 3);//new BufferedImage(this.width, this.height, BufferedImage.TYPE_4BYTE_ABGR);
		this.bufferGraphics = doubleBuffer.createGraphics();
		this.updateStyle("NORMAL");
	}
	
	public void addMouseRegion(String method, String script, int x, int y, int width, int height)
	{
		this.listenerMethods.put(method+"|"+script, new Rectangle(x,y,width,height));
	}
	
	public void removeMouseRegion(String method, String script)
	{
		this.textBoxes.remove(method+"|"+script);
	}
	
	public void addTextBox(String name, int x, int y, int width, int height, String func, String script)
	{
		this.textBoxes.put(name, new TextField(x, y, width, height, func, script));
		this.addMouseRegion("INTERNALTEXT", name, x, y, width, height);
	}
	
	public void addCheckBox(String name, int x, int y, boolean showLabel)
	{
		this.checkBoxes.put(name, new CheckBox(x,y, name, showLabel));
		this.addMouseRegion("INTERNALCHECK", name, x, y, 16, 16);
	}
	
	public void addCheckBox(String name, int x, int y)
	{
		this.checkBoxes.put(name, new CheckBox(x,y, name, true));
		this.addMouseRegion("INTERNALCHECK", name, x, y, 16, 16);
	}
	
	public String[] listenerMethods()
	{
		return this.listenerMethods.keySet().toArray(new String[0]);
	}
	
	public String[] textboxes()
	{
		return this.textBoxes.keySet().toArray(new String[0]);
	}
	
	public String[] checkboxes()
	{
		return this.checkBoxes.keySet().toArray(new String[0]);
	}
	
	public CheckBox checkBox(String name)
	{
		return this.checkBoxes.get(name);
	}
	
	public TextField textbox(String name)
	{
		return this.textBoxes.get(name);
	}
	
	public Rectangle region(String region)
	{
		return this.listenerMethods.get(region);
	}
	
	public void setLocation(int x2, int y2) 
	{
		this.x = x2;
		this.y = y2;
	}

	public void setSize(int width2, int height2) 
	{
		this.width = width2;
		this.height = height2;
	}
	
	public void move()
	{
		this.Rx = MouseInfo.getPointerInfo().getLocation().x - this.x;
		this.Ry = MouseInfo.getPointerInfo().getLocation().y - this.y;
		this.alignWithMouse = !this.alignWithMouse;
	}
	
	public void enableUpdates(boolean flag)
	{
		this.updateWindow = flag;
	}
	
	public void updateNext()
	{
		this.tmpUpdate = true;
	}
	
	public void updateColors(Color title, Color border1, Color border2)
	{
		this.barColor = title;
		this.borderOne = border1;
		this.borderTwo = border2;
	}
	
	public void updateStyle(String style)
	{
		switch(style)
		{
		case "NORMAL":
			this.showBorder = true;
			this.postrender = true;
			this.showTitleBar = true;
			this.showTitleText = true;
			break;
		case "NOBORDER":
			this.showBorder = false;
			break;
		case "BORDER":
			this.showBorder = true;
			break;
		case "POSTRENDER":
			this.postrender = true;
			break;
		case "NOPOSTRENDER":
			this.postrender = false;
			break;
		case "TITLEBAR":
			this.showTitleBar = true;
			break;
		case "NOTITLEBAR":
			this.showTitleBar = false;
			break;
		case "TITLETEXT":
			this.showTitleText = true;
			break;
		case "NOTITLETEXT":
			this.showTitleText = false;
			break;
		case "FREE":
			this.showBorder = false;
			this.postrender = false;
			this.showTitleBar = false;
			this.showTitleText = false;
			break;
		}
	}
	
	public void paintDetail()
	{
		Color tmpColor = this.bufferGraphics.getColor();
		if(this.showTitleBar)
		{
			this.bufferGraphics.setColor(this.barColor);
			this.bufferGraphics.fillRect(0, 0, width, 20);
		}
		//Window borders
		if(this.showBorder)
		{
			//Window border 1
			this.bufferGraphics.setColor(this.borderOne);
			this.bufferGraphics.drawRect(0, 0, width-1, height-1);
			//Window border 2
			this.bufferGraphics.setColor(this.borderTwo);
			this.bufferGraphics.drawRect(1, 1, width-3, height-3);
		}
		//Title text
		if(this.showTitleText)
		{
			this.bufferGraphics.setColor(Color.white);
			this.bufferGraphics.drawString(this.title, 5, 15);
		}
		
		this.bufferGraphics.setColor(tmpColor);
		
		if(this.postrender)
			ExecutionCore.executePostrender(title);
	}

	public void paint()
	{
		//Title bar
		if(this.updateWindow || this.tmpUpdate)
		{
			this.tmpUpdate = false;
			this.paintDetail();
		}
		
		//Push the buffer to the correct position
		if(this.alignWithMouse)
		{
			this.x = MouseInfo.getPointerInfo().getLocation().x - this.Rx;
			this.y = MouseInfo.getPointerInfo().getLocation().y - this.Ry;
		}
		if(this.x != this.oldX || this.y != this.oldY)
		{
			this.theWindow.windowBufferGraphics.setBackground(new Color(0,0,0,1));
			this.theWindow.windowBufferGraphics.clearRect(this.oldX, this.oldY, this.width, this.height);
		}
		this.oldX = this.x;
		this.oldY = this.y;
		for(String item : this.textboxes())
		{
			this.textBoxes.get(item).paint(bufferGraphics);
		}
		for(String item : this.checkboxes())
		{
			this.checkBoxes.get(item).paint(bufferGraphics);
		}
		this.theWindow.windowBufferGraphics.drawImage(doubleBuffer, this.x, this.y, this.width, this.height, this.theWindow);
		if(!this.theWindow.equals(ZeroDayExploit.getInstance().rootWindow))
		{
			this.theWindow.ultimateBufferGraphics.drawImage(this.theWindow.windowBuffer, 0, 0, this.theWindow.getWidth(), this.theWindow.getHeight(), null);
			this.theWindow.pushBuffer(this.theWindow.getGraphics());
		}
	}
}