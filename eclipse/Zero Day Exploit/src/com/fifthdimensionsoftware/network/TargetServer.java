package com.fifthdimensionsoftware.network;

import java.awt.Point;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Random;

import com.fifthdimensionsoftware.game.ZeroDayExploit;
import com.fifthdimensionsoftware.lua.ExecutionCore;
import com.fifthdimensionsoftware.lua.LuaJava;

public class TargetServer implements Serializable
{
	private static final long serialVersionUID = 2L;
	public Point location;
	public String ip = generateIP(), desc = "UNKNOWN";
	public static HashMap<String, TargetServer> serverList = new HashMap<String, TargetServer>();
	public String tmpDir = System.getProperty("java.io.tmpdir");
	
	public static void save(TargetServer object, File toSave) throws FileNotFoundException, IOException
	{
		ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(toSave));
		
		os.writeObject(object);
		
		os.close();
	}
	
	public static TargetServer load(File toLoad) throws IOException, ClassNotFoundException
	{
		ObjectInputStream is = new ObjectInputStream(new FileInputStream(toLoad));
		
		TargetServer toReturn = (TargetServer)is.readObject();
		
		is.close();
		
		return toReturn;
	}
	
	public static File shouldSave(TargetServer serverParam)
	{
		File theDir = new File(System.getProperty("java.io.tmpdir")+"/servers/"+serverParam.ip);

		  // if the directory does not exist, create it
		  if (!theDir.exists())
			  theDir.mkdir();  
		  
		  theDir = new File(System.getProperty("java.io.tmpdir")+"/servers/"+serverParam.ip+"/disk");

		  // if the directory does not exist, create it
		  if (!theDir.exists())
			  theDir.mkdir();  
		
		return new File(System.getProperty("java.io.tmpdir")+"/servers/"+serverParam.ip+"/serverObj.bin");
	}
	
	public static void populateServers()
	{
		File theDir = new File(System.getProperty("java.io.tmpdir")+"/servers/");

		  // if the directory does not exist, create it
		  if (!theDir.exists())
			  theDir.mkdir(); 
		String path = System.getProperty("java.io.tmpdir")+"/servers/";
		 
		String files;
		File folder = new File(path);
		File[] listOfFiles = folder.listFiles(); 
		for (int i = 0; i < listOfFiles.length; i++) 
		{
		   if (listOfFiles[i].isDirectory()) 
		   {
			   files = listOfFiles[i].getName();
			   try {
				serverList.put(files, load(new File(System.getProperty("java.io.tmpdir")+"/servers/"+files+"/serverObj.bin")));
			} catch (ClassNotFoundException | IOException e) {
				System.err.println("An error occured loading the configuration for "+listOfFiles[i].getName());
			}
		   }
		}
		      
	}
	
	public static String generateIP()
	{
		Random r = new Random();
		String toReturn = r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256);
		
		while(toReturn.startsWith("224.") || toReturn.contains("0.") || toReturn.contains(".0") || toReturn.equals(ZeroDayExploit.fifthIP))
		{
			toReturn = generateIP();
		}
		
		return toReturn;
	}
	
	public TargetServer(String ip, String desc, Point locParam)
	{
		this.ip = ip;
		this.desc = desc;
		this.location = locParam;
		TargetServer.serverList.put(ip, this);
	}
	
	public TargetServer(String desc, Point locParam)
	{
		this(generateIP(), desc, locParam);
	}
	
	public void execute()
	{
		LuaJava.nextContext = new File(this.tmpDir).getAbsolutePath() + "/servers/"+this.ip+"/";
		ExecutionCore.executeFunctionNoFilter(new File(this.tmpDir).getAbsolutePath()+"\\servers\\"+this.ip+"\\disk\\boot.lua", "boot");
	}
}
