package com.fifthdimensionsoftware.zero;

// ______ _______  ______  _____       ______  _______ __   __
//	____/ |______ |_____/ |     |      |     \ |_____|   \_/  
// /_____ |______ |    \_ |_____|      |_____/ |     |    |   
//                                                        
//  _______ _     _  _____          _____  _____ _______  
//  |______  \___/  |_____] |      |     |   |      |     
//  |______ _/   \_ |       |_____ |_____| __|__    |     

import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Arrays;
import java.util.Calendar;

import javax.swing.JOptionPane;

import org.lwjgl.opengl.Display;

import com.fifthdimensionsoftware.zero.asm.Processor;
import com.fifthdimensionsoftware.zero.asm.Register;
import com.fifthdimensionsoftware.zero.graphics.GLComplex;
import com.fifthdimensionsoftware.zero.tools.GameUtil;
import com.fifthdimensionsoftware.zero.tools.MultiplexOutputStream;
import com.fifthdimensionsoftware.zero.tools.ZipUtil;

public class ZeroDayExploit
{
	public static void main(String[] args)
	{
		//Multiplex the terminal output
		try {
			MultiplexOutputStream.multiplexConsole(new FileOutputStream(new File("logFile.log"), false));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		
		//Update the library path to the new directory
		String osname = System.getProperty("os.name", "generic").toLowerCase().startsWith("windows") ? "win" : System.getProperty("os.name", "generic").toLowerCase().startsWith("mac") || System.getProperty("os.name", "generic").toLowerCase().startsWith("darwin") ? "mac" : "linux";
		
	    System.err.println("Loading native libraries from "+"/natives/"+osname);
	    
	    //TOUCHY CODE!!! - Adds the natives folder to the path, the hard way
	    try {
			final Field usrPathsField = ClassLoader.class.getDeclaredField("usr_paths");
			usrPathsField.setAccessible(true);
 
			//get array of paths
			final String[] paths = (String[])usrPathsField.get(null);
 
			//add the new path
			final String[] newPaths = Arrays.copyOf(paths, paths.length + 1);
			newPaths[newPaths.length-1] = new File("").getAbsolutePath()+"\\natives\\"+osname;
			usrPathsField.set(null, newPaths);
		} catch (NoSuchFieldException | SecurityException
				| IllegalArgumentException | IllegalAccessException e1) {
			e1.printStackTrace();
		}
	    
		System.setProperty("org.lwjgl.librarypath", new File("").getAbsolutePath()+"\\natives\\"+osname);
		
		try {
			Method method = URLClassLoader.class.getDeclaredMethod("addURL", new Class[]{URL.class});
			method.setAccessible(true);
			method.invoke(ClassLoader.getSystemClassLoader(), new Object[]{new File("lib.bin").toURI().toURL()});
		} catch (MalformedURLException | NoSuchMethodException
				| SecurityException | IllegalAccessException
				| IllegalArgumentException | InvocationTargetException e) {
			e.printStackTrace();
		}
		
		//Start the game
		GLComplex.beginGL();
	}
	
	public static void throwFatal(String message)
	{
		Display.destroy();
		
		JOptionPane.showMessageDialog(null, "A fatal error has occured! Gathering crash data may take some time, just sit tight.", "Fatal Error", JOptionPane.ERROR_MESSAGE);
		
		try {
			new Processor(new File("bios"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.err.println("Crash Report: \n"
				+ "Crash Message: " + message + "\n"
				+ "\tGame State: " + GameUtil.getState() + "\n"
				+ "\tLoaded Data Files: " + Arrays.toString(ZipUtil.getFiles()).replaceAll("\\[|\\]|,", "") + "\n"
				+ "\tProcessor State: " + (Processor.instance == null ? "Unloaded" : "Loaded - in mode " + Processor.instance.mode));
		if(Processor.instance != null)
		{
			System.err.println("\tRegister Dump:");
			for(Register item : Processor.globalRegsiters.values())
				System.err.println("\t\t" + item.toString());
			
			try {
				RandomAccessFile dump = new RandomAccessFile(new File(Calendar.getInstance().getTime().toString().split("\\ ")[3].replace(":", "") + ".dmp"), "rw");
				dump.setLength(Processor.instance.memory.length);
				dump.write(Processor.instance.memory);
				dump.close();
				System.err.println("\tVirual memory dump saved to " + Calendar.getInstance().getTime().toString().split("\\ ")[3].replace(":", "") + ".dmp");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		try {
			Desktop.getDesktop().open(new File("logFile.log"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.exit(1);
	}
}
