package com.fifthdimensionsoftware.zero.tools;

import java.util.HashMap;

import org.lwjgl.input.Keyboard;
import org.lwjgl.input.Mouse;
import org.newdawn.slick.AppGameContainer;
import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.gui.AbstractComponent;
import org.newdawn.slick.gui.TextField;

import com.fifthdimensionsoftware.zero.ZeroDayExploit;
import com.fifthdimensionsoftware.zero.asm.Processor;
import com.fifthdimensionsoftware.zero.graphics.GLComplex;
import com.fifthdimensionsoftware.zero.graphics.GraphicsUtil;

public class GameUtil
{
	private static int gameState = 0;
	private static Window newsWindow = new Window(GraphicsUtil.getScreenWidth() / 2 - (GraphicsUtil.getScreenWidth() / 3), 10, (GraphicsUtil.getScreenWidth() / 3) * 2, 170, Color.green, "News"), saveSelect = new Window(640, 480, 640, 50, Color.green, "Save Selection");
	
	private static class Window
	{
		public int x, y, width, height;
		public String title;
		public Color color;
		private boolean startDrag;
		
		private HashMap<String, AbstractComponent> componentMap = new HashMap<String, AbstractComponent>();
		
		public Window(int xParam, int yParam, int widthParam, int heightParam, Color colorParam, String titleParam)
		{
			this.x = xParam;
			this.y = yParam;
			this.width = widthParam;
			this.height = heightParam;
			this.color = colorParam;
			this.title = titleParam;
		}
		
		public void addComponent(String name, AbstractComponent c)
		{
			c.setLocation(x + c.getX(), y + c.getY());
			componentMap.put(name, c);
		}
		
		public AbstractComponent getComponent(String name)
		{
			return componentMap.get(name);
		}
		
		public void render(Graphics g)
		{
			if(Mouse.isButtonDown(0) && MouseUtil.withinBounds(this.x + width - 15, this.x + this.width - 5, this.y + 5, this.y + 15) && !startDrag)
				System.exit(0);
			
			if((Mouse.isButtonDown(0) && MouseUtil.withinBounds(this.x, this.x + this.width, this.y, this.y + 20)) || this.startDrag){
				int DX = Mouse.getDX(), DY = Mouse.getDY();
				
				this.x += DX;
				this.y -= DY;
				
				for(AbstractComponent comp : componentMap.values())
					comp.setLocation(comp.getX() + DX, comp.getY() - DY);
				
				this.startDrag = true;
			}
			
			if(!Mouse.isButtonDown(0))
				this.startDrag = false;
			
			//Resize
			if(Keyboard.isKeyDown(Keyboard.KEY_1) && startDrag && ZeroDayExploit.globalKeys.get("--debug"))
				this.width += Mouse.getDWheel() / 60;
			if(Keyboard.isKeyDown(Keyboard.KEY_2) && startDrag && ZeroDayExploit.globalKeys.get("--debug"))
				this.height += Mouse.getDWheel() / 60;
			
			g.setColor(Color.black);
			g.fillRect(x, y, width, height);
			
			g.setColor(color);
			g.drawRect(x, y, width, height);
			g.fillRect(x, y, width, 20);
			
			for(AbstractComponent comp : componentMap.values())
				try {
					comp.render(GLComplex.gc, g);
				} catch (SlickException e) {
					e.printStackTrace();
				}
			
			g.setColor(Color.black);
			g.drawString(title, x, y);
			g.fillRect(x + width - 15, y + 5, 10, 10);
			
			
			
			///Scan Lines
			if(!(ZeroDayExploit.globalKeys.get("--debug") && Keyboard.isKeyDown(Keyboard.KEY_Q)))
				for(int tmpY = y; tmpY < height + y; tmpY += 2)
					g.fillRect(x, tmpY, width + 1, 1);
			
			g.setColor(Color.white);
			//Debug info
			if(ZeroDayExploit.globalKeys.get("--debug"))
				g.drawString("("+ x +", "+ y +") : " + width + " X " + height, x, y - 20);
		}
	}
	
	public static void initPregame()
	{
		if(gameState == 0)
		{
			gameState = 1;
			if(saveSelect.getComponent("FILENAME") == null)
				saveSelect.addComponent("FILENAME", new TextField(GLComplex.gc, GLComplex.gc.getDefaultFont(), 10, 25, saveSelect.width - 20, 20));
		}else
			ZeroDayExploit.throwFatal("Attemped to initialize the pregame from an invalid state!");
	}
	
	public static void exitRuntime()
	{
		if(gameState == 2)
		{
			Processor.instance.memory = null;
			Processor.instance = null;
			System.gc();
			gameState = 0;
		}else
			ZeroDayExploit.throwFatal("Attemped to exit the runtime when it was probably not initialized");
	}
	
	public static void throwNonFatal(String message)
	{
		System.err.println("Processor threw an error: " + message);
		exitRuntime();
	}
	
	public static String getState()
	{
		switch(gameState)
		{
		case 0:
			return "none - 0";
		case 1:
			return "pregame - 1";
		case 2:
			return "ingame - 2";
		default:
			return "ABNORMAL - " + gameState;
		}
	}
	
	
	public static void renderGUI(AppGameContainer c, Graphics g)
	{
		if(gameState == 1)
		{
			if(ZeroDayExploit.globalKeys.get("--debug"))
				c.setShowFPS(true);
			
			g.clear();
			newsWindow.render(g);
			saveSelect.render(g);
			
			
			
			if(Keyboard.isKeyDown(Keyboard.KEY_RETURN) && saveSelect.getComponent("FILENAME").hasFocus())
			{
				System.out.println(((TextField)saveSelect.getComponent("FILENAME")).getText());
				
			}
				
		}
	}
}
