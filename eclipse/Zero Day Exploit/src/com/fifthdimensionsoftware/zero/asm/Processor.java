package com.fifthdimensionsoftware.zero.asm;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;
import java.util.LinkedList;

import com.fifthdimensionsoftware.zero.tools.MemoryUtil;

public class Processor {
	
	public enum ProcessorMode {
		User32, FIQ32, Supervisor32, Abort32, IRQ32, Undefined32;
	}
	
	private LinkedList<RandomAccessFile> disks = new LinkedList<RandomAccessFile>();
	private RandomAccessFile bios;
	public byte[] memory = new byte[536870912];
	
	public static HashMap<String, Register> globalRegsiters = new HashMap<String, Register>();
	public static Processor instance;
	public ProcessorMode mode = ProcessorMode.Undefined32;
	
	static
	{
		Register.initializeRegisters(globalRegsiters);
	}
	
	public Processor(File biosFile, File...diskFiles) throws IOException
	{
		instance = this;
		this.bios = new RandomAccessFile(biosFile, "rw");
		for(File file : diskFiles)
			this.disks.push(new RandomAccessFile(file, "rw"));
		MemoryUtil.loadFile(0, getBiosImage());
	}
	
	public byte[] getMemorySegment(int start, int length)
	{
		byte[] toReturn = new byte[length];
		
		System.arraycopy(this.memory, start, toReturn, 0, length);
		
		return toReturn;
	}
	
	public void setMemorySegment(int start, byte...data)
	{
		System.arraycopy(data, 0, this.memory, start, data.length);
	}
	
	public byte getMemory(int addr)
	{
		return this.memory[addr];
	}
	
	public void setMemory(int addr, byte data)
	{
		this.memory[addr] = data;
	}
	
	public RandomAccessFile getBiosImage()
	{
		return this.bios;
	}
}