package com.fifthdimensionsoftware.zero.asm;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashMap;
import java.util.LinkedList;

import com.fifthdimensionsoftware.zero.ZeroDayExploit;
import com.fifthdimensionsoftware.zero.tools.MemoryUtil;

public class Processor {
	
	public enum ProcessorMode {
		User32(1), FIQ32(2), Supervisor32(3), Abort32(4), IRQ32(5), Undefined32(0), System32(6);
		
		public byte id;
		
		private ProcessorMode(int id)
		{
			this.id = (byte) id;
		}
	}
	
	private LinkedList<RandomAccessFile> disks = new LinkedList<RandomAccessFile>();
	private RandomAccessFile bios;
	public byte[] memory = new byte[536870912];
	
	public static HashMap<String, Register> globalRegsiters = new HashMap<String, Register>();
	public static Processor instance;
	private ProcessorMode mode = ProcessorMode.Undefined32;
	
	static
	{
		Register.initializeRegisters(globalRegsiters);
	}
	
	public Processor(File biosFile, String...diskFiles) throws IOException
	{
		if(instance == null)
			instance = this;
		else
			ZeroDayExploit.throwFatal("Attempted to initialize the processor twice");
		this.bios = new RandomAccessFile(biosFile, "rw");
		for(String file : diskFiles)
			this.disks.push(new RandomAccessFile(new File(file), "rw"));
		MemoryUtil.loadFile(0, 0, 0xA545, getBiosImage());
	}
	
	public byte[] getMemorySegment(int start, int length)
	{
		byte[] toReturn = new byte[length];
		
		System.arraycopy(this.memory, start, toReturn, 0, length);
		
		return toReturn;
	}
	
	public void setMemorySegment(int start, byte...data)
	{
		System.arraycopy(data, 0, this.memory, start, data.length);
	}
	
	public byte getMemory(int addr)
	{
		return this.memory[addr];
	}
	
	public void setMemory(int addr, byte data)
	{
		this.memory[addr] = data;
	}
	
	public RandomAccessFile getBiosImage()
	{
		return this.bios;
	}
	
	public Register getRegisterPerMode(int id)
	{
		if(id == 18)
			return globalRegsiters.get("cpsr");
		
		if(this.mode != ProcessorMode.System32)
			return globalRegsiters.get("r"+id + "_" +this.mode.name());
		else
			return globalRegsiters.get("r"+id + "_User32");
	}
	
	public void setMode(ProcessorMode newMode)
	{
		System.out.println(Integer.toHexString(globalRegsiters.get("cpsr").getValue()));
		this.mode = newMode;
		globalRegsiters.get("cpsr").setValue((globalRegsiters.get("cpsr").getValue() & 0x00_ff_ff_ff) | this.mode.id);
		System.out.println(Integer.toHexString(globalRegsiters.get("cpsr").getValue()));
	}
	
	public ProcessorMode getMode()
	{
		return this.mode;
	}
	
	//The method to end all methods
	public void execute(int position)
	{
		this.setMode(ProcessorMode.Abort32);
		ZeroDayExploit.throwFatal("THIS IS A TEST");
	}
}