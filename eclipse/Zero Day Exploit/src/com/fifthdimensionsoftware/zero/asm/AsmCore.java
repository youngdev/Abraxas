package com.fifthdimensionsoftware.zero.asm;

import com.fifthdimensionsoftware.zero.tools.GameUtil;

public class AsmCore
{
	public static boolean isCondition(int opcode)
	{
		byte cond = (byte) (opcode >> 28);
		
		boolean[] cpsr = decodeCPSR(Processor.instance.getRegisterPerMode(18).getValue());
		int N = 0, Z = 1, C = 2, V = 3;
		
		switch(cond)
		{
		case 0b0000: //EQ
			return cpsr[Z];
		case 0b0001: //NE
			return !cpsr[Z];
		case 0b0010: //CS
			return cpsr[C];
		case 0b0011: //CC
			return !cpsr[C];
		case 0b0100: //MI
			return cpsr[N];
		case 0b0101: //PL
			return !cpsr[N];
		case 0b0110: //VS
			return cpsr[V];
		case 0b0111: //VC
			return !cpsr[V];
		case 0b1000: //HI
			return cpsr[C] && !cpsr[Z];
		case 0b1001: //LS
			return !cpsr[C] || cpsr[Z];
		case 0b1010: //GE
			return cpsr[N] == cpsr[V];
		case 0b1011: //LT
			return cpsr[N] != cpsr[V];
		case 0b1100: //GT
			return !cpsr[Z] && (cpsr[N] == cpsr[V]);
		case 0b1101: //LE
			return cpsr[Z] || (cpsr[N] != cpsr[V]);
		case 0b1110: //AL - ignored
			return true;
		default:
			GameUtil.throwNonFatal("Encountered unrecognized condition code \"" + Integer.toBinaryString(cond) + "\"");
			return false;
		}
	}
	
	public static boolean[] decodeCPSR(int cpsr)
	{
		return new boolean[]{cpsr >> 31 == 1, (cpsr >> 30 & 0b01) == 1, (cpsr >> 29 & 0b001) == 1, (cpsr >> 28 & 0b0001) == 1};
	}
}
