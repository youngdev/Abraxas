package com.fifthdimensionsoftware.zero.graphics;

import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;

//This class manages the game of life simulation for the menu
public class LifeUtil
{
	private static Cell[][] layerOne = new Cell[GraphicsUtil.getScreenWidth() / 5][GraphicsUtil.getScreenHeight() / 5], layerTwo = new Cell[layerOne.length][layerOne[0].length], activeLayer, inactiveLayer;
	private static boolean isActive = false;
	
	private static class Cell
	{
		public boolean isAlive;
		public int x, y;
		
		public Cell(int xParam, int yParam)
		{
			this.x = xParam;
			this.y = yParam;
		}
		
		public Cell duplicate()
		{
			Cell toReturn =  new Cell(x, y);
			toReturn.isAlive = this.isAlive;
			return toReturn;
		}
		
		public void doTick()
		{
			Cell[] neighbours = new Cell[8];
			
			neighbours[0] = getCell(x - 1, y - 1);
			neighbours[1] = getCell(x, y - 1);
			neighbours[2] = getCell(x + 1, y - 1);
			
			neighbours[3] = getCell(x - 1, y);
			neighbours[4] = getCell(x + 1, y);
			
			neighbours[5] = getCell(x - 1, y + 1);
			neighbours[6] = getCell(x, y + 1);
			neighbours[7] = getCell(x + 1, y + 1);
			
			int liveNeighbors = 0;
			
			for(Cell cell : neighbours)
				liveNeighbors += cell.isAlive ? 1 : 0;
			
			if(liveNeighbors == 3)
				this.isAlive = true;
			if(liveNeighbors != 3 && liveNeighbors != 2)
				this.isAlive = false;
		}
	}
	
	public static Cell getCell(int x, int y)
	{
		if(x < 0)
			x = inactiveLayer.length - 1 + x;
		if(y < 0)
			y = inactiveLayer[0].length - 1 + y;
		
		if(y > inactiveLayer[0].length - 1)
			y = y - inactiveLayer[0].length;
		if(x > inactiveLayer.length - 1)
			x = x - inactiveLayer.length;
		
		return inactiveLayer[x][y];
	}
	
	public static void render(Graphics g, Color color)
	{
		g.setColor(color);
		
		for (int x = 0; x < activeLayer.length; x++)
			for (int y = 0; y < activeLayer[0].length; y++)
				if(activeLayer[x][y].isAlive)
					g.fillRect(x * 5, y * 5, 5, 5);
	}
	
	public static void endLife()
	{
		isActive = false;
	}
	
	public static void startLife()
	{
		isActive = true;
		
		activeLayer = layerOne;
		inactiveLayer = layerTwo;
		
		for (int x = 0; x < activeLayer.length; x++)
			for (int y = 0; y < activeLayer[x].length; y++){
				activeLayer[x][y] = new Cell(x, y);
				inactiveLayer[x][y] = new Cell(x, y);
				if(Math.random() * 10 > 9){//(x == 1 && y == 3) || (x == 2 && y == 1) || (x == 2 && y == 3) || (x == 3 && (y == 2 || y == 3))){
					activeLayer[x][y].isAlive = true;
					inactiveLayer[x][y].isAlive = true;
				}
			}
		
		new Thread()
		{
			private int totTicks = 0;
			
			public void run()
			{
				while(isActive)
				{
					totTicks++;
					
					for(Cell[] cellLevel : activeLayer)
						for(Cell cell : cellLevel)
							cell.doTick();
					
					if(totTicks > 1000){
						totTicks = 0;
						for (int x = 0; x < activeLayer.length; x++)
							for (int y = 0; y < activeLayer[x].length; y++){
								activeLayer[x][y] = new Cell(x, y);
								inactiveLayer[x][y] = new Cell(x, y);
								if(Math.random() * 10 > 9){//(x == 1 && y == 3) || (x == 2 && y == 1) || (x == 2 && y == 3) || (x == 3 && (y == 2 || y == 3))){
									activeLayer[x][y].isAlive = true;
									inactiveLayer[x][y].isAlive = true;
								}
							}
					}
					
					for (int x = 0; x < inactiveLayer.length; x++)
						for (int y = 0; y < inactiveLayer[x].length; y++)
							inactiveLayer[x][y] = activeLayer[x][y].duplicate();
				}
			}
		}.start();
	}
}
