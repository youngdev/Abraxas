package com.fifthdimensionsoftware.zero.graphics;

import java.awt.GraphicsEnvironment;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;

import org.lwjgl.BufferUtils;
import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.newdawn.slick.Color;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.gui.TextField;

import com.fifthdimensionsoftware.zero.tools.FileUtil;
import com.fifthdimensionsoftware.zero.tools.GameUtil;
import com.fifthdimensionsoftware.zero.tools.MouseUtil;

import static com.fifthdimensionsoftware.zero.ZeroDayExploit.castTo;

public class GraphicsUtil
{
	public static final Color amber = Color.green;//new Color(255, 191, 0);
	
	public static void displayLoadingImage(String imageFile, Graphics g, long delay)
	{
		try {
			g.clear();
			new Image(FileUtil.getFile(imageFile), imageFile, false).drawCentered(getScreenWidth() / 2, getScreenHeight() / 2);
			Display.update();
			Thread.sleep(delay);
			Display.update();
			g.clear();
			
		} catch (SlickException | InterruptedException | FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	public static int getScreenWidth()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getWidth();
	}
	
	public static int getScreenHeight()
	{
		return GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDisplayMode().getHeight();
	}
	
	public static void takeScreenShot(final int xParam, final int yParam, final int width, final int height, final String file)
	{
		GL11.glReadBuffer(GL11.GL_FRONT);
		final ByteBuffer buffer = BufferUtils.createByteBuffer(width * height * 4);
		GL11.glReadPixels(xParam, yParam, width, height, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
		new Thread()
		{
			public void run()
			{
				BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
				  
				for(int x = 0; x < width; x++){
					for(int y = 0; y < height; y++)
					{
						int i = (x + (width * y)) * 4;
						int r = buffer.get(i) & 0xFF;
						int g = buffer.get(i + 1) & 0xFF;
						int b = buffer.get(i + 2) & 0xFF;
						image.setRGB(x, height - (y + 1), (0xFF << 24) | (r << 16) | (g << 8) | b);
					}
				}
				  
				try {
					ImageIO.write(image, "PNG", new File(file));
				} catch (IOException e) { e.printStackTrace(); }
			}
		}.start();
	}
	
	private static int skipLines = 0;
	
	public static void renderFiles(int x, int y, int width, int height, Graphics g)
	{
		if(MouseUtil.withinBounds(x, x + width, y, y + height))
			skipLines -= GameUtil.DWheel / 60;
		skipLines = skipLines < 0 ? 0 : skipLines;
		
		int origY = y;
		x += 5;
		y += 5;
		
		String[] tmpLines = GameUtil.fileList.split("\n");
		skipLines = skipLines > tmpLines.length - 1 ? tmpLines.length - 1 : skipLines;
		int tmpSkip = 0;
		
		for(String line : tmpLines)
		{
			if(line.trim().isEmpty()){
				line = "No Files Found";
				g.drawString(line.length() > 21 ? line.substring(0, 21) : line, x, y + 20);
				break;
			}
			
			if(tmpSkip++ < skipLines) continue;
			
			if(((TextField)GameUtil.saveSelect.getComponent("FILENAME")).getText().equals(line) && y - origY + GLComplex.gc.getDefaultFont().getHeight(line) + 20 < height - 20)
				g.drawString(line.length() > 21 ? line.substring(0, 21) : line, x, y + 20);
			
			if(y - origY + GLComplex.gc.getDefaultFont().getHeight(line) + 20 < height - 20)
				g.drawString(line.length() > 21 ? line.substring(0, 21) : line, x, y += 20);
			else
			{
				g.drawString("...", x, y + 20);
				break;
			}
		}
	}
	
	public static void renderMessage(int x, int y, int width, int height, Graphics g)
	{
		castTo(GameUtil.saveSelect.getComponent("FILENAME"), TextField.class).deactivate();
		boolean exists = GameUtil.fileList.contains(castTo(GameUtil.saveSelect.getComponent("FILENAME"), TextField.class).getText() + "\n") || GameUtil.fileList.contains("\n" + castTo(GameUtil.saveSelect.getComponent("FILENAME"), TextField.class).getText());
		String message = exists ? "Ready to resume" : "Ready to create";
		g.drawString(message.length() > 21 ? message.substring(0, 21) : message, x + width / 2 - GLComplex.gc.getDefaultFont().getWidth(message.length() > 21 ? message.substring(0, 21) : message) / 2, y + 25);
		message = castTo(GameUtil.saveSelect.getComponent("FILENAME"), TextField.class).getText();
		g.drawString(message.length() > 21 ? message.substring(0, 21) : message, x + width / 2 - GLComplex.gc.getDefaultFont().getWidth(message.length() > 21 ? message.substring(0, 21) : message) / 2, y + 40);
		
		g.fillRect(x + 5, y + height - 35, width / 2 - 10, 30);
		
		g.fillRect(x + width - (width / 2 - 10) - 5, y + height - 35, width / 2 - 10, 30);
		
		g.setColor(Color.black);
		message = "OK";
		g.drawString(message.length() > 21 ? message.substring(0, 21) : message, (x + 5) + (width / 2 - 10) / 2 - GLComplex.gc.getDefaultFont().getWidth(message.length() > 21 ? message.substring(0, 21) : message) / 2, (y + height - 35) + 5);
		
		message = "CANCEL";
		g.drawString(message.length() > 21 ? message.substring(0, 21) : message, (x + width - (width / 2 - 10) - 5) + (width / 2 - 10) / 2 - GLComplex.gc.getDefaultFont().getWidth(message.length() > 21 ? message.substring(0, 21) : message) / 2, (y + height - 35) + 5);
		
		if(MouseUtil.withinBounds(x + 5, width / 2 - 5 + x, y + height - 35, y + height - 5) && Mouse.isButtonDown(0) && !GameUtil.confirmBox.startDrag && !GameUtil.newsWindow.startDrag && !GameUtil.saveFiles.startDrag && !GameUtil.saveSelect.startDrag)
			GameUtil.initRuntime(castTo(GameUtil.saveSelect.getComponent("FILENAME"), TextField.class).getText() + ".sav");
		
		if(MouseUtil.withinBounds(x + width - (width / 2 - 10) - 5, x + width - (width / 2 - 10) - 5 + width / 2 - 10, y + height - 35, y + height - 5) && Mouse.isButtonDown(0) && !GameUtil.confirmBox.startDrag && !GameUtil.newsWindow.startDrag && !GameUtil.saveFiles.startDrag && !GameUtil.saveSelect.startDrag)
		{
			GameUtil.confirmBox.visible = false;
		}
	}
}