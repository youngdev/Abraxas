package com.fifthdimensionsoftware.fbpl;

import java.io.*;
import java.util.*;

//Object for facilitating the execution of a single method
public class Method<T> {
	public File codeBase;
	public String type = "null";
	public Stack<String> location = new Stack<String>();
	public Object[] fileCache;
	public Object[] croppedCache;
	private boolean hasBegun;
	public int index;
	
	public Method(File fbplParam, String type, int index, Object[] cache)
	{
		this.codeBase = fbplParam;
		if(!this.type.isEmpty())
			this.type = type;
		else
			this.type = "null";
		this.fileCache = cache;
		this.index = index;
		this.croppedCache = new Object[fileCache.length-index-1];
		System.arraycopy(this.fileCache, index+1, this.croppedCache, 0, this.croppedCache.length);
	}
	//Execute this method
	public T execute(Object[] args) throws Exception
	{
		T toReturn = null;
		int index = 0;
		outer : for(Object item : this.croppedCache)
		{
			String line = ((String)item).trim();
			if(index > 0)
			{
				switch(line.split(" ")[0])
				{
				case "{":
					this.moveIn(((String)croppedCache[index-1]).split(" |\\(")[0].trim());
					System.out.println(this.getLocation());
					break;
				case "}":
					if(this.hasBegun && this.location.isEmpty())
						break outer;
					else
						this.moveOut();
					break;
				case "print":
					TTY.getTerminal(((String)this.croppedCache[0]).split(" |\\(")[0]).println(line.split("\"")[1].replace("\\n", "\n"));
					break;
				case "err":
					TTY.getTerminal(((String)this.croppedCache[0]).split(" |\\(")[0]).println("[ERROR]"+line.split("\"")[1].replace("\\n", "\n"));
					break;
				}
				this.hasBegun = true;
			}
			
			index++;
		}
		return toReturn;
	}
	
	//Get the next not-blank line from the scanner (also treats comments as blank)
	public String nextValidLine(Scanner fbplCode)
	{
		if(fbplCode.hasNext())
		{
			String nextLine = fbplCode.nextLine();
			while((nextLine.trim().isEmpty() || nextLine.trim().startsWith("//")) && fbplCode.hasNext())
			{
				nextLine = fbplCode.nextLine();
			}
			return nextLine.trim();
		}else
			return "";
	}
	
	//Exit a code block
	public void moveOut()
	{
		this.location.pop();
	}
	
	//Enter a code block
	public void moveIn(String loc)
	{
		this.hasBegun = true;
		this.location.push(loc);
	}
	
	//Retieve current execution location
	public String getLocation()
	{
		return this.location.peek();
	}
	
	public String[] cacheMethod()
	{
		return null;
	}
}
