;Display logo
	;Obtain the image's absoulute address
	ADD r1, r15, #:img:
	
	LDR r1, r2, #0
	LDR r1, r3, #4
	
	;Get the total offset bytes
	MUL r5, r2, r3
	MUL r5, r5, #3
	
	MUL r2, r2, #2
	
	ADD r1, r1, #8
	
	CLR
	MOV r8, #2
	
	FILL
:imgLoop:
	
	;Read and set the color
	LDR r1, r9, r4
	BIC r9, r9, 0b11111111
	CMP r9, #0
	ORR_NE r9, r9, 0b11111111
	COLOR_NE r9
	
	RECT_NE r7, r6, r8, r8
	
	ADD r6, r6, #2
	
	CMP r6, r2
	
	MOV_EQ r6, #0
	ADD_EQ r7, r7, #2
	
	;Increase the offset, see if we're done rendering
	ADD r4, r4, #3
	CMP r4, r5
	BLE #:imgLoop:
;Init registers
	CTD r1
	MOV r3, #512
	MOV r2, #0
;Loop to find disks
:loop:
	DLDR r3, r0, r3, r2
	
	LDR r3, r4, #508
	CMP r4, #0x7ff
	
	B_EQ #:boot:
	
	ADD r2, r2, #1
	CMP r2, r1
	B_EQ #:exit:
	B_LT #:loop:
	
;No disks found, draw text and wait
:exit:
	MOV r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	COLOR r1
	
	ADD r1, r15, #:str:
	MOV r0, #5

	CLR
	TEXT r0, r0, r1
	
	ADD r2, r15, #:HLT:
	
	MOV r12, r1
	ADD r12, r12, #20
	STR r12, r2, #0
	
	;Infinite loop
	B #0
;Triggered by the keyboard interrupt
:HLT:
	HLT
;Prepare for boot jump
:boot:
	;Clear screen, reset color
	CLR
	MOV r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	LSL r1, r1, #8
	ORR r1, r1, #0xff
	COLOR r1
	
	MOV r0, #0
	MOV r1, r2
	MOV r2, #0
	MOV r3, #0
	MOV r4, #0
	MOV r5, #0
	MOV r6, #0
	MOV r7, #0
	MOV r8, #0
	MOV r9, #0
	MOV r10, #0
	MOV r11, #0
	MOV r12, #0
	MOV r13, #0
	MOV r14, #0
	;TAKE THE SHOT!
	MOV r15, #508
:str:
"No operating system found"
0x 00 x0
:img:
# logo.bmp #