? ct = r2 ?
? code = r1 ?
? key = r0 ?
? addr = r3 ?
? lr = r14 ?
? pc = r15 ?

	CPM #0b10

;Prepare the IVT
	MOV r12, #:end:
	ADD r12, r12, r15
	SUB r12, r12, #4
	
;Prepare the keyboard interrupt
	;Obtain an absolute address
	MOV r1, #:key:
	ADD r1, r1, r15
	SUB r1, r1, #4
	
	;Write the table
	STR r12, r1, #0
	MOV r1, #0
	
	;Prepare the stack
	MOV r13, #:end:
	ADD r13, r13, r15
	;Allow for 16 interrupts before the stack
	ADD r13, r13, #60
	
	;Prepare the #512 constant
	MOV addr, #512
	
	;Infinite stall loop
	B #0
	
:key:
	;Update the mode so the previous registers exist
	CPM #0b10
	
	CMP key, #56
	
	HLTEQ
	
	;Check for backspace
	CMP key, #14
	
	;If not found, jump away
	BNE #:chk:
	
	;Move backwards, erasing as you do so
	SUBEQ ct, ct, #1
	STRBEQ ct, r4, addr
	CLREQ
	TEXTEQ r7, r8, addr
	MOVEQ pc, lr
	
:chk:
	;Make sure the pressed key has a renderable character
	CMP code, #0
	
	MOVEQ pc, lr
	
	;Store the pressed key
	STRB ct, code, addr
	ADD ct, ct, #1
	STRB ct, r4, addr
	
	CLR
	TEXT r7, r8, addr
	
	MOV pc, lr
:end: